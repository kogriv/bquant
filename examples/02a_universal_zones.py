#!/usr/bin/env python3
"""
BQuant - Universal Zone Analysis: One API for All Indicators

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ—â—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–æ–Ω.

–ö–õ–Æ–ß–ï–í–ê–Ø –ò–î–ï–Ø: –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –í–°–ï–• –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤!
- MACD, RSI, AO, Stochastic, –ª—é–±–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
- –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ (zero_crossing, threshold, line_crossing, preloaded, combined)
- –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ (features, statistics, clustering, sequences)

–†–∞–∑–¥–µ–ª—ã:
1. MACD zones (zero-crossing strategy)
2. RSI zones (threshold strategy)
3. AO zones (zero-crossing strategy)
4. MA crossover zones (line-crossing strategy)
5. Preloaded zones (external data)
6. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
7. –ú–æ–¥—É–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- BQuant: pip install -e .
"""

import sys
import os
import pandas as pd
import numpy as np
import tempfile

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from bquant.analysis.zones import analyze_zones
from bquant.analysis.zones.presets import (
    analyze_macd_zones,
    analyze_rsi_zones,
    analyze_ao_zones
)


def create_sample_data(rows: int = 300) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –æ—Å—Ü–∏–ª–ª—è—Ü–∏—è–º–∏."""
    dates = pd.date_range(start='2024-01-01', periods=rows, freq='1H')
    np.random.seed(42)
    
    base = 100.0
    prices = [base]
    
    for i in range(1, rows):
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥ + —à—É–º
        trend = 15 * np.sin(i / 40)
        noise = np.random.normal(0, 0.5)
        new_price = prices[-1] + trend/10 + noise
        prices.append(max(new_price, 50))  # –ú–∏–Ω–∏–º—É–º 50
    
    return pd.DataFrame({
        'open': prices,
        'high': [p * 1.005 for p in prices],
        'low': [p * 0.995 for p in prices],
        'close': prices,
        'volume': np.random.uniform(1000, 5000, rows)
    }, index=dates)


def print_section(title: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞."""
    print(f"\n{'='*80}")
    print(f"  {title}")
    print(f"{'='*80}\n")


def print_zone_stats(result, indicator_name: str):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–æ–Ω–∞–º."""
    print(f"‚úÖ {indicator_name} - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   –ó–æ–Ω: {len(result.zones)}")
    
    if len(result.zones) > 0:
        types = {}
        for z in result.zones:
            types[z.type] = types.get(z.type, 0) + 1
        
        for zone_type, count in types.items():
            print(f"   - {zone_type}: {count}")
        
        avg_duration = sum(z.duration for z in result.zones) / len(result.zones)
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –±–∞—Ä–æ–≤")


def main():
    print_section("Universal Zone Analysis - One API for All Indicators")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    df = create_sample_data(rows=300)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} –±–∞—Ä–æ–≤\n")
    
    # ========================================================================
    # 1. MACD ZONES
    # ========================================================================
    print_section("1. MACD Zones - Zero Crossing Strategy")
    
    print("–ß–µ—Ä–µ–∑ fluent API:")
    result_macd = (
        analyze_zones(df)
        .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
        .detect_zones('zero_crossing', indicator_col='macd_hist')
        .analyze(clustering=True, n_clusters=3)
        .build()
    )
    print_zone_stats(result_macd, "MACD")
    
    print("\n–ß–µ—Ä–µ–∑ preset (–∫–æ—Ä–æ—á–µ):")
    result_macd_preset = analyze_macd_zones(df, fast=12, slow=26, signal=9)
    print(f"   –ó–æ–Ω —á–µ—Ä–µ–∑ preset: {len(result_macd_preset.zones)}")
    
    # ========================================================================
    # 2. RSI ZONES
    # ========================================================================
    print_section("2. RSI Zones - Threshold Strategy")
    
    print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏:")
    result_rsi = (
        analyze_zones(df)
        .with_indicator('pandas_ta', 'rsi', length=14)
        .detect_zones('threshold',
                     indicator_col='RSI_14',
                     upper_threshold=70,
                     lower_threshold=30)
        .analyze(clustering=False)
        .build()
    )
    print_zone_stats(result_rsi, "RSI")
    
    print("\n–ß–µ—Ä–µ–∑ preset:")
    result_rsi_preset = analyze_rsi_zones(df, period=14, upper_threshold=70, lower_threshold=30)
    print(f"   –ó–æ–Ω —á–µ—Ä–µ–∑ preset: {len(result_rsi_preset.zones)}")
    
    # ========================================================================
    # 3. AWESOME OSCILLATOR ZONES
    # ========================================================================
    print_section("3. Awesome Oscillator Zones - Zero Crossing Strategy")
    
    print("–¢–∞ –∂–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —á—Ç–æ –∏ MACD, –Ω–æ –¥—Ä—É–≥–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:")
    result_ao = (
        analyze_zones(df)
        .with_indicator('pandas_ta', 'ao', fast=5, slow=34)
        .detect_zones('zero_crossing', indicator_col='AO_5_34')
        .analyze(clustering=False)
        .build()
    )
    print_zone_stats(result_ao, "AO")
    
    print("\n–ß–µ—Ä–µ–∑ preset:")
    result_ao_preset = analyze_ao_zones(df, fast=5, slow=34)
    print(f"   –ó–æ–Ω —á–µ—Ä–µ–∑ preset: {len(result_ao_preset.zones)}")
    
    # ========================================================================
    # 4. MA CROSSOVER ZONES
    # ========================================================================
    print_section("4. Moving Average Crossover - Line Crossing Strategy")
    
    print("–ó–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:")
    
    # –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º MA (–∏–ª–∏ –æ–Ω–∏ —É–∂–µ –≤ –¥–∞–Ω–Ω—ã—Ö)
    df_with_ma = df.copy()
    df_with_ma['sma_fast'] = df['close'].rolling(10).mean()
    df_with_ma['sma_slow'] = df['close'].rolling(30).mean()
    
    result_ma = (
        analyze_zones(df_with_ma)
        .detect_zones('line_crossing',
                     line1_col='sma_fast',
                     line2_col='sma_slow')
        .analyze(clustering=False)
        .build()
    )
    print_zone_stats(result_ma, "MA Crossover")
    
    # ========================================================================
    # 5. PRELOADED ZONES
    # ========================================================================
    print_section("5. Preloaded Zones - External Data")
    
    print("–ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (CSV, Excel, database):")
    
    # –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–º–µ—Ä –∑–æ–Ω
    zones_external = pd.DataFrame({
        'zone_id': [0, 1, 2],
        'start_time': pd.to_datetime([
            '2024-01-01 00:00:00',
            '2024-01-01 10:00:00',
            '2024-01-02 00:00:00'
        ]),
        'end_time': pd.to_datetime([
            '2024-01-01 09:00:00',
            '2024-01-01 23:00:00',
            '2024-01-02 12:00:00'
        ]),
        'type': ['bull', 'bear', 'bull']
    })
    
    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        zones_external.to_csv(f.name, index=False)
        csv_path = f.name
    
    result_preloaded = (
        analyze_zones(df)
        .detect_zones('preloaded', zones_data=csv_path)
        .analyze(clustering=False)
        .build()
    )
    print_zone_stats(result_preloaded, "Preloaded")
    
    os.remove(csv_path)  # Cleanup
    
    # ========================================================================
    # 6. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï
    # ========================================================================
    print_section("6. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("-" * 40)
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –∫—ç—à –ø—Ä–æ–ø—É—Å–∫
    print("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (cache miss)...")
    result_cached_1 = (
        analyze_zones(df)
        .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
        .detect_zones('zero_crossing', indicator_col='macd_hist')
        .with_cache(enable=True, ttl=3600)
        .build()
    )
    print(f"   –ó–æ–Ω: {len(result_cached_1.zones)}")
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –∫—ç—à hit (—Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    print("\n–í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ (cache hit)...")
    result_cached_2 = (
        analyze_zones(df)
        .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
        .detect_zones('zero_crossing', indicator_col='macd_hist')
        .with_cache(enable=True, ttl=3600)
        .build()
    )
    print(f"   –ó–æ–Ω: {len(result_cached_2.zones)} (–∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞)")
    
    print("\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("-" * 40)
    
    # Pickle (–±—ã—Å—Ç—Ä–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
    result_macd.save('results/macd_zones.pkl', format='pickle')
    print("   üíæ Pickle: results/macd_zones.pkl")
    
    # JSON (—á–∏—Ç–∞–µ–º–æ, –±–µ–∑ DataFrame)
    result_macd.save('results/macd_zones.json', format='json', include_data=False)
    print("   üíæ JSON: results/macd_zones.json")
    
    # Parquet (–∫–æ–º–ø–∞–∫—Ç–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
    result_macd.save('results/macd_zones.parquet', format='parquet', compress=True)
    print("   üíæ Parquet: results/macd_zones.parquet/")
    
    print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("-" * 40)
    
    from bquant.analysis.zones.models import ZoneAnalysisResult
    
    loaded = ZoneAnalysisResult.load('results/macd_zones.pkl')
    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ pickle: {len(loaded.zones)} –∑–æ–Ω")
    
    # ========================================================================
    # 7. –ú–û–î–£–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï
    # ========================================================================
    print_section("7. –ú–æ–¥—É–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    
    print("–ü—Ä–∏–º–µ—Ä 1: –¢–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏—è (–±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞):")
    print("-" * 40)
    
    from bquant.analysis.zones.detection import ZoneDetectionRegistry, ZoneDetectionConfig
    from bquant.indicators import IndicatorFactory
    
    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI
    rsi_ind = IndicatorFactory.create('pandas_ta', 'rsi', length=14)
    rsi_data = rsi_ind.calculate(df)
    
    df_with_rsi = df.copy()
    for col in rsi_data.data.columns:
        df_with_rsi[col] = rsi_data.data[col]
    
    # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—ã
    detector = ZoneDetectionRegistry.get('threshold')
    config = ZoneDetectionConfig(
        min_duration=2,
        rules={'indicator_col': 'RSI_14', 'upper_threshold': 70, 'lower_threshold': 30},
        strategy_name='threshold'
    )
    zones_only = detector.detect_zones(df_with_rsi, config)
    
    print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(zones_only)} RSI –∑–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏—è, –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞)")
    
    print("\n–ü—Ä–∏–º–µ—Ä 2: –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∑–æ–Ω:")
    print("-" * 40)
    
    from bquant.analysis.zones import UniversalZoneAnalyzer
    
    analyzer = UniversalZoneAnalyzer()
    result_only_analysis = analyzer.analyze_zones(
        zones_only,
        df_with_rsi,
        perform_clustering=False
    )
    
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(result_only_analysis.zones)} –∑–æ–Ω")
    print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {list(result_only_analysis.statistics.keys())[:3]}...")
    
    # ========================================================================
    # –ò–¢–û–ì–ò
    # ========================================================================
    print_section("–ò—Ç–æ–≥–∏")
    
    print("üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ = ZERO –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞:")
    print("-" * 40)
    print(f"{'–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä':<20} {'–ó–æ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ':<20} {'–°—Ç—Ä–æ–∫ –∫–æ–¥–∞':<20}")
    print("-" * 60)
    print(f"{'MACD':<20} {len(result_macd.zones):<20} {'5-10 (builder)':<20}")
    print(f"{'RSI':<20} {len(result_rsi.zones):<20} {'5-10 (builder)':<20}")
    print(f"{'AO':<20} {len(result_ao.zones):<20} {'5-10 (builder)':<20}")
    print(f"{'MA Crossover':<20} {len(result_ma.zones):<20} {'5-10 (builder)':<20}")
    print(f"{'Preloaded':<20} {len(result_preloaded.zones):<20} {'5-10 (builder)':<20}")
    
    print("\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
    print("   1. –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("   2. –ù–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - 0 —Å—Ç—Ä–æ–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞!")
    print("   3. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   4. –õ–µ–≥–∫–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    print("   5. –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏")
    
    print("\nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("   - –ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏")
    print("   - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("   - –°–º. docs/developer_guide/zone_detection_strategies.md")
    
    print("\nüîó –°—Å—ã–ª–∫–∏:")
    print("   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/api/analysis/zones.md")
    print("   - –ú–æ–¥—É–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: devref/gaps/zo/zomodul.md")
    print("   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: devref/gaps/zo/zonan.md")


if __name__ == "__main__":
    main()

