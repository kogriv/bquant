"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –≠—Ç–∞–ø 8

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è:
- –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
- –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
"""

import time
import pandas as pd
import numpy as np
from typing import List, Dict, Any

def test_architecture_validation():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - –≠—Ç–∞–ø 8")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100),
        'macd': np.random.randn(100).cumsum(),
        'signal': np.random.randn(100).cumsum()
    }, index=dates)
    
    # 1. –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    if not test_inheritance_architecture():
        return False
    
    # 2. –¢–µ—Å—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    if not test_unified_interface():
        return False
    
    # 3. –¢–µ—Å—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞:")
    if not test_polymorphism(test_data):
        return False
    
    # 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    if not test_performance(test_data):
        return False
    
    # 5. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    if not test_compatibility(test_data):
        return False
    
    # 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
    if not test_error_handling():
        return False
    
    # 7. –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏:")
    if not test_extensibility():
        return False
    
    print("\n" + "=" * 70)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_inheritance_architecture() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    
    try:
        from bquant.indicators import (
            BaseIndicator, PreloadedIndicator, CustomIndicator, LibraryIndicator
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        print("   ‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
        print(f"      BaseIndicator: {BaseIndicator.__bases__}")
        print(f"      PreloadedIndicator: {PreloadedIndicator.__bases__}")
        print(f"      CustomIndicator: {CustomIndicator.__bases__}")
        print(f"      LibraryIndicator: {LibraryIndicator.__bases__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç BaseIndicator
        assert issubclass(PreloadedIndicator, BaseIndicator), "PreloadedIndicator –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseIndicator"
        assert issubclass(CustomIndicator, BaseIndicator), "CustomIndicator –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseIndicator"
        assert issubclass(LibraryIndicator, BaseIndicator), "LibraryIndicator –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseIndicator"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        print("   ‚úÖ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
        print(f"      BaseIndicator.calculate: {hasattr(BaseIndicator, 'calculate')}")
        print(f"      CustomIndicator.get_output_columns: {hasattr(CustomIndicator, 'get_output_columns')}")
        print(f"      CustomIndicator.get_description: {hasattr(CustomIndicator, 'get_description')}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_unified_interface() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        indicators = {
            'preloaded': IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal']),
            'custom_sma': IndicatorFactory.create('custom', 'sma', period=20),
            'custom_ema': IndicatorFactory.create('custom', 'ema', period=20),
        }
        
        print("   ‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        common_methods = ['calculate', 'validate_data', 'get_statistics', 'get_required_columns']
        for name, indicator in indicators.items():
            print(f"      {name}: {type(indicator).__name__}")
            for method in common_methods:
                if hasattr(indicator, method):
                    print(f"        ‚úÖ {method}")
                else:
                    print(f"        ‚ùå {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for indicator in indicators.values():
            assert hasattr(indicator, 'calculate'), "–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ calculate"
            assert hasattr(indicator, 'validate_data'), "–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ validate_data"
            assert hasattr(indicator, 'get_statistics'), "–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ get_statistics"
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False


def test_polymorphism(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º:")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        indicators = [
            IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal']),
            IndicatorFactory.create('custom', 'sma', period=20),
            IndicatorFactory.create('custom', 'ema', period=20),
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        for i, indicator in enumerate(indicators):
            print(f"      –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {i+1}: {type(indicator).__name__}")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            is_valid = indicator.validate_data(test_data)
            print(f"        ‚úÖ validate_data: {is_valid}")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
            result = indicator.calculate(test_data)
            print(f"        ‚úÖ calculate: {type(result).__name__}")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = indicator.get_statistics(test_data)
            print(f"        ‚úÖ get_statistics: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert hasattr(result, 'data'), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç data"
            assert hasattr(result, 'config'), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç config"
            assert hasattr(result, 'metadata'), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç metadata"
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞: {e}")
        return False


def test_performance(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        indicators = [
            ('preloaded_macd', IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal'])),
            ('custom_sma', IndicatorFactory.create('custom', 'sma', period=20)),
            ('custom_ema', IndicatorFactory.create('custom', 'ema', period=20)),
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞
        for name, indicator in indicators:
            print(f"      {name}:")
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞
            start_time = time.time()
            result = indicator.calculate(test_data)
            calc_time = time.time() - start_time
            
            print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {calc_time:.4f} —Å–µ–∫")
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            start_time = time.time()
            is_valid = indicator.validate_data(test_data)
            valid_time = time.time() - start_time
            
            print(f"        ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {valid_time:.4f} —Å–µ–∫")
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            start_time = time.time()
            stats = indicator.get_statistics(test_data)
            stats_time = time.time() - start_time
            
            print(f"        ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_time:.4f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–µ
            assert calc_time < 1.0, f"–†–∞—Å—á–µ—Ç {name} –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {calc_time} —Å–µ–∫"
            assert valid_time < 0.1, f"–í–∞–ª–∏–¥–∞—Ü–∏—è {name} –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {valid_time} —Å–µ–∫"
            assert stats_time < 0.1, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {name} –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {stats_time} —Å–µ–∫"
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_compatibility(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ create_indicator (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
        print("      –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ create_indicator:")
        try:
            old_sma = IndicatorFactory.create_indicator('sma', period=20)
            print(f"        ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {type(old_sma).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
            new_sma = IndicatorFactory.create('custom', 'sma', period=20)
            old_result = old_sma.calculate(test_data)
            new_result = new_sma.calculate(test_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert old_result.data.shape == new_result.data.shape, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ñ–æ—Ä–º—É"
            print(f"        ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {old_result.data.shape}")
            
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("      –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤:")
        try:
            from bquant.indicators.preloaded.macd import MACDPreloadedIndicator
            from bquant.indicators.custom.sma import SimpleMovingAverage
            from bquant.indicators.custom.ema import ExponentialMovingAverage
            
            print(f"        ‚úÖ MACDPreloadedIndicator: {MACDPreloadedIndicator}")
            print(f"        ‚úÖ SimpleMovingAverage: {SimpleMovingAverage}")
            print(f"        ‚úÖ ExponentialMovingAverage: {ExponentialMovingAverage}")
            
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False


def test_error_handling() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        print("      –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:")
        try:
            IndicatorFactory.create('unknown', 'sma')
            print("        ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
            return False
        except ValueError as e:
            print(f"        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        print("      –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:")
        try:
            IndicatorFactory.create('custom', 'unknown_indicator')
            print("        ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
            return False
        except KeyError as e:
            print(f"        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("      –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        try:
            IndicatorFactory.create('custom', 'sma', invalid_param='value')
            print("        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        except Exception as e:
            print(f"        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False


def test_extensibility() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
        all_indicators = IndicatorFactory.list_indicators()
        print(f"      –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(all_indicators)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = ['preloaded', 'custom', 'library']
        for source in sources:
            indicators = IndicatorFactory.get_indicators_by_source(source)
            print(f"        {source}: {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if 'sma' in all_indicators:
            info = IndicatorFactory.get_indicator_info('sma')
            print(f"      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SMA: {info['source']} - {info['class']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("      –ì–∏–±–∫–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        sma_10 = IndicatorFactory.create('custom', 'sma', period=10)
        sma_50 = IndicatorFactory.create('custom', 'sma', period=50)
        
        print(f"        ‚úÖ SMA(10): {type(sma_10).__name__}")
        print(f"        ‚úÖ SMA(50): {type(sma_50).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert sma_10.config.parameters['period'] == 10, "–ü–∞—Ä–∞–º–µ—Ç—Ä period –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10"
        assert sma_50.config.parameters['period'] == 50, "–ü–∞—Ä–∞–º–µ—Ç—Ä period –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 50"
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏: {e}")
        return False


if __name__ == "__main__":
    success = test_architecture_validation()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
