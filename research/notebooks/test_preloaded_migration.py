"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –≠—Ç–∞–ø 3

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã MACDPreloadedIndicator –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
"""

import pandas as pd
import numpy as np
from bquant.indicators import MACDPreloadedIndicator

def test_preloaded_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞:")
    try:
        from bquant.indicators.preloaded import MACDPreloadedIndicator
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ preloaded –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ preloaded: {e}")
        return False
    
    try:
        from bquant.indicators import MACDPreloadedIndicator
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:")
    try:
        macd_default = MACDPreloadedIndicator()
        print(f"‚úÖ –û–±—ä–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω: {macd_default.name}")
        print(f"   –ö–æ–ª–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {macd_default.get_default_columns()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        return False
    
    try:
        macd_custom = MACDPreloadedIndicator(required_columns=['macd', 'signal', 'histogram'])
        print(f"‚úÖ –û–±—ä–µ–∫—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {macd_custom.name}")
        print(f"   –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {macd_custom.get_required_columns()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:")
    try:
        default_cols = MACDPreloadedIndicator.get_default_columns()
        print(f"‚úÖ get_default_columns(): {default_cols}")
        
        info = MACDPreloadedIndicator.get_info()
        print(f"‚úÖ get_info() - –Ω–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
        print(f"   –¢–∏–ø: {info['type']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description'][:50]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame({
        'macd': [1.0, 1.1, 1.2, 1.3, 1.4],
        'signal': [0.9, 1.0, 1.1, 1.2, 1.3],
        'histogram': [0.1, 0.1, 0.1, 0.1, 0.1]
    })
    
    try:
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation = macd_default.validate_data(test_data)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {validation}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞
        result = macd_default.calculate(test_data)
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(result.data.columns)}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(result.data)}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = macd_default.get_statistics(test_data)
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫: {list(stats.keys())}")
        
        # –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤
        trend_up = macd_default.is_trending_up(test_data)
        trend_down = macd_default.is_trending_down(test_data)
        print(f"‚úÖ –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö: {trend_up}, –¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑: {trend_down}")
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        crossovers = macd_default.get_crossovers(test_data)
        print(f"‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {crossovers['bullish_crossovers']} –±—ã—á—å–∏—Ö, {crossovers['bearish_crossovers']} –º–µ–¥–≤–µ–∂—å–∏—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ histogram
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ histogram:")
    try:
        data_no_hist = test_data[['macd', 'signal']]
        validation_no_hist = macd_default.validate_data(data_no_hist)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ histogram: {validation_no_hist}")
        
        result_no_hist = macd_default.calculate(data_no_hist)
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –±–µ–∑ histogram, –∫–æ–ª–æ–Ω–∫–∏: {list(result_no_hist.data.columns)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ histogram: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:")
    try:
        macd_only = MACDPreloadedIndicator(required_columns=['macd'])
        validation_macd_only = macd_only.validate_data(test_data)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ MACD: {validation_macd_only}")
        
        result_macd_only = macd_only.calculate(test_data)
        print(f"‚úÖ –†–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ MACD, –∫–æ–ª–æ–Ω–∫–∏: {list(result_macd_only.data.columns)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_preloaded_migration()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏—è PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏—è PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
