#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è BQuant

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:
- –¢–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ –º–æ–¥—É–ª—è–º —á–µ—Ä–µ–∑ modules_config
- –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ exceptions
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –º–æ–¥—É–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

from bquant.core.logging_config import setup_logging
from bquant.core.nb import NotebookSimulator

def demo_basic_modules():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print(f"\n{'='*60}")
    print("üîß –ë–ê–ó–û–í–ê–Ø –ú–û–î–£–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
    print(f"{'='*60}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    setup_logging(
        modules_config={
            'bquant.data': {'console': 'WARNING', 'file': 'INFO'},
            'bquant.indicators': {'console': 'ERROR', 'file': 'DEBUG'},
            'bquant.analysis': {'console': 'INFO', 'file': 'DEBUG'}
        }
    )
    
    nb = NotebookSimulator("–î–µ–º–æ –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: data –º–æ–¥—É–ª–∏ - WARNING+, indicators - ERROR+, analysis - INFO+")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª–µ–π
    from bquant.data.loader import load_ohlcv_data
    from bquant.indicators.macd import calculate_macd
    from bquant.analysis.zones import find_support_resistance
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ data –º–æ–¥—É–ª—è (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ WARNING+)")
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.warning(f"Data –º–æ–¥—É–ª—å: {e}")
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ indicators –º–æ–¥—É–ª—è (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ERROR+)")
    try:
        import pandas as pd
        test_data = pd.DataFrame({'close': [100, 101, 102]})
        calculate_macd(test_data)
        nb.success("Indicators –º–æ–¥—É–ª—å: —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        nb.error(f"Indicators –º–æ–¥—É–ª—å: {e}")
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ analysis –º–æ–¥—É–ª—è (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å INFO+)")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_ohlcv = pd.DataFrame({
            'open': [100] * 50,
            'high': [101] * 50,
            'low': [99] * 50,
            'close': [100] * 50,
            'volume': [1000] * 50
        }, index=dates)
        
        find_support_resistance(test_ohlcv)
        nb.success("Analysis –º–æ–¥—É–ª—å: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.error(f"Analysis –º–æ–¥—É–ª—å: {e}")

def demo_profile_with_exceptions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
    print(f"\n{'='*60}")
    print("‚ö° –ü–†–û–§–ò–õ–¨ –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò")
    print(f"{'='*60}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º research –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    setup_logging(
        profile='research',
        exceptions={
            'bquant.data.loader': 'INFO',      # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            'bquant.analysis.zones': 'DEBUG',  # –û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–æ–Ω
            'bquant.core.nb': 'INFO'           # NotebookSimulator –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º
        }
    )
    
    nb = NotebookSimulator("–î–µ–º–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: research –ø—Ä–æ—Ñ–∏–ª—å + –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è loader –∏ zones")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    from bquant.data.loader import load_ohlcv_data
    from bquant.analysis.zones import find_support_resistance
    
    nb.step("Data loader —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å INFO+)")
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.warning(f"Loader —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
    
    nb.step("Analysis zones —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å DEBUG+)")
    try:
        import pandas as pd
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_ohlcv = pd.DataFrame({
            'open': [100] * 50,
            'high': [101] * 50,
            'low': [99] * 50,
            'close': [100] * 50,
            'volume': [1000] * 50
        }, index=dates)
        
        find_support_resistance(test_ohlcv)
        nb.success("Zones —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.error(f"Zones —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")

def demo_complex_modules():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print(f"\n{'='*60}")
    print("üéØ –°–õ–û–ñ–ù–ê–Ø –ú–û–î–£–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
    print(f"{'='*60}")
    
    # –°–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
    setup_logging(
        modules_config={
            'bquant.data.loader': {'console': 'DEBUG', 'file': 'DEBUG'},
            'bquant.data.processor': {'console': 'WARNING', 'file': 'INFO'},
            'bquant.data.validator': {'console': 'ERROR', 'file': 'WARNING'},
            'bquant.indicators.macd': {'console': 'INFO', 'file': 'DEBUG'},
            'bquant.indicators.rsi': {'console': 'WARNING', 'file': 'INFO'},
            'bquant.analysis.zones': {'console': 'DEBUG', 'file': 'DEBUG'},
            'bquant.analysis.candlestick': {'console': 'INFO', 'file': 'INFO'}
        }
    )
    
    nb = NotebookSimulator("–î–µ–º–æ —Å–ª–æ–∂–Ω–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: —Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–º–æ–¥—É–ª—è")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–º–æ–¥—É–ª–µ–π
    from bquant.data.loader import load_ohlcv_data
    from bquant.indicators.macd import calculate_macd
    from bquant.analysis.zones import find_support_resistance
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # Data loader - DEBUG (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.info(f"Loader DEBUG: {e}")
    
    # Indicators MACD - INFO (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    try:
        import pandas as pd
        test_data = pd.DataFrame({'close': [100, 101, 102]})
        calculate_macd(test_data)
        nb.success("MACD INFO: —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.info(f"MACD INFO: {e}")
    
    # Analysis zones - DEBUG (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    try:
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_ohlcv = pd.DataFrame({
            'open': [100] * 50,
            'high': [101] * 50,
            'low': [99] * 50,
            'close': [100] * 50,
            'volume': [1000] * 50
        }, index=dates)
        
        find_support_resistance(test_ohlcv)
        nb.success("Zones DEBUG: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.info(f"Zones DEBUG: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–î–£–õ–¨–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø BQUANT")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
    demo_basic_modules()
    demo_profile_with_exceptions()
    demo_complex_modules()
    
    print(f"\n{'='*60}")
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–î–£–õ–¨–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è!")
    print("üìö –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: docs/api/core/logging.md")

if __name__ == "__main__":
    main()
