#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LoggingConfigurator Fluent API BQuant

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Fluent API –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:
- –ë–∞–∑–æ–≤—ã–µ preset'—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
- –ú–æ–¥—É–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –º–µ—Ç–æ–¥–æ–≤
- –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
"""

from bquant.core.logging_config import LoggingConfigurator
from bquant.core.nb import NotebookSimulator

def demo_basic_presets():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö preset'–æ–≤"""
    print(f"\n{'='*60}")
    print("üéØ –ë–ê–ó–û–í–´–ï PRESET'–´")
    print(f"{'='*60}")
    
    # Notebook preset —Å research –ø—Ä–æ—Ñ–∏–ª–µ–º
    print("üì± Notebook preset —Å research –ø—Ä–æ—Ñ–∏–ª–µ–º:")
    configurator = LoggingConfigurator()
    configurator.preset('notebook', 'research').apply()
    
    nb = NotebookSimulator("–î–µ–º–æ notebook preset")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: notebook + research –ø—Ä–æ—Ñ–∏–ª—å")
    
    # Development preset —Å focused –ø—Ä–æ—Ñ–∏–ª–µ–º
    print("\nüîß Development preset —Å focused –ø—Ä–æ—Ñ–∏–ª–µ–º:")
    configurator = LoggingConfigurator()
    configurator.preset('development', 'focused').apply()
    
    nb = NotebookSimulator("–î–µ–º–æ development preset")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: development + focused –ø—Ä–æ—Ñ–∏–ª—å")
    
    # Production preset —Å critical –ø—Ä–æ—Ñ–∏–ª–µ–º
    print("\nüöÄ Production preset —Å critical –ø—Ä–æ—Ñ–∏–ª–µ–º:")
    configurator = LoggingConfigurator()
    configurator.preset('production', 'critical').apply()
    
    nb = NotebookSimulator("–î–µ–º–æ production preset")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: production + critical –ø—Ä–æ—Ñ–∏–ª—å")

def demo_module_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print("üîß –ú–û–î–£–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
    print(f"{'='*60}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    print("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –º–µ—Ç–æ–¥–æ–≤:")
    configurator = (
        LoggingConfigurator()
            .preset('development', 'focused')           # –ë–∞–∑–æ–≤—ã–π preset
            .module('bquant.data')                     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ data –º–æ–¥—É–ª—è
                .console('WARNING')                    # WARNING+ –≤ –∫–æ–Ω—Å–æ–ª—å
                .file('DEBUG')                         # DEBUG+ –≤ —Ñ–∞–π–ª
            .module('bquant.indicators')               # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ indicators
                .console('ERROR')                      # ERROR+ –≤ –∫–æ–Ω—Å–æ–ª—å
                .file('INFO')                          # INFO+ –≤ —Ñ–∞–π–ª
            .apply()                                   # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    )
    
    nb = NotebookSimulator("–î–µ–º–æ –º–æ–¥—É–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: data –º–æ–¥—É–ª–∏ - WARNING+, indicators - ERROR+")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    from bquant.data.loader import load_ohlcv_data
    from bquant.indicators.macd import calculate_macd
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ data –º–æ–¥—É–ª—è (WARNING+)")
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.warning(f"Data –º–æ–¥—É–ª—å: {e}")
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ indicators –º–æ–¥—É–ª—è (ERROR+)")
    try:
        import pandas as pd
        test_data = pd.DataFrame({'close': [100, 101, 102]})
        calculate_macd(test_data)
        nb.success("Indicators –º–æ–¥—É–ª—å: —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        nb.error(f"Indicators –º–æ–¥—É–ª—å: {e}")

def demo_exceptions_and_overrides():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
    print(f"\n{'='*60}")
    print("‚ö° –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø")
    print(f"{'='*60}")
    
    # –°–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    print("üé≠ –°–ª–æ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:")
    configurator = (
        LoggingConfigurator()
            .preset('notebook', 'research')            # –ë–∞–∑–æ–≤—ã–π preset
            .module('bquant.analysis')                 # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ analysis
                .console('DEBUG')                      # DEBUG+ –≤ –∫–æ–Ω—Å–æ–ª—å
                .file('DEBUG')                         # DEBUG+ –≤ —Ñ–∞–π–ª
            .exception('bquant.data.loader', 'INFO')   # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è loader
            .exception('bquant.core.nb', 'INFO')       # NotebookSimulator –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º
            .apply()                                   # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    )
    
    nb = NotebookSimulator("–î–µ–º–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: research –ø—Ä–æ—Ñ–∏–ª—å + analysis DEBUG + loader INFO")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    from bquant.data.loader import load_ohlcv_data
    from bquant.analysis.zones import find_support_resistance
    
    nb.step("Data loader —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º (INFO+)")
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.info(f"Loader —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
    
    nb.step("Analysis zones —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (DEBUG+)")
    try:
        import pandas as pd
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_ohlcv = pd.DataFrame({
            'open': [100] * 50,
            'high': [101] * 50,
            'low': [99] * 50,
            'close': [100] * 50,
            'volume': [1000] * 50
        }, index=dates)
        
        find_support_resistance(test_ohlcv)
        nb.success("Zones —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.info(f"Zones —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º: {e}")

def demo_advanced_patterns():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print(f"\n{'='*60}")
    print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ï –ü–ê–¢–¢–ï–†–ù–´")
    print(f"{'='*60}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω "—Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
    print("üé® –ü–∞—Ç—Ç–µ—Ä–Ω '—Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤':")
    configurator = (
        LoggingConfigurator()
            .preset('development', 'clean')             # –ë–∞–∑–æ–≤—ã–π preset
            .module('bquant.core')                     # Core –º–æ–¥—É–ª–∏ - –¥–µ—Ç–∞–ª—å–Ω–æ
                .console('DEBUG')
                .file('DEBUG')
            .module('bquant.data')                     # Data –º–æ–¥—É–ª–∏ - —Ç–∏—Ö–æ
                .console('ERROR')
                .file('WARNING')
            .module('bquant.indicators')               # Indicators - —Å—Ä–µ–¥–Ω–µ
                .console('WARNING')
                .file('INFO')
            .module('bquant.analysis')                 # Analysis - –¥–µ—Ç–∞–ª—å–Ω–æ
                .console('INFO')
                .file('DEBUG')
            .exception('bquant.data.loader', 'WARNING') # Loader - –Ω–µ–º–Ω–æ–≥–æ –≥—Ä–æ–º—á–µ
            .apply()
    )
    
    nb = NotebookSimulator("–î–µ–º–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    nb.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞: –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥—É–ª–µ–π")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    from bquant.data.loader import load_ohlcv_data
    from bquant.indicators.macd import calculate_macd
    from bquant.analysis.zones import find_support_resistance
    
    nb.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # Data loader - ERROR (—Ç–∏—Ö–æ)
    try:
        load_ohlcv_data('test.csv', 'XAUUSD', '1h')
    except Exception as e:
        nb.error(f"Data loader ERROR: {e}")
    
    # Indicators MACD - WARNING (—Å—Ä–µ–¥–Ω–µ)
    try:
        import pandas as pd
        test_data = pd.DataFrame({'close': [100, 101, 102]})
        calculate_macd(test_data)
        nb.success("MACD WARNING: —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.warning(f"MACD WARNING: {e}")
    
    # Analysis zones - INFO (–¥–µ—Ç–∞–ª—å–Ω–æ)
    try:
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_ohlcv = pd.DataFrame({
            'open': [100] * 50,
            'high': [101] * 50,
            'low': [99] * 50,
            'close': [100] * 50,
            'volume': [1000] * 50
        }, index=dates)
        
        find_support_resistance(test_ohlcv)
        nb.success("Zones INFO: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        nb.info(f"Zones INFO: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LOGGINGCONFIGURATOR FLUENT API BQUANT")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    demo_basic_presets()
    demo_module_configuration()
    demo_exceptions_and_overrides()
    demo_advanced_patterns()
    
    print(f"\n{'='*60}")
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø FLUENT API –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –º–µ—Ç–æ–¥–æ–≤!")
    print("üìö –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: docs/api/core/logging.md")

if __name__ == "__main__":
    main()
