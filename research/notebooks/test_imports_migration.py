"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ - –≠—Ç–∞–ø 7

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è indicators.
"""

def test_imports_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ - –≠—Ç–∞–ø 7")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤:")
    try:
        from bquant.indicators import (
            IndicatorSource,
            IndicatorConfig,
            IndicatorResult,
            BaseIndicator,
            PreloadedIndicator,
            CustomIndicator,
            LibraryIndicator,
            IndicatorFactory
        )
        print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
        print(f"   IndicatorSource: {IndicatorSource}")
        print(f"   BaseIndicator: {BaseIndicator}")
        print(f"   IndicatorFactory: {IndicatorFactory}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        from bquant.indicators import MACDPreloadedIndicator
        print("‚úÖ MACDPreloadedIndicator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ö–ª–∞—Å—Å: {MACDPreloadedIndicator}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        from bquant.indicators import (
            SimpleMovingAverage,
            ExponentialMovingAverage,
            RelativeStrengthIndex,
            MACD,
            BollingerBands
        )
        print("‚úÖ –í—Å–µ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
        print(f"   SimpleMovingAverage: {SimpleMovingAverage}")
        print(f"   ExponentialMovingAverage: {ExponentialMovingAverage}")
        print(f"   RelativeStrengthIndex: {RelativeStrengthIndex}")
        print(f"   MACD: {MACD}")
        print(f"   BollingerBands: {BollingerBands}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ LIBRARY –º–æ–¥—É–ª–µ–π
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ LIBRARY –º–æ–¥—É–ª–µ–π:")
    try:
        from bquant.indicators import (
            PandasTALoader,
            TALibLoader,
            LibraryManager,
            load_pandas_ta,
            load_talib,
            load_all_indicators
        )
        print("‚úÖ –í—Å–µ LIBRARY –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
        print(f"   PandasTALoader: {PandasTALoader}")
        print(f"   TALibLoader: {TALibLoader}")
        print(f"   LibraryManager: {LibraryManager}")
        print(f"   load_pandas_ta: {load_pandas_ta}")
        print(f"   load_talib: {load_talib}")
        print(f"   load_all_indicators: {load_all_indicators}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ LIBRARY –º–æ–¥—É–ª–µ–π: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        from bquant.indicators import IndicatorFactory
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        all_indicators = IndicatorFactory.list_indicators()
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(all_indicators)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        expected_indicators = ['sma', 'ema', 'rsi', 'macd', 'bbands', 'macd_preloaded']
        for indicator in expected_indicators:
            if indicator in all_indicators:
                print(f"   ‚úÖ {indicator} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"   ‚ùå {indicator} –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        preloaded_count = len(IndicatorFactory.get_indicators_by_source('preloaded'))
        custom_count = len(IndicatorFactory.get_indicators_by_source('custom'))
        library_count = len(IndicatorFactory.get_indicators_by_source('library'))
        
        print(f"   PRELOADED: {preloaded_count}")
        print(f"   CUSTOM: {custom_count}")
        print(f"   LIBRARY: {library_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ IndicatorFactory
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ IndicatorFactory:")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import pandas as pd
        import numpy as np
        
        dates = pd.date_range('2024-01-01', periods=50, freq='D')
        test_data = pd.DataFrame({
            'close': 100 + np.random.randn(50).cumsum(),
            'macd': np.random.randn(50).cumsum(),
            'signal': np.random.randn(50).cumsum()
        }, index=dates)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        macd_preloaded = IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal'])
        print(f"‚úÖ PRELOADED MACD —Å–æ–∑–¥–∞–Ω: {type(macd_preloaded).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        sma_custom = IndicatorFactory.create('custom', 'sma', period=20)
        print(f"‚úÖ CUSTOM SMA —Å–æ–∑–¥–∞–Ω: {type(sma_custom).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        result_preloaded = macd_preloaded.calculate(test_data)
        result_custom = sma_custom.calculate(test_data)
        
        print(f"   PRELOADED —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_preloaded.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"   CUSTOM —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_custom.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 7. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π:")
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ preloaded
        from bquant.indicators.preloaded.macd import MACDPreloadedIndicator as MACDPreloadedDirect
        print("‚úÖ –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∏–∑ preloaded.macd —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ custom
        from bquant.indicators.custom.sma import SimpleMovingAverage as SMADirect
        print("‚úÖ –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∏–∑ custom.sma —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ library
        from bquant.indicators.library.manager import LibraryManager as LibraryManagerDirect
        print("‚úÖ –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∏–∑ library.manager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


if __name__ == "__main__":
    success = test_imports_migration()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
