"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º - –≠—Ç–∞–ø 8

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º:
- –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
"""

import pandas as pd
import numpy as np

def test_compatibility_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º - –≠—Ç–∞–ø 8")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100),
        'macd': np.random.randn(100).cumsum(),
        'signal': np.random.randn(100).cumsum()
    }, index=dates)
    
    # 1. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    if not test_import_compatibility():
        return False
    
    # 2. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤:")
    if not test_method_compatibility(test_data):
        return False
    
    # 3. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    if not test_result_compatibility(test_data):
        return False
    
    # 4. –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    if not test_backward_compatibility(test_data):
        return False
    
    print("\n" + "=" * 70)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_import_compatibility() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤."""
    
    try:
        print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("      –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã:")
        
        # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        from bquant.indicators import BaseIndicator, IndicatorFactory
        print(f"        ‚úÖ BaseIndicator: {BaseIndicator}")
        print(f"        ‚úÖ IndicatorFactory: {IndicatorFactory}")
        
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        from bquant.indicators import SimpleMovingAverage, ExponentialMovingAverage
        print(f"        ‚úÖ SimpleMovingAverage: {SimpleMovingAverage}")
        print(f"        ‚úÖ ExponentialMovingAverage: {ExponentialMovingAverage}")
        
        # –ò–º–ø–æ—Ä—Ç PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        from bquant.indicators import MACDPreloadedIndicator
        print(f"        ‚úÖ MACDPreloadedIndicator: {MACDPreloadedIndicator}")
        
        # –ò–º–ø–æ—Ä—Ç LIBRARY –º–æ–¥—É–ª–µ–π
        from bquant.indicators import LibraryManager, load_pandas_ta, load_talib
        print(f"        ‚úÖ LibraryManager: {LibraryManager}")
        print(f"        ‚úÖ load_pandas_ta: {load_pandas_ta}")
        print(f"        ‚úÖ load_talib: {load_talib}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("      –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π:")
        
        from bquant.indicators.custom.sma import SimpleMovingAverage as SMADirect
        from bquant.indicators.custom.ema import ExponentialMovingAverage as EMADirect
        from bquant.indicators.preloaded.macd import MACDPreloadedIndicator as MACDDirect
        
        print(f"        ‚úÖ SMADirect: {SMADirect}")
        print(f"        ‚úÖ EMADirect: {EMADirect}")
        print(f"        ‚úÖ MACDDirect: {MACDDirect}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False


def test_method_compatibility(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ create_indicator (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
        print("      –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ create_indicator:")
        
        try:
            old_sma = IndicatorFactory.create_indicator('sma', period=20)
            print(f"        ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {type(old_sma).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            assert hasattr(old_sma, 'calculate'), "–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º calculate"
            assert hasattr(old_sma, 'validate_data'), "–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º validate_data"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
            result = old_sma.calculate(test_data)
            print(f"        ‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
        except Exception as e:
            print(f"        ‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ create (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("      –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ create:")
        
        try:
            new_sma = IndicatorFactory.create('custom', 'sma', period=20)
            print(f"        ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {type(new_sma).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            assert hasattr(new_sma, 'calculate'), "–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º calculate"
            assert hasattr(new_sma, 'validate_data'), "–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º validate_data"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
            result = new_sma.calculate(test_data)
            print(f"        ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
        except Exception as e:
            print(f"        ‚ùå –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False


def test_result_compatibility(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º
        old_sma = IndicatorFactory.create_indicator('sma', period=20)
        new_sma = IndicatorFactory.create('custom', 'sma', period=20)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        old_result = old_sma.calculate(test_data)
        new_result = new_sma.calculate(test_data)
        
        print("      –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"        ‚úÖ –°—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(old_result).__name__}")
        print(f"        ‚úÖ –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(new_result).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        required_attrs = ['data', 'config', 'metadata']
        for attr in required_attrs:
            assert hasattr(old_result, attr), f"–°—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç {attr}"
            assert hasattr(new_result, attr), f"–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç {attr}"
            print(f"        ‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr}: –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã—Ö
        assert old_result.data.shape == new_result.data.shape, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ñ–æ—Ä–º—É"
        print(f"        ‚úÖ –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {old_result.data.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        assert list(old_result.data.columns) == list(new_result.data.columns), "–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print(f"        ‚úÖ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {list(old_result.data.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        assert len(old_result.data) > 0, "–°—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert len(new_result.data) > 0, "–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        print(f"        ‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ: {len(old_result.data)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç NaN –≤ –Ω–∞—á–∞–ª–µ (–≥–¥–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω)
        # –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å NaN –∏–∑-–∑–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å—á–µ—Ç–∞
        valid_old = old_result.data.dropna()
        valid_new = new_result.data.dropna()
        
        assert len(valid_old) > 0, "–í —Å—Ç–∞—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        assert len(valid_new) > 0, "–í –Ω–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        print(f"        ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(valid_old)} —Å—Ç—Ä–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False


def test_backward_compatibility(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        print("      –°—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã:")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = {
            'sma_20': IndicatorFactory.create_indicator('sma', period=20),
            'ema_20': IndicatorFactory.create_indicator('ema', period=20),
            'rsi_14': IndicatorFactory.create_indicator('rsi', period=14),
            'macd': IndicatorFactory.create_indicator('macd', fast=12, slow=26, signal=9),
            'bbands': IndicatorFactory.create_indicator('bbands', period=20, std=2.0),
        }
        
        print(f"        ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        for name, indicator in indicators.items():
            print(f"      {name}: {type(indicator).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            is_valid = indicator.validate_data(test_data)
            print(f"        ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç
            result = indicator.calculate(test_data)
            print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = indicator.get_statistics(test_data)
            print(f"        ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert hasattr(result, 'data'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç data"
            assert hasattr(result, 'config'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç config"
            assert hasattr(result, 'metadata'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç metadata"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        print("      –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º list_indicators
        all_indicators = IndicatorFactory.list_indicators()
        print(f"        ‚úÖ list_indicators: {len(all_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º get_indicator_info
        if 'sma' in all_indicators:
            info = IndicatorFactory.get_indicator_info('sma')
            print(f"        ‚úÖ get_indicator_info: {info['source']} - {info['class']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False


if __name__ == "__main__":
    success = test_compatibility_validation()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
