[LOG] Log started: 2025-09-02 12:45:10
[OUTPUT] Output will be written to: research\notebooks\01_data_processor_log.txt
[>>] Starting Демонстрация работы модуля bquant.data.processor
====================================================================
[SCRIPT] Демонстрация работы модуля bquant.data.processor
[DATE] Started: 2025-09-02 12:45:10
====================================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных и создание проблемных данных
--------------------------------------------------------------------
[INFO] Для демонстрации обработки данных используем встроенные sample-данные и создадим проблемные данные.
[INFO] 1.1. Загружаем корректные sample-данные:
Колонка 'time' преобразована в DatetimeIndex
Загружено 1000 строк корректных данных
Структура: ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label']
Тип индекса: <class 'pandas.core.indexes.datetimes.DatetimeIndex'>
Диапазон дат: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
[OK] Loading sample data completed successfully
[INFO] 1.2. Создаем проблемные данные для демонстрации обработки:
Создано 1010 строк проблемных данных
Добавлены проблемы: дубликаты, пропуски, логические ошибки, выбросы, отрицательные цены
[OK] Creating problematic data completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 2: Шаг 2: Очистка OHLCV данных
-----------------------------------
[INFO] Функция clean_ohlcv_data() - это основная функция очистки, которая обрабатывает все проблемы в данных.
[INFO] 2.1. Очистка проблемных данных:
Результат очистки:
  - Исходная форма: (1010, 14)
  - Очищенная форма: (995, 14)
  - Удалено строк: 15
  - Осталось невалидных OHLC: 0
  - Осталось пропусков: 3980
[OK] Cleaning problematic data completed successfully
[INFO] 2.2. Тестирование различных методов заполнения пропусков:
Результаты различных методов заполнения:
  - Forward fill: 0 пропусков осталось
  - Backward fill: 0 пропусков осталось
  - Interpolate: 0 пропусков осталось
[OK] Testing different fill methods completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 3: Шаг 3: Удаление выбросов
--------------------------------
[INFO] Функция remove_price_outliers() позволяет удалять выбросы различными методами.
[INFO] 3.1. Создаем данные с выбросами:
Добавлено выбросов: 5 в close, 5 в high, 5 в low
[OK] Creating data with outliers completed successfully
[INFO] 3.2. Удаление выбросов методом z-score (threshold=3.0):
Результат удаления выбросов (z-score):
  - Исходная форма: (1000, 14)
  - После удаления: (985, 14)
  - Удалено строк: 15
[OK] Removing outliers with z-score method completed successfully
[INFO] 3.3. Удаление выбросов методом IQR:
Результат удаления выбросов (IQR):
  - Исходная форма: (1000, 14)
  - После удаления: (982, 14)
  - Удалено строк: 18
[OK] Removing outliers with IQR method completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 4: Шаг 4: Расчет производных индикаторов
---------------------------------------------
[INFO] Функция calculate_derived_indicators() добавляет базовые технические индикаторы к данным.
[INFO] 4.1. Расчет производных индикаторов:
Результат расчета индикаторов:
  - Исходные колонки: 14
  - Новые колонки: 24
  - Добавлено индикаторов: 10
  - Новые колонки: ['hl_avg', 'ohlc_avg', 'typical_price', 'true_range', 'price_change', 'price_change_pct', 'gap', 'gap_pct', 'volume_sma_20', 'volume_ratio']
Примеры значений новых индикаторов:
                              hl_avg  ohlc_avg  typical_price  true_range  price_change  price_change_pct   gap   gap_pct  volume_sma_20  volume_ratio
time                                                                                                                                                  
2025-06-11 20:00:00+07:00  3336.3600  3334.915    3334.240000      16.820           NaN               NaN   NaN       NaN            NaN           NaN
2025-06-11 21:00:00+07:00  3334.9425  3334.375    3335.840000      12.735         7.635          0.002293 -0.02 -0.000006            NaN           NaN
2025-06-11 22:00:00+07:00  3336.2925  3335.880    3335.268333      13.275        -4.415         -0.001323  0.08  0.000024            NaN           NaN
[OK] Calculating derived indicators completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 5: Шаг 5: Ресемплинг данных
--------------------------------
[INFO] Функция resample_ohlcv() позволяет изменять таймфрейм данных.
[INFO] 5.1. Ресемплинг данных с 1H на 4H:
Результат ресемплинга:
  - Исходная форма (1H): (1000, 14)
  - Новая форма (4H): (262, 5)
  - Сжатие: 3.8x
Примеры 4H данных:
                               open      high      low     close    volume
time                                                                      
2025-06-11 20:00:00+07:00  3336.940  3344.770  3327.95  3330.390  130867.0
2025-06-12 00:00:00+07:00  3330.410  3355.610  3319.38  3355.250   72031.0
2025-06-12 04:00:00+07:00  3357.905  3373.645  3356.30  3366.035   53656.0
[OK] Resampling to 4H timeframe completed successfully
[INFO] 5.2. Ресемплинг данных с 1H на 1D:
Результат ресемплинга на дневной таймфрейм:
  - Исходная форма (1H): (1000, 14)
  - Новая форма (1D): (53, 5)
  - Сжатие: 18.9x
Примеры дневных данных:
                               open     high       low    close    volume
time                                                                     
2025-06-11 00:00:00+07:00  3336.940  3344.77  3327.950  3330.39  130867.0
2025-06-12 00:00:00+07:00  3330.410  3399.05  3319.380  3383.83  553257.0
2025-06-13 00:00:00+07:00  3383.825  3446.88  3378.165  3430.15  559540.0
[OK] Resampling to daily timeframe completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 6: Шаг 6: Нормализация цен
-------------------------------
[INFO] Функция normalize_prices() предоставляет различные методы нормализации цен.
[INFO] 6.1. Нормализация цен к первому значению (база = 100):
Результат нормализации к первому значению:
  - Исходные колонки: 14
  - Новые колонки: 18
  - Колонки нормализации: ['open_normalized', 'high_normalized', 'low_normalized', 'close_normalized']
Примеры нормализованных цен (первые 3 строки):
                           open_normalized  high_normalized  low_normalized  close_normalized
time                                                                                         
2025-06-11 20:00:00+07:00       100.208408       100.443544       99.938438        100.000000
2025-06-11 21:00:00+07:00        99.999399       100.339640       99.957207        100.229279
2025-06-11 22:00:00+07:00       100.231682       100.388288       99.989640        100.096697
[OK] Normalizing prices to first value completed successfully
[INFO] 6.2. Нормализация цен процентными изменениями:
Результат нормализации процентными изменениями:
  - Исходные колонки: 14
  - Новые колонки: 18
  - Колонки процентных изменений: ['open_pct_change', 'high_pct_change', 'low_pct_change', 'close_pct_change']
Примеры процентных изменений (первые 3 строки):
                           open_pct_change  high_pct_change  low_pct_change  close_pct_change
time                                                                                         
2025-06-11 20:00:00+07:00              NaN              NaN             NaN               NaN
2025-06-11 21:00:00+07:00        -0.208574        -0.103445        0.018780          0.229279
2025-06-11 22:00:00+07:00         0.232284         0.048484        0.032446         -0.132279
[OK] Normalizing prices with percentage changes completed successfully
[INFO] 6.3. Z-score нормализация цен:
Результат Z-score нормализации:
  - Исходные колонки: 14
  - Новые колонки: 18
  - Колонки Z-score: ['open_zscore', 'high_zscore', 'low_zscore', 'close_zscore']
Примеры Z-score нормализации (первые 3 строки):
                           open_zscore  high_zscore  low_zscore  close_zscore
time                                                                         
2025-06-11 20:00:00+07:00    -0.386008    -0.285649   -0.515578     -0.580089
2025-06-11 21:00:00+07:00    -0.581284    -0.382507   -0.497908     -0.365537
2025-06-11 22:00:00+07:00    -0.364264    -0.337157   -0.467375     -0.489603
[OK] Normalizing prices with z-score completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 7: Шаг 7: Детекция рыночных сессий
---------------------------------------
[INFO] Функция detect_market_sessions() определяет и маркирует рыночные сессии в данных.
[INFO] 7.1. Детекция рыночных сессий:
Результат детекции сессий:
  - Исходные колонки: 14
  - Новые колонки: 16
  - Колонки сессий: ['session', 'london_ny_overlap']
Распределение сессий:
  - asian: 351 (35.1%)
  - new_york: 346 (34.6%)
  - london: 215 (21.5%)
  - none: 88 (8.8%)
Примеры данных с сессиями (первые 5 строк):
                               open      high       low     close   session
time                                                                       
2025-06-11 13:00:00+00:00  3336.940  3344.770  3327.950  3330.000  new_york
2025-06-11 14:00:00+00:00  3329.980  3341.310  3328.575  3337.635  new_york
2025-06-11 15:00:00+00:00  3337.715  3342.930  3329.655  3333.220  new_york
2025-06-11 16:00:00+00:00  3333.265  3334.570  3328.185  3330.390  new_york
2025-06-11 17:00:00+00:00  3330.410  3331.435  3319.380  3324.365  new_york
[OK] Detecting market sessions completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 8: Шаг 8: Добавление технических признаков
-----------------------------------------------
[INFO] Функция add_technical_features() добавляет комплексные технические признаки для анализа.
[INFO] 8.1. Добавление технических признаков:
Результат добавления технических признаков:
  - Исходные колонки: 14
  - Новые колонки: 31
  - Добавлено признаков: 17
  - Новые признаки: ['body_size', 'body_size_pct', 'upper_shadow', 'lower_shadow', 'true_range', 'price_change', 'price_change_abs', 'price_ma_20', 'price_ma_50', 'price_std_20', 'price_position', 'roc_5', 'roc_10', 'volume_ma_20', 'volume_ratio', 'volume_std_20', 'volume_price_trend']
Группировка признаков по типам:
  - Ценовые признаки: 7
  - Объемные признаки: 4
  - Скользящие средние: 3
  - Моментум: 2
Примеры технических признаков (первые 3 строки):
                           body_size  body_size_pct  upper_shadow  volume_ma_20  volume_ratio  price_ma_20  price_ma_50
time                                                                                                                   
2025-06-11 20:00:00+07:00     -6.940      -0.002080         7.830           NaN           NaN          NaN          NaN
2025-06-11 21:00:00+07:00      7.655       0.002299         3.675           NaN           NaN          NaN          NaN
2025-06-11 22:00:00+07:00     -4.495      -0.001347         5.215           NaN           NaN          NaN          NaN
[OK] Adding technical features completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 9: Шаг 9: Создание лаговых признаков
-----------------------------------------
[INFO] Функция create_lagged_features() создает лаговые признаки для временного анализа.
[INFO] 9.1. Создание лаговых признаков:
Результат создания лаговых признаков:
  - Исходные колонки: 14
  - Новые колонки: 24
  - Добавлено лагов: 10
  - Колонки для лагов: ['close', 'volume']
  - Периоды лагов: [1, 2, 3, 5, 10]
  - Новые лаговые колонки: ['close_lag_1', 'close_lag_2', 'close_lag_3', 'close_lag_5', 'close_lag_10', 'volume_lag_1', 'volume_lag_2', 'volume_lag_3', 'volume_lag_5', 'volume_lag_10']
Примеры лаговых признаков (первые 5 строк):
                           close_lag_1  close_lag_2  close_lag_3
time                                                            
2025-06-11 20:00:00+07:00          NaN          NaN          NaN
2025-06-11 21:00:00+07:00     3330.000          NaN          NaN
2025-06-11 22:00:00+07:00     3337.635     3330.000          NaN
2025-06-11 23:00:00+07:00     3333.220     3337.635     3330.000
2025-06-12 00:00:00+07:00     3330.390     3333.220     3337.635
[OK] Creating lagged features completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 10: Шаг 10: Комплексная подготовка данных для анализа
----------------------------------------------------------
[INFO] Функция prepare_data_for_analysis() - это комплексная функция, которая объединяет все этапы подготовки.
[INFO] 10.1. Комплексная подготовка данных для анализа:
Результат комплексной подготовки:
  - Исходная форма: (1000, 14)
  - Подготовленная форма: (0, 139)
  - Исходные колонки: 14
  - Финальные колонки: 139
  - Добавлено признаков: 125
Структура подготовленных данных:
  - Числовые колонки: 135
  - Нечисловые колонки: 4
  - Пропущенные значения: 0
Финальные колонки для анализа:
  - ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label', 'body_size', 'body_size_pct', 'upper_shadow', 'lower_shadow', 'true_range', 'price_change', 'price_change_abs', 'price_ma_20', 'price_ma_50', 'price_std_20', 'price_position', 'roc_5', 'roc_10', 'volume_ma_20', 'volume_ratio', 'volume_std_20', 'volume_price_trend', 'open_lag_1', 'open_lag_2', 'open_lag_3', 'open_lag_5', 'high_lag_1', 'high_lag_2', 'high_lag_3', 'high_lag_5', 'low_lag_1', 'low_lag_2', 'low_lag_3', 'low_lag_5', 'volume_lag_1', 'volume_lag_2', 'volume_lag_3', 'volume_lag_5', 'accumulation_distribution_lag_1', 'accumulation_distribution_lag_2', 'accumulation_distribution_lag_3', 'accumulation_distribution_lag_5', 'macd_lag_1', 'macd_lag_2', 'macd_lag_3', 'macd_lag_5', 'signal_lag_1', 'signal_lag_2', 'signal_lag_3', 'signal_lag_5', 'rsi_lag_1', 'rsi_lag_2', 'rsi_lag_3', 'rsi_lag_5', 'rsi_based_ma_lag_1', 'rsi_based_ma_lag_2', 'rsi_based_ma_lag_3', 'rsi_based_ma_lag_5', 'body_size_lag_1', 'body_size_lag_2', 'body_size_lag_3', 'body_size_lag_5', 'body_size_pct_lag_1', 'body_size_pct_lag_2', 'body_size_pct_lag_3', 'body_size_pct_lag_5', 'upper_shadow_lag_1', 'upper_shadow_lag_2', 'upper_shadow_lag_3', 'upper_shadow_lag_5', 'lower_shadow_lag_1', 'lower_shadow_lag_2', 'lower_shadow_lag_3', 'lower_shadow_lag_5', 'true_range_lag_1', 'true_range_lag_2', 'true_range_lag_3', 'true_range_lag_5', 'price_change_lag_1', 'price_change_lag_2', 'price_change_lag_3', 'price_change_lag_5', 'price_change_abs_lag_1', 'price_change_abs_lag_2', 'price_change_abs_lag_3', 'price_change_abs_lag_5', 'price_ma_20_lag_1', 'price_ma_20_lag_2', 'price_ma_20_lag_3', 'price_ma_20_lag_5', 'price_ma_50_lag_1', 'price_ma_50_lag_2', 'price_ma_50_lag_3', 'price_ma_50_lag_5', 'price_std_20_lag_1', 'price_std_20_lag_2', 'price_std_20_lag_3', 'price_std_20_lag_5', 'price_position_lag_1', 'price_position_lag_2', 'price_position_lag_3', 'price_position_lag_5', 'roc_5_lag_1', 'roc_5_lag_2', 'roc_5_lag_3', 'roc_5_lag_5', 'roc_10_lag_1', 'roc_10_lag_2', 'roc_10_lag_3', 'roc_10_lag_5', 'volume_ma_20_lag_1', 'volume_ma_20_lag_2', 'volume_ma_20_lag_3', 'volume_ma_20_lag_5', 'volume_ratio_lag_1', 'volume_ratio_lag_2', 'volume_ratio_lag_3', 'volume_ratio_lag_5', 'volume_std_20_lag_1', 'volume_std_20_lag_2', 'volume_std_20_lag_3', 'volume_std_20_lag_5', 'volume_price_trend_lag_1', 'volume_price_trend_lag_2', 'volume_price_trend_lag_3', 'volume_price_trend_lag_5', 'open_zscore', 'high_zscore', 'low_zscore', 'close_zscore']
[OK] Preparing data for analysis completed successfully
[INFO] 10.2. Тестирование различных конфигураций подготовки:
Сравнение различных конфигураций:
  - Только тех. признаки: 31 колонок
  - Только нормализация: 18 колонок
  - Полная подготовка: 139 колонок
[OK] Testing different preparation configurations completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 11: Заключение
------------------------------
[INFO] Мы протестировали все основные функции модуля bquant.data.processor:
✅ clean_ohlcv_data() - очистка и валидация OHLCV данных
✅ remove_price_outliers() - удаление выбросов различными методами
✅ calculate_derived_indicators() - расчет базовых технических индикаторов
✅ resample_ohlcv() - изменение таймфрейма данных
✅ normalize_prices() - нормализация цен различными методами
✅ detect_market_sessions() - детекция рыночных сессий
✅ add_technical_features() - добавление комплексных технических признаков
✅ create_lagged_features() - создание лаговых признаков
✅ prepare_data_for_analysis() - комплексная подготовка данных
[INFO] Модуль processor успешно продемонстрировал:
🔧 Очистку проблемных данных (пропуски, выбросы, логические ошибки)
🔧 Создание технических индикаторов и признаков
🔧 Изменение временных масштабов данных
🔧 Нормализацию и стандартизацию данных
🔧 Комплексную подготовку для машинного обучения
[INFO] Это демонстрирует мощь системы обработки данных BQuant для подготовки качественных данных для анализа.

[END] Script finished successfully!
[END] Log ended: 2025-09-02 12:51:13
[TIME] Duration: 0:06:03.575569
