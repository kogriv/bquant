"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ IndicatorFactory - –≠—Ç–∞–ø 6

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ –µ–¥–∏–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ create() –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
"""

import pandas as pd
import numpy as np
from bquant.indicators import IndicatorFactory

def test_indicator_factory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ IndicatorFactory."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ IndicatorFactory")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100),
        'macd': np.random.randn(100).cumsum(),
        'signal': np.random.randn(100).cumsum()
    }, index=dates)
    
    # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        # –°–æ–∑–¥–∞–µ–º MACD PRELOADED
        macd_preloaded = IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal'])
        print(f"‚úÖ MACD PRELOADED —Å–æ–∑–¥–∞–Ω: {type(macd_preloaded).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
        result = macd_preloaded.calculate(test_data)
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(result.data.columns)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PRELOADED: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        # –°–æ–∑–¥–∞–µ–º SMA CUSTOM
        sma_custom = IndicatorFactory.create('custom', 'sma', period=20)
        print(f"‚úÖ SMA CUSTOM —Å–æ–∑–¥–∞–Ω: {type(sma_custom).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
        result = sma_custom.calculate(test_data)
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(result.data.columns)}")
        
        # –°–æ–∑–¥–∞–µ–º EMA CUSTOM
        ema_custom = IndicatorFactory.create('custom', 'ema', period=20)
        print(f"‚úÖ EMA CUSTOM —Å–æ–∑–¥–∞–Ω: {type(ema_custom).__name__}")
        
        # –°–æ–∑–¥–∞–µ–º RSI CUSTOM
        rsi_custom = IndicatorFactory.create('custom', 'rsi', period=14)
        print(f"‚úÖ RSI CUSTOM —Å–æ–∑–¥–∞–Ω: {type(rsi_custom).__name__}")
        
        # –°–æ–∑–¥–∞–µ–º MACD CUSTOM
        macd_custom = IndicatorFactory.create('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
        print(f"‚úÖ MACD CUSTOM —Å–æ–∑–¥–∞–Ω: {type(macd_custom).__name__}")
        
        # –°–æ–∑–¥–∞–µ–º Bollinger Bands CUSTOM
        bb_custom = IndicatorFactory.create('custom', 'bbands', period=20, std_dev=2.0)
        print(f"‚úÖ Bollinger Bands CUSTOM —Å–æ–∑–¥–∞–Ω: {type(bb_custom).__name__}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CUSTOM: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å pandas-ta –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            sma_pandas_ta = IndicatorFactory.create('pandas_ta', 'sma', length=20)
            print(f"‚úÖ pandas-ta SMA —Å–æ–∑–¥–∞–Ω: {type(sma_pandas_ta).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
            result = sma_pandas_ta.calculate(test_data)
            print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(result.data.columns)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è pandas-ta SMA –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å TA-Lib –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            sma_talib = IndicatorFactory.create('talib', 'sma', timeperiod=20)
            print(f"‚úÖ TA-Lib SMA —Å–æ–∑–¥–∞–Ω: {type(sma_talib).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
            result = sma_talib.calculate(test_data)
            print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(result.data.columns)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è TA-Lib SMA –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LIBRARY: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    try:
        # –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        indicators = [
            macd_preloaded,
            sma_custom,
            ema_custom
        ]
        
        for i, indicator in enumerate(indicators):
            print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {i+1}: {type(indicator).__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            required_methods = ['calculate', 'validate_data', 'get_statistics']
            for method in required_methods:
                if hasattr(indicator, method):
                    print(f"     ‚úÖ {method} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"     ‚ùå {method} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤
            try:
                stats = indicator.get_statistics(test_data)
                print(f"     ‚úÖ get_statistics —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
            except Exception as e:
                print(f"     ‚ùå get_statistics –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ IndicatorFactory
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ IndicatorFactory:")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        preloaded_indicators = IndicatorFactory.get_indicators_by_source('preloaded')
        custom_indicators = IndicatorFactory.get_indicators_by_source('custom')
        library_indicators = IndicatorFactory.get_indicators_by_source('library')
        
        print(f"‚úÖ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(preloaded_indicators)}")
        print(f"‚úÖ CUSTOM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(custom_indicators)}")
        print(f"‚úÖ LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(library_indicators)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        all_indicators = IndicatorFactory.list_indicators()
        print(f"‚úÖ –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(all_indicators)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
        if 'sma' in all_indicators:
            info = IndicatorFactory.get_indicator_info('sma')
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SMA: {info}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")
    try:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        try:
            IndicatorFactory.create('unknown', 'sma')
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            return False
        except ValueError as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        try:
            IndicatorFactory.create('custom', 'unknown_indicator')
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            return False
        except KeyError as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False
    
    # 7. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    try:
        # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        new_sma = IndicatorFactory.create('custom', 'sma', period=20)
        print(f"‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {type(new_sma).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        result = new_sma.calculate(test_data)
        if result.data is not None:
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã IndicatorFactory –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_indicator_factory()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IndicatorFactory - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IndicatorFactory - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
