#!/usr/bin/env python3
"""
01. BQuant Data Module Testing

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥—É–ª—è `bquant.data`.
–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–æ—É—Ç–±—É–∫–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.

–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –∏–º–ø–æ—Ä—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ loader - –∑–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–æ–≤  
3. –û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã

Usage:
    python 01_data.py [--log LOGFILE] [--trap]
    
    --log LOGFILE    Write output to file (default: always to console + 01_data_log.txt)
    --trap          Enable step-by-step execution (default: enabled)
    --no-trap       Disable step-by-step execution
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–º
LOG_FILE = None
ENABLE_TRAP = True

def setup_logging(log_file_path=None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    global LOG_FILE
    
    if log_file_path:
        LOG_FILE = open(log_file_path, 'w', encoding='utf-8')
        log_message(f"üóÇÔ∏è Log started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", to_file_only=True)
        log_message(f"üìù Output will be written to: {log_file_path}")
    

def log_message(message, to_file_only=False):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏/–∏–ª–∏ —Ñ–∞–π–ª"""
    if not to_file_only:
        print(message)
    
    if LOG_FILE:
        LOG_FILE.write(message + '\n')
        LOG_FILE.flush()

def wait_for_continue():
    """–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω trap —Ä–µ–∂–∏–º)"""
    if not ENABLE_TRAP:
        return
        
    log_message("\n" + "="*60)
    try:
        user_input = input("Press ENTER to continue or 'q' to quit: ").strip().lower()
        if user_input == 'q':
            log_message("Exiting...")
            cleanup_and_exit(0)
    except KeyboardInterrupt:
        log_message("\nKeyboard interrupt received. Exiting...")
        cleanup_and_exit(1)
    log_message("="*60 + "\n")

def cleanup_and_exit(exit_code=0):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—ã—Ö–æ–¥"""
    if LOG_FILE:
        log_message(f"üèÅ Log ended: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", to_file_only=True)
        LOG_FILE.close()
    sys.exit(exit_code)

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='BQuant Data Module Testing - Notebook-style script',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python 01_data.py                    # Default: console + file log, with traps
  python 01_data.py --log mylog.txt    # Custom log file
  python 01_data.py --no-trap          # Run without step breaks
  python 01_data.py --log test.log --no-trap  # Custom log, no breaks
        """
    )
    
    script_dir = Path(__file__).parent
    default_log = script_dir / '01_data_log.txt'
    
    parser.add_argument('--log', 
                       default=str(default_log),
                       help=f'Log file path (default: {default_log})')
    
    trap_group = parser.add_mutually_exclusive_group()
    trap_group.add_argument('--trap', 
                           action='store_true',
                           default=True,
                           help='Enable step-by-step execution (default)')
    trap_group.add_argument('--no-trap',
                           action='store_false', 
                           dest='trap',
                           help='Disable step-by-step execution')
    
    return parser.parse_args()

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
args = parse_arguments()
ENABLE_TRAP = args.trap

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(args.log)

log_message("üöÄ Starting BQuant Data Module Testing")
log_message("=" * 50)

# ============================================================================
# STEP 0: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================================================================
log_message("üìã STEP 0: Environment Setup")
log_message("-" * 30)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É bquant
project_root = Path.cwd().parent.parent if Path.cwd().name == 'notebooks' else Path.cwd()
if not (project_root / 'bquant').exists():
    project_root = Path.cwd()
    
sys.path.insert(0, str(project_root))

log_message(f"üìÅ Project root: {project_root}")
log_message(f"üêç Python path: {sys.path[0]}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pandas –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏
try:
    import pandas as pd
    log_message(f"üìä Pandas version: {pd.__version__}")
except ImportError:
    log_message("‚ö†Ô∏è Pandas not available - will import later")

wait_for_continue()

# ============================================================================
# STEP 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================
log_message("üìã STEP 1: Logging Setup")
log_message("-" * 25)

from bquant.core.logging_config import setup_notebook_logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
logger = setup_notebook_logging()
log_message("‚úÖ Logging configured: WARNING+ to console, INFO+ to file")

wait_for_continue()

# ============================================================================
# STEP 2: –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π bquant
# ============================================================================
log_message("üìã STEP 2: BQuant Module Imports")
log_message("-" * 33)

try:
    from bquant.core.config import (
        get_data_dir, set_data_dir, PROJECT_ROOT
    )

    from bquant.data.loader import (
        load_ohlcv_data, get_data_info, 
        get_available_symbols, get_available_timeframes
    )
    
    log_message("‚úÖ BQuant modules imported successfully")
    
except ImportError as e:
    log_message(f"‚ùå Import error: {e}")
    log_message("Make sure all dependencies are installed")
    cleanup_and_exit(1)

wait_for_continue()

# ============================================================================
# STEP 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# ============================================================================
log_message("üìã STEP 3: Data Directory Setup")
log_message("-" * 30)

log_message(f"üîß Current data dir: {get_data_dir()}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º data/row –∫–∞–∫ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
raw_data_path = PROJECT_ROOT / "data" / "row"
set_data_dir(raw_data_path)

log_message(f"‚úÖ New data directory: {get_data_dir()}")
log_message(f"‚úÖ Directory exists: {get_data_dir().exists()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
if get_data_dir().exists():
    csv_files = list(get_data_dir().glob("*.csv"))
    log_message(f"\nüìÑ Found {len(csv_files)} CSV files:")
    for csv_file in csv_files:
        size_mb = csv_file.stat().st_size / (1024 * 1024)
        log_message(f"    {csv_file.name} ({size_mb:.2f} MB)")
else:
    log_message("‚ùå Directory not found!")
    log_message("Please check if data/row directory exists with CSV files")

wait_for_continue()

# ============================================================================
# STEP 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ OANDA —Ñ–∞–π–ª–∞
# ============================================================================
log_message("üìã STEP 4: Test OANDA CSV Loading")
log_message("-" * 35)

log_message("üß™ Test 1: Loading OANDA_XAUUSD, 60.csv")
log_message("=" * 45)

oanda_file = get_data_dir() / "OANDA_XAUUSD, 60.csv"
log_message(f"File path: {oanda_file}")
log_message(f"File exists: {oanda_file.exists()}")

oanda_data = None
if oanda_file.exists():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        oanda_data = load_ohlcv_data(
            oanda_file, 
            symbol='XAUUSD', 
            timeframe='1h',
            validate_data=True
        )
        
        log_message(f"‚úÖ Data loaded successfully!")
        log_message(f"Shape: {oanda_data.shape}")
        log_message(f"Columns: {list(oanda_data.columns)}")
        log_message(f"Date range: {oanda_data.index.min()} to {oanda_data.index.max()}")
        
        log_message(f"\nFirst 3 rows:")
        log_message(str(oanda_data.head(3)))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        data_info = get_data_info(oanda_data)
        log_message(f"\nüìä Data Info:")
        log_message(f"  Rows: {data_info['rows']}")
        log_message(f"  Memory usage: {data_info['memory_usage_mb']:.2f} MB")
        log_message(f"  Missing values: {data_info['missing_values']}")
        
    except Exception as e:
        log_message(f"‚ùå Error loading OANDA data: {e}")
        oanda_data = None
else:
    log_message("‚ùå OANDA file not found")

wait_for_continue()

# ============================================================================
# STEP 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ MetaTrader —Ñ–∞–π–ª–∞
# ============================================================================
log_message("üìã STEP 5: Test MetaTrader CSV Loading")
log_message("-" * 37)

log_message("üß™ Test 2: Loading XAUUSDH1.csv")
log_message("=" * 35)

mt_file = get_data_dir() / "XAUUSDH1.csv"
log_message(f"File path: {mt_file}")
log_message(f"File exists: {mt_file.exists()}")

mt_data = None
if mt_file.exists():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ MetaTrader —Ñ–æ—Ä–º–∞—Ç–∞
        mt_data = load_ohlcv_data(
            mt_file,
            symbol='XAUUSD',
            timeframe='1h',
            validate_data=True
        )
        
        log_message(f"‚úÖ Data loaded successfully!")
        log_message(f"Shape: {mt_data.shape}")
        log_message(f"Columns: {list(mt_data.columns)}")
        log_message(f"Date range: {mt_data.index.min()} to {mt_data.index.max()}")
        
        log_message(f"\nFirst 3 rows:")
        log_message(str(mt_data.head(3)))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        mt_info = get_data_info(mt_data)
        log_message(f"\nüìä Data Info:")
        log_message(f"  Rows: {mt_info['rows']}")
        log_message(f"  Memory usage: {mt_info['memory_usage_mb']:.2f} MB")
        log_message(f"  Missing values: {mt_info['missing_values']}")
        
    except Exception as e:
        log_message(f"‚ùå Error loading MT data: {e}")
        log_message("This might be due to encoding issues or file format")
        mt_data = None
else:
    log_message("‚ùå MetaTrader file not found")

wait_for_continue()

# ============================================================================
# STEP 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
# ============================================================================
log_message("üìã STEP 6: Data Sources Comparison")
log_message("-" * 35)

log_message("üß™ Test 3: Comparing Data Sources")
log_message("=" * 35)

if oanda_data is not None and mt_data is not None:
    log_message("üìä Data Comparison:")
    log_message(f"  OANDA shape: {oanda_data.shape}")
    log_message(f"  MetaTrader shape: {mt_data.shape}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    oanda_cols = set(oanda_data.columns)
    mt_cols = set(mt_data.columns)
    common_cols = oanda_cols.intersection(mt_cols)
    
    log_message(f"\nüìã Columns:")
    log_message(f"  Common columns: {sorted(common_cols)}")
    log_message(f"  OANDA only: {sorted(oanda_cols - mt_cols)}")
    log_message(f"  MetaTrader only: {sorted(mt_cols - oanda_cols)}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    if not oanda_data.index.empty and not mt_data.index.empty:
        log_message(f"\nüìÖ Time Ranges:")
        log_message(f"  OANDA: {oanda_data.index.min()} to {oanda_data.index.max()}")
        log_message(f"  MetaTrader: {mt_data.index.min()} to {mt_data.index.max()}")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
        if 'close' in common_cols:
            log_message(f"\nüí∞ Close Price Stats:")
            log_message(f"  OANDA - Mean: {oanda_data['close'].mean():.2f}, Std: {oanda_data['close'].std():.2f}")
            log_message(f"  MetaTrader - Mean: {mt_data['close'].mean():.2f}, Std: {mt_data['close'].std():.2f}")
else:
    log_message("‚ö†Ô∏è Cannot compare - one or both datasets not loaded")
    if oanda_data is not None:
        log_message("‚úÖ OANDA data is available")
    if mt_data is not None:
        log_message("‚úÖ MetaTrader data is available")

wait_for_continue()

# ============================================================================
# STEP 7: –û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# ============================================================================
log_message("üìã STEP 7: Available Data Overview")
log_message("-" * 35)

log_message("üß™ Test 4: Data Overview")
log_message("=" * 25)

try:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    available_symbols = get_available_symbols(get_data_dir())
    log_message(f"üìà Available symbols: {available_symbols}")

    if available_symbols:
        log_message(f"\nüìä Symbol Details:")
        for symbol in available_symbols:
            timeframes = get_available_timeframes(symbol, get_data_dir())
            log_message(f"  {symbol}: {timeframes}")
    else:
        log_message("‚ùå No symbols detected in data directory")

    csv_files_count = len(list(get_data_dir().glob('*.csv')))
    log_message(f"\nüìÅ Total CSV files in directory: {csv_files_count}")

except Exception as e:
    log_message(f"‚ùå Error getting data overview: {e}")

wait_for_continue()

# ============================================================================
# STEP 8: –†–µ–∑—é–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================
log_message("üìã STEP 8: Testing Summary")
log_message("-" * 27)

log_message("üéØ Data Module Testing Results:")
log_message("=" * 35)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
loaded_count = 0
if oanda_data is not None:
    log_message("‚úÖ OANDA data loaded successfully")
    loaded_count += 1
else:
    log_message("‚ùå OANDA data failed to load")

if mt_data is not None:
    log_message("‚úÖ MetaTrader data loaded successfully") 
    loaded_count += 1
else:
    log_message("‚ùå MetaTrader data failed to load")

log_message(f"\nüìä Summary:")
log_message(f"  Successfully loaded: {loaded_count}/2 datasets")
log_message(f"  Available symbols: {len(available_symbols) if 'available_symbols' in locals() else 'Unknown'}")
log_message(f"  CSV files found: {len(list(get_data_dir().glob('*.csv')))}")

log_message("\nüöÄ Next Steps:")
log_message("- Test data validation functions")
log_message("- Test data processing functions") 
log_message("- Test sample data functionality")
log_message("- Performance testing")

log_message("\n‚úÖ Data module basic testing completed!")

wait_for_continue()

log_message("üèÅ Script finished successfully!")

cleanup_and_exit(0)