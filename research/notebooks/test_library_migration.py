"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ LIBRARY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - –≠—Ç–∞–ø 5

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
"""

import pandas as pd
import numpy as np
from bquant.indicators.library import (
    PandasTALoader, TALibLoader, LibraryManager,
    load_pandas_ta, load_talib, load_all_indicators
)

def test_library_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ LIBRARY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞:")
    try:
        from bquant.indicators.library import (
            PandasTALoader, TALibLoader, LibraryManager,
            load_pandas_ta, load_talib, load_all_indicators
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ library –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ library: {e}")
        return False
    
    try:
        from bquant.indicators import (
            PandasTALoader, TALibLoader, LibraryManager,
            load_pandas_ta, load_talib, load_all_indicators
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫:")
    try:
        pandas_ta_available = PandasTALoader.is_available()
        talib_available = TALibLoader.is_available()
        
        print(f"‚úÖ pandas-ta –¥–æ—Å—Ç—É–ø–Ω–∞: {pandas_ta_available}")
        print(f"‚úÖ TA-Lib –¥–æ—Å—Ç—É–ø–Ω–∞: {talib_available}")
        
        if not pandas_ta_available and not talib_available:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç LibraryManager
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç LibraryManager:")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        available_libs = LibraryManager.get_available_libraries()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {available_libs}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö
        for lib_name in available_libs:
            lib_info = LibraryManager.get_library_info(lib_name)
            print(f"‚úÖ {lib_name}: {lib_info}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LibraryManager: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º pandas-ta (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if PandasTALoader.is_available():
            pandas_ta_count = load_pandas_ta()
            print(f"‚úÖ pandas-ta –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {pandas_ta_count}")
        else:
            print("‚ö†Ô∏è pandas-ta –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º TA-Lib (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if TALibLoader.is_available():
            talib_count = load_talib()
            print(f"‚úÖ TA-Lib –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {talib_count}")
        else:
            print("‚ö†Ô∏è TA-Lib –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        all_results = load_all_indicators()
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {all_results}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ IndicatorFactory
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    try:
        from bquant.indicators import IndicatorFactory
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        registered_indicators = IndicatorFactory.list_indicators()
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(registered_indicators)}")
        
        # –ò—â–µ–º LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        library_indicators = [name for name in registered_indicators.keys() if 'pandas_ta_' in name or 'talib_' in name]
        print(f"‚úÖ LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(library_indicators)}")
        
        if library_indicators:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {library_indicators[:5]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100)
    }, index=dates)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pandas-ta SMA
        if PandasTALoader.is_available():
            try:
                sma_indicator = IndicatorFactory.create_indicator('pandas_ta_sma', length=20)
                sma_result = sma_indicator.calculate(test_data)
                print(f"‚úÖ pandas-ta SMA —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(sma_result.columns)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º native_indicator
                native_func = sma_indicator.native_indicator
                print(f"‚úÖ native_indicator –¥–æ—Å—Ç—É–ø–µ–Ω: {type(native_func)}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è pandas-ta SMA –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TA-Lib SMA
        if TALibLoader.is_available():
            try:
                sma_indicator = IndicatorFactory.create_indicator('talib_sma', timeperiod=20)
                sma_result = sma_indicator.calculate(test_data)
                print(f"‚úÖ TA-Lib SMA —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(sma_result.columns)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º native_indicator
                native_func = sma_indicator.native_indicator
                print(f"‚úÖ native_indicator –¥–æ—Å—Ç—É–ø–µ–Ω: {type(native_func)}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è TA-Lib SMA –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 7. –¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    try:
        from bquant.indicators.base import LibraryIndicator
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        if PandasTALoader.is_available():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            test_indicator = IndicatorFactory.create_indicator('pandas_ta_sma', length=20)
            print(f"‚úÖ pandas-ta –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç LibraryIndicator: {isinstance(test_indicator, LibraryIndicator)}")
        
        if TALibLoader.is_available():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            test_indicator = IndicatorFactory.create_indicator('talib_sma', timeperiod=20)
            print(f"‚úÖ TA-Lib –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç LibraryIndicator: {isinstance(test_indicator, LibraryIndicator)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã LIBRARY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_library_migration()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 5: –ú–∏–≥—Ä–∞—Ü–∏—è LIBRARY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 5: –ú–∏–≥—Ä–∞—Ü–∏—è LIBRARY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
