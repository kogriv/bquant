[LOG] Log started: 2025-10-18 12:59:30
[OUTPUT] Output will be written to: research\notebooks\02_ind_macd_log.txt
[>>] Starting MACD Zone Analysis: Migration Guide
=======================================================
[SCRIPT] MACD Zone Analysis: Migration Guide
[DATE] Started: 2025-10-18 12:59:30
=======================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных
---------------------------------------
[INFO] Загружаем sample-данные XAUUSD 1H:
[OK] DatetimeIndex установлен
Загружено: 1000 баров
Период: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
Колонки: open, high, low, close, volume...
================================================================================
[STEP] STEP 2: Шаг 2: Старый API (deprecated) - понимание проблемы
-----------------------------------------------------------
[WARN] ВНИМАНИЕ: MACDZoneAnalyzer deprecated и будет удален в v3.0.0!
[INFO] Проблемы старого API:
  [-] Работает ТОЛЬКО с MACD (нет универсальности)
  [-] Монолитная архитектура (сложно расширять)
  [-] Нет встроенного кэширования
  [-] Ограниченные форматы экспорта
  [-] Технические проблемы совместимости
  [-] Будет удален в v3.0.0

======================================================================
ПРИМЕР СТАРОГО КОДА (deprecated):
======================================================================

from bquant.indicators.macd import MACDZoneAnalyzer

# Создание анализатора
analyzer = MACDZoneAnalyzer(
    macd_params={'fast_period': 12, 'slow_period': 26, 'signal_period': 9},
    zone_params={'min_duration': 2}
)

# Анализ зон
result = analyzer.analyze_complete_modular(
    df,
    perform_clustering=False
)

# Результат:
# - result.zones: список зон
# - result.features: характеристики зон
# - result.statistics: статистика

======================================================================
[INFO] Недостатки такого подхода:
  * Привязка к конкретному индикатору (MACD)
  * Сложно добавить новые индикаторы
  * Дублирование кода для каждого индикатора
  * Отсутствие переиспользования компонентов
================================================================================
[STEP] STEP 3: Шаг 3: НОВЫЙ универсальный API - революция!
---------------------------------------------------
[INFO] Новый подход: ОДИН API для ВСЕХ индикаторов!

======================================================================
НОВЫЙ КОД - Вариант 1: Fluent Builder
======================================================================

from bquant.analysis.zones import analyze_zones

# Тот же анализ, но универсальный!
result = (
    analyze_zones(df)
    .with_indicator('custom', 'macd', 
                   fast_period=12, slow_period=26, signal_period=9)
    .detect_zones('zero_crossing', 
                 indicator_col='macd_hist', min_duration=2)
    .analyze()
    .build()
)

# Результат - тот же ZoneAnalysisResult!
# - result.zones
# - result.features  
# - result.statistics

======================================================================

======================================================================
НОВЫЙ КОД - Вариант 2: Convenience Preset
======================================================================

from bquant.analysis.zones import analyze_macd_zones

# ЕЩЕ ПРОЩЕ для MACD!
result = analyze_macd_zones(
    df,
    fast=12,
    slow=26,
    signal=9,
    min_duration=2
)

# Один вызов - все готово!

======================================================================

[INFO] Преимущества нового API:
  [+] Универсальность - работает с ЛЮБЫМИ индикаторами
  [+] Fluent syntax - читаемый, понятный код
  [+] Модульность - используйте компоненты отдельно
  [+] Кэширование - автоматическое, из коробки
  [+] Экспорт - 3 формата (pickle, JSON, parquet)
  [+] Convenience presets - быстрый старт
================================================================================
[STEP] STEP 4: Шаг 4: Migration Guide - пошаговый переход
--------------------------------------------------
[INFO] Как мигрировать старый код на новый API:

МИГРАЦИЯ ШАГ 1: Замена импорта
----------------------------------------------------------------------
Было:
  from bquant.indicators.macd import MACDZoneAnalyzer

Стало:
  from bquant.analysis.zones import analyze_zones
  # или для быстрого старта:
  from bquant.analysis.zones import analyze_macd_zones

МИГРАЦИЯ ШАГ 2: Замена создания анализатора
----------------------------------------------------------------------
Было:
  analyzer = MACDZoneAnalyzer(
      macd_params={'fast_period': 12, ...}
  )

Стало (вариант A - builder):
  builder = (
      analyze_zones(df)
      .with_indicator('custom', 'macd', fast_period=12, ...)
  )

Стало (вариант B - preset):
  # Просто вызов функции, без создания объектов!

МИГРАЦИЯ ШАГ 3: Замена вызова analyze
----------------------------------------------------------------------
Было:
  result = analyzer.analyze_complete_modular(df)

Стало (вариант A - builder):
  result = (
      builder
      .detect_zones('zero_crossing', indicator_col='macd_hist')
      .analyze()
      .build()
  )

Стало (вариант B - preset):
  result = analyze_macd_zones(df, fast=12, slow=26, signal=9)

[INFO] Оценка времени миграции:
  * Простой проект (1-3 файла):   10-15 минут
  * Средний проект (5-10 файлов):  30-60 минут
  * Крупный проект (20+ файлов):   2-3 часа

  ROI: Долгосрочная поддержка + новые возможности
================================================================================
[STEP] STEP 5: Шаг 5: Различные стратегии детекции
-------------------------------------------
[INFO] Новый API поддерживает множество стратегий детекции:

1. Zero Crossing (пересечение нуля)
----------------------------------------------------------------------

result = (
    analyze_zones(df)
    .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
    .detect_zones('zero_crossing', indicator_col='macd_hist')
    .build()
)

# Детектирует зоны при пересечении гистограммой нулевой линии
# Используется для: определения силы тренда


2. Line Crossing (пересечение линий)
----------------------------------------------------------------------

result = (
    analyze_zones(df)
    .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
    .detect_zones('line_crossing', line1_col='macd', line2_col='signal')
    .build()
)

# Детектирует зоны при пересечении MACD и Signal линий
# Используется для: поиска торговых сигналов


3. Threshold (пороговые значения)
----------------------------------------------------------------------

result = (
    analyze_zones(df)
    .with_indicator('library', 'rsi', length=14)
    .detect_zones('threshold', 
                 indicator_col='RSI_14',
                 upper_threshold=70, 
                 lower_threshold=30)
    .build()
)

# Детектирует зоны перекупленности/перепроданности
# Используется для: RSI, Stochastic, и других осцилляторов


4. Combined Rules (комбинация правил)
----------------------------------------------------------------------

result = (
    analyze_zones(df)
    .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
    .detect_zones('combined', rules=[
        {'type': 'zero_crossing', 'indicator_col': 'macd_hist'},
        {'type': 'line_crossing', 'line1_col': 'macd', 'line2_col': 'signal'}
    ])
    .build()
)

# Комбинирует несколько правил для более точной детекции
# Используется для: комплексных торговых стратегий


[INFO] Выбор стратегии зависит от:
  * Типа индикатора (осциллятор, трендовый, и т.д.)
  * Торговой стратегии
  * Требуемой точности детекции
  * Специфики рынка
================================================================================
[STEP] STEP 6: Шаг 6: Модульное использование компонентов
--------------------------------------------------
[INFO] Новый API позволяет использовать компоненты по отдельности:

СЦЕНАРИЙ 1: Только детекция зон (без анализа)
----------------------------------------------------------------------

# Детектируем зоны
zones_only = (
    analyze_zones(df)
    .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
    .detect_zones('zero_crossing', indicator_col='macd_hist')
    .build()  # БЕЗ .analyze() - только детекция!
)

# Сохраняем для последующего использования
zones_only.save('zones.pkl', format='pickle')

# Используем позже:
# - Визуализация на другом сервере
# - Анализ в другое время
# - Экспорт в другие системы


СЦЕНАРИЙ 2: Анализ предварительно детектированных зон
----------------------------------------------------------------------

# Загружаем ранее детектированные зоны
from bquant.analysis.zones.models import ZoneAnalysisResult
zones = ZoneAnalysisResult.load('zones.pkl')

# Анализируем (TODO: API для анализа готовых зон)
# analyzed = analyze_existing_zones(zones, df)


СЦЕНАРИЙ 3: Только расчет индикатора
----------------------------------------------------------------------

from bquant.indicators.base import IndicatorFactory

# Создаем индикатор
indicator = IndicatorFactory.create('custom', 'macd',
                                   fast_period=12, slow_period=26, signal_period=9)

# Рассчитываем
df_with_indicator = indicator.calculate(df)

# Используем для своих целей (не только зоны)


[INFO] Преимущества модульности:
  [+] Гибкость - используйте только нужные компоненты
  [+] Производительность - не запускайте лишние вычисления
  [+] Масштабируемость - распределяйте задачи по серверам
  [+] Переиспользование - сохраняйте промежуточные результаты
================================================================================
[STEP] STEP 7: Шаг 7: Универсальность - другие индикаторы
--------------------------------------------------
[INFO] ТОТ ЖЕ API работает с ЛЮБЫМИ индикаторами!

RSI ZONES (Relative Strength Index)
======================================================================

# Через builder:
result = (
    analyze_zones(df)
    .with_indicator('library', 'rsi', length=14)
    .detect_zones('threshold', 
                 indicator_col='RSI_14',
                 upper_threshold=70, 
                 lower_threshold=30)
    .analyze()
    .build()
)

# Через preset (еще проще):
from bquant.analysis.zones import analyze_rsi_zones
result = analyze_rsi_zones(df, period=14, upper=70, lower=30)


AO ZONES (Awesome Oscillator)
======================================================================

# Через builder:
result = (
    analyze_zones(df)
    .with_indicator('library', 'ao', fast=5, slow=34)
    .detect_zones('zero_crossing', indicator_col='AO_5_34')
    .analyze()
    .build()
)

# Через preset:
from bquant.analysis.zones import analyze_ao_zones
result = analyze_ao_zones(df, fast=5, slow=34)


MA CROSSOVER ZONES (Moving Average)
======================================================================

# Добавляем два MA индикатора
result = (
    analyze_zones(df)
    .with_indicator('library', 'sma', length=20)  # MA 20
    .with_indicator('library', 'sma', length=50)  # MA 50
    .detect_zones('line_crossing', 
                 line1_col='SMA_20', 
                 line2_col='SMA_50')
    .analyze()
    .build()
)


PRELOADED ZONES (внешние данные)
======================================================================

# Загрузка зон из CSV
from bquant.analysis.zones import analyze_preloaded_zones

result = analyze_preloaded_zones(
    df,
    zones_data='zones.csv',  # или DataFrame
    analyze_features=True
)

# Используется для:
# - Зоны от внешних систем
# - Ручная разметка зон
# - Импорт из других платформ


[INFO] Ключевое преимущество:
  ОДИН И ТОТ ЖЕ КОД для ВСЕХ индикаторов!
  Меняется только:
    * Имя индикатора
    * Параметры индикатора
    * Стратегия детекции

  НЕ нужно писать отдельный класс для каждого индикатора!
================================================================================
[STEP] STEP 8: Шаг 8: Сохранение и загрузка результатов
------------------------------------------------
[INFO] Новый API поддерживает 3 формата сохранения:

ФОРМАТ 1: Pickle (наиболее полный)
----------------------------------------------------------------------

# Сохранение
result.save('zones.pkl', format='pickle')

# Загрузка
from bquant.analysis.zones.models import ZoneAnalysisResult
loaded = ZoneAnalysisResult.load('zones.pkl')

# Преимущества:
# [+] Сохраняет ВСЕ данные (включая DataFrame)
# [+] Быстрая загрузка/сохранение
# [+] Компактный размер (с сжатием)
# [-] Не читаем человеком
# [-] Привязка к Python


ФОРМАТ 2: JSON (читаемый)
----------------------------------------------------------------------

# Сохранение
result.save('zones.json', format='json', include_data=False)

# Загрузка
loaded = ZoneAnalysisResult.load('zones.json')

# Преимущества:
# [+] Читаем человеком
# [+] Легко делиться
# [+] Совместим с другими языками
# [+] Легко редактировать вручную
# [-] Больший размер
# [-] Не сохраняет DataFrame


ФОРМАТ 3: Parquet (для больших данных)
----------------------------------------------------------------------

# Сохранение
result.save('zones.parquet', format='parquet')

# Загрузка
loaded = ZoneAnalysisResult.load('zones.parquet')

# Преимущества:
# [+] Отличное сжатие
# [+] Быстрая загрузка
# [+] Поддержка DataFrame
# [+] Совместим с Spark, Pandas, и т.д.
# [-] Требует pyarrow


[INFO] Выбор формата:
  * Pickle:   для Python-to-Python передачи
  * JSON:     для sharing и редактирования
  * Parquet:  для больших данных и BigData pipelines
================================================================================
[STEP] STEP 9: Итоговое резюме
------------------------------
[INFO] ======================================================================
[INFO] ИТОГИ: Почему мигрировать на новый API
[INFO] ======================================================================

СТАРЫЙ API (deprecated):
  [-] Только MACD
  [-] Монолитная архитектура
  [-] Технические проблемы
  [-] Будет удален в v3.0.0
  [?] ~100 строк кода на индикатор

НОВЫЙ УНИВЕРСАЛЬНЫЙ API:
  [+] ЛЮБЫЕ индикаторы (MACD, RSI, AO, MA, custom)
  [+] Модульная архитектура
  [+] Fluent builder + presets
  [+] Встроенное кэширование
  [+] 3 формата экспорта
  [+] Активная поддержка
  [+] ~10 строк кода на индикатор!

ЭКОНОМИЯ КОДА:
  Старый подход: MACDZoneAnalyzer (517 строк)
                 + RSIZoneAnalyzer (500 строк)
                 + AOZoneAnalyzer (500 строк)
                 = 1517 строк + дублирование

  Новый подход:  UniversalZoneAnalyzer (250 строк)
                 + 3 preset функции (30 строк)
                 = 280 строк БЕЗ дублирования

  Экономия: ~80% кода!

[INFO] РЕКОМЕНДАЦИЯ:
  * Для НОВЫХ проектов: используйте только новый API
  * Для СТАРЫХ проектов: мигрируйте постепенно
  * Время миграции: 10-180 минут
  * Срок поддержки старого API: до v3.0.0

[INFO] ПОЛЕЗНЫЕ РЕСУРСЫ:
  * Документация API:    docs/api/analysis/zones.md
  * Примеры (работающие): examples/02a_universal_zones.py
  * Модульное использование: devref/gaps/zo/zomodul.md
  * Архитектура:        devref/gaps/zo/zonan.md

[WARN] ТЕХНИЧЕСКАЯ ЗАМЕТКА:
  Этот скрипт демонстрирует API, но не запускает код
  из-за временной проблемы с swing_strategy registry.
  Проблема будет исправлена в ближайшем обновлении.
  Для РАБОТАЮЩИХ примеров используйте examples/

[END] Migration guide completed!
[END] Log ended: 2025-10-18 12:59:30
[TIME] Duration: 0:00:00.042532
