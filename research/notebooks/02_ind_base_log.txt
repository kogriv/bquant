[LOG] Log started: 2025-09-02 16:28:44
[OUTPUT] Output will be written to: 02_ind_base_log.txt
[>>] Starting Демонстрация работы базовых классов индикаторов bquant.indicators.base
==========================================================================================
[SCRIPT] Демонстрация работы базовых классов индикаторов bquant.indicators.base
[DATE] Started: 2025-09-02 16:28:44
==========================================================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных
---------------------------------------
[INFO] Для демонстрации базовых классов индикаторов используем sample-данные.
[INFO] 1.1. Загружаем sample-данные для тестирования:
Колонка 'time' преобразована в DatetimeIndex
Загружено 1000 строк данных
Структура: ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label']
Тип индекса: <class 'pandas.core.indexes.datetimes.DatetimeIndex'>
Диапазон дат: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
[OK] Loading sample data completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 2: Шаг 2: Работа с IndicatorSource и IndicatorConfig
---------------------------------------------------------
[INFO] IndicatorSource определяет источники индикаторов, а IndicatorConfig - их конфигурацию.
[INFO] 2.1. Изучение доступных источников индикаторов:
Доступные источники индикаторов:
  - PRELOADED: preloaded
  - LIBRARY: library
  - CUSTOM: custom
[INFO] 2.2. Создание конфигураций для различных типов индикаторов:
Создано 3 конфигурации индикаторов:
  - custom_sma:
    * Источник: custom
    * Параметры: {'period': 20}
    * Колонки: ['sma_20']
    * Описание: Простая скользящая средняя с периодом 20
  - custom_bbands:
    * Источник: custom
    * Параметры: {'period': 20, 'std_dev': 2}
    * Колонки: ['bb_upper', 'bb_middle', 'bb_lower']
    * Описание: Полосы Боллинджера с периодом 20 и 2 стандартными отклонениями
  - talib_rsi:
    * Источник: library
    * Параметры: {'period': 14}
    * Колонки: ['rsi_14']
    * Описание: RSI из библиотеки TALib с периодом 14
[OK] Testing IndicatorSource and IndicatorConfig completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 3: Шаг 3: Создание пользовательского индикатора на основе BaseIndicator
----------------------------------------------------------------------------
[INFO] BaseIndicator - это абстрактный базовый класс для создания пользовательских индикаторов.
[INFO] 3.1. Создание пользовательского индикатора 'True Range':
Создан пользовательский индикатор TrueRangeIndicator:
  - Название: TrueRangeIndicator
  - Базовый класс: BaseIndicator
  - Минимальные записи: 2
  - Требуемые колонки: ['high', 'low', 'close']
[OK] Creating custom indicator completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 4: Шаг 4: Тестирование пользовательского индикатора
--------------------------------------------------------
[INFO] Тестируем созданный пользовательский индикатор True Range.
[INFO] 4.1. Создание экземпляра индикатора:
Создан экземпляр индикатора:
  - Название: true_range
  - Конфигурация: true_range
  - Источник: custom
[INFO] 4.2. Валидация данных:
Данные валидны для индикатора: True
[INFO] 4.3. Расчет True Range:
Результат расчета True Range:
  - Название: true_range
  - Размер данных: (1000, 1)
  - Колонки: ['true_range']
  - Метаданные: {'calculation_method': 'max_of_three_ranges', 'first_valid_index': Timestamp('2025-06-11 20:00:00+0700', tz='UTC+07:00'), 'last_valid_index': Timestamp('2025-08-12 13:00:00+0700', tz='UTC+07:00'), 'total_records': 1000}
Первые 5 значений True Range:
                           true_range
time                                 
2025-06-11 20:00:00+07:00      16.820
2025-06-11 21:00:00+07:00      12.735
2025-06-11 22:00:00+07:00      13.275
2025-06-11 23:00:00+07:00       6.385
2025-06-12 00:00:00+07:00      12.055
Статистика True Range:
  - Минимум: 1.9550
  - Максимум: 47.7550
  - Среднее: 8.8282
  - Медиана: 7.5275
[OK] Testing custom indicator completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 5: Шаг 5: Создание индикатора на основе PreloadedIndicator
---------------------------------------------------------------
[INFO] PreloadedIndicator - это базовый класс для встроенных индикаторов BQuant.
[INFO] 5.1. Создание индикатора 'Price Range' на основе PreloadedIndicator:
Создан индикатор PriceRangeIndicator:
  - Базовый класс: PreloadedIndicator
  - Выходные колонки: ['price_range_pct']
  - Описание: Price Range как процент от цены закрытия
[INFO] 5.2. Тестирование PriceRangeIndicator:
Результат расчета Price Range:
  - Размер данных: (1000, 1)
  - Колонки: ['price_range_pct']
Статистика Price Range (%):
  - Минимум: 0.0588%
  - Максимум: 1.4293%
  - Среднее: 0.2622%
[OK] Creating PreloadedIndicator completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 6: Шаг 6: Работа с IndicatorFactory
----------------------------------------
[INFO] IndicatorFactory - это фабрика для создания и управления индикаторами.
[INFO] 6.1. Регистрация пользовательских индикаторов:
Зарегистрированы индикаторы в фабрике:
  - true_range: <class '__main__.TrueRangeIndicator'>
  - price_range: <class '__main__.PriceRangeIndicator'>
[INFO] 6.2. Просмотр доступных индикаторов:
Доступные индикаторы в фабрике:
  - sma: preloaded
  - ema: preloaded
  - rsi: preloaded
  - macd: preloaded
  - bbands: preloaded
  - true_range: preloaded
  - price_range: preloaded
[INFO] 6.3. Создание индикаторов через фабрику:
Индикаторы созданы через фабрику:
  - true_range: TrueRangeIndicator
  - price_range: PriceRangeIndicator
[INFO] 6.4. Получение информации об индикаторах:
Информация об индикаторе 'true_range':
  - Класс: N/A
  - Источник: preloaded
  - Описание: No description
Информация об индикаторе 'price_range':
  - Класс: N/A
  - Источник: preloaded
  - Описание: Price Range как процент от цены закрытия
[OK] Testing IndicatorFactory completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 7: Шаг 7: Тестирование кэширования
---------------------------------------
[INFO] BaseIndicator поддерживает кэширование результатов для оптимизации производительности.
[INFO] 7.1. Тестирование кэширования в TrueRangeIndicator:
Кэширование включено: True
[INFO] 7.2. Первый расчет (без кэша):
Первый расчет завершен за 0.0123 секунд
Размер кэша: 0
[INFO] 7.3. Второй расчет (с кэша):
Второй расчет завершен за 0.0029 секунд
Ускорение: 4.23x
Размер кэша: 0
[INFO] 7.4. Очистка кэша:
Кэш очищен. Размер кэша: 0
Результаты расчетов идентичны: True
[OK] Testing caching functionality completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 8: Шаг 8: Создание комплексного индикатора
-----------------------------------------------
[INFO] Демонстрация создания комплексного индикатора, объединяющего несколько расчетов.
[INFO] 8.1. Создание комплексного индикатора 'Price Analysis':
Создан комплексный индикатор PriceAnalysisIndicator:
  - Название: PriceAnalysisIndicator
  - Выходные колонки: ['true_range', 'price_range_pct', 'price_change_pct', 'volatility']
  - Минимальные записи: 21
[INFO] 8.2. Тестирование комплексного индикатора:
Результат комплексного анализа цен:
  - Размер данных: (1000, 4)
  - Колонки: ['true_range', 'price_range_pct', 'price_change_pct', 'volatility']
  - Метаданные: {'calculation_method': 'comprehensive_price_analysis', 'components': ['true_range', 'price_range_pct', 'price_change_pct', 'volatility'], 'first_valid_index': Timestamp('2025-06-11 20:00:00+0700', tz='UTC+07:00'), 'last_valid_index': Timestamp('2025-08-12 13:00:00+0700', tz='UTC+07:00'), 'total_records': 1000}
Статистика комплексного анализа:
  - true_range:
    * Записей: 1000
    * Минимум: 1.9550
    * Максимум: 47.7550
    * Среднее: 8.8282
  - price_range_pct:
    * Записей: 1000
    * Минимум: 0.0588
    * Максимум: 1.4293
    * Среднее: 0.2622
  - price_change_pct:
    * Записей: 999
    * Минимум: -0.8514
    * Максимум: 1.2351
    * Среднее: 0.0008
  - volatility:
    * Записей: 980
    * Минимум: 0.0951
    * Максимум: 0.3393
    * Среднее: 0.1751
[OK] Creating complex indicator completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 9: Шаг 9: Тестирование валидации данных
--------------------------------------------
[INFO] BaseIndicator предоставляет встроенную валидацию данных для обеспечения корректности расчетов.
[INFO] 9.1. Тестирование валидации корректных данных:
Валидация корректных данных: True
[INFO] 9.2. Тестирование валидации некорректных данных:
Валидация некорректных данных вызвала ошибку: IndicatorCalculationError: Missing required columns for test_validation: ['high', 'low', 'close'] (Details: indicator=test_validation, missing_columns=['high', 'low', 'close'])
[INFO] 9.3. Тестирование валидации данных с недостаточным количеством записей:
Валидация коротких данных вызвала ошибку: IndicatorCalculationError: Insufficient data for test_validation: 1 < 2 (Details: indicator=test_validation, records=1, required=2)
[OK] Testing data validation completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 10: Шаг 10: Анализ архитектуры и производительности
--------------------------------------------------------
[INFO] Анализ созданной архитектуры индикаторов и оценка производительности.
[INFO] 10.1. Анализ архитектуры индикаторов:
Анализ созданных индикаторов:
  - TrueRangeIndicator:
    * Базовый класс: BaseIndicator
    * Источник: custom
    * Выходные колонки: 1
    * Минимальные записи: 2
  - PriceRangeIndicator:
    * Базовый класс: PreloadedIndicator
    * Источник: preloaded
    * Выходные колонки: 1
    * Минимальные записи: 1
  - PriceAnalysisIndicator:
    * Базовый класс: BaseIndicator
    * Источник: custom
    * Выходные колонки: 4
    * Минимальные записи: 21
[INFO] 10.2. Оценка производительности:
Результаты производительности:
  - TrueRangeIndicator:
    * Время расчета: 0.0027 сек
    * Выходные колонки: 1
    * Записей: 1000
    * Скорость: 364033 записей/сек
  - PriceRangeIndicator:
    * Время расчета: 0.0010 сек
    * Выходные колонки: 1
    * Записей: 1000
    * Скорость: 1028807 записей/сек
  - PriceAnalysisIndicator:
    * Время расчета: 0.0048 сек
    * Выходные колонки: 4
    * Записей: 1000
    * Скорость: 208333 записей/сек
[INFO] 10.3. Анализ использования памяти:
Анализ использования памяти:
  - TrueRangeIndicator:
    * Размер результата: 0.02 МБ
    * Колонок: 1
  - PriceRangeIndicator:
    * Размер результата: 0.02 МБ
    * Колонок: 1
  - PriceAnalysisIndicator:
    * Размер результата: 0.04 МБ
    * Колонок: 4
[OK] Analyzing architecture and performance completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 11: Заключение
------------------------------
[INFO] Мы протестировали все основные компоненты базовой архитектуры индикаторов BQuant:
✅ IndicatorSource - источники индикаторов
✅ IndicatorConfig - конфигурация индикаторов
✅ IndicatorResult - результаты вычислений
✅ BaseIndicator - базовый класс для всех индикаторов
✅ PreloadedIndicator - базовый класс для встроенных индикаторов
✅ IndicatorFactory - фабрика для создания и управления индикаторами
[INFO] Созданы и протестированы пользовательские индикаторы:
🔧 TrueRangeIndicator - индикатор истинного диапазона
🔧 PriceRangeIndicator - индикатор диапазона цен
🔧 PriceAnalysisIndicator - комплексный анализ цен
[INFO] Базовая архитектура индикаторов BQuant предоставляет:
🏗️ Гибкую систему создания пользовательских индикаторов
🏗️ Встроенную валидацию данных и обработку ошибок
🏗️ Систему кэширования для оптимизации производительности
🏗️ Фабрику для централизованного управления индикаторами
🏗️ Единообразный интерфейс для всех типов индикаторов
[INFO] Это демонстрирует мощь и гибкость архитектуры BQuant для создания технических индикаторов.

[END] Script finished successfully!
[END] Log ended: 2025-09-02 16:33:59
[TIME] Duration: 0:05:14.854703
