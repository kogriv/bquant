[LOG] Log started: 2025-10-18 12:42:01
[OUTPUT] Output will be written to: research\notebooks\02_ind_base_log.txt
[>>] Starting Демонстрация работы базовых классов индикаторов bquant.indicators.base
==========================================================================================
[SCRIPT] Демонстрация работы базовых классов индикаторов bquant.indicators.base
[DATE] Started: 2025-10-18 12:42:01
==========================================================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных
---------------------------------------
[INFO] Для демонстрации базовых классов индикаторов используем sample-данные.
[INFO] 1.1. Загружаем sample-данные для тестирования:
Колонка 'time' преобразована в DatetimeIndex
Загружено 1000 строк данных
Структура: ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label']
Тип индекса: <class 'pandas.core.indexes.datetimes.DatetimeIndex'>
Диапазон дат: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
[OK] Loading sample data completed successfully
================================================================================
[STEP] STEP 2: Шаг 2: Работа с IndicatorSource и IndicatorConfig
---------------------------------------------------------
[INFO] IndicatorSource определяет источники индикаторов, а IndicatorConfig - их конфигурацию.
[INFO] 2.1. Изучение доступных источников индикаторов:
Доступные источники индикаторов:
  - PRELOADED: preloaded
  - CUSTOM: custom
  - LIBRARY: library
[INFO] 2.2. Создание конфигураций для различных типов индикаторов:
Создано 3 конфигурации индикаторов:
  - custom_sma:
    * Источник: custom
    * Параметры: {'period': 20}
    * Колонки: ['sma_20']
    * Описание: Простая скользящая средняя с периодом 20
  - custom_bbands:
    * Источник: custom
    * Параметры: {'period': 20, 'std_dev': 2}
    * Колонки: ['bb_upper', 'bb_middle', 'bb_lower']
    * Описание: Полосы Боллинджера с периодом 20 и 2 стандартными отклонениями
  - talib_rsi:
    * Источник: library
    * Параметры: {'period': 14}
    * Колонки: ['rsi_14']
    * Описание: RSI из библиотеки TALib с периодом 14
[OK] Testing IndicatorSource and IndicatorConfig completed successfully
================================================================================
[STEP] STEP 3: Шаг 3: Создание пользовательского индикатора на основе BaseIndicator
----------------------------------------------------------------------------
[INFO] BaseIndicator - это абстрактный базовый класс для создания пользовательских индикаторов.
[INFO] 3.1. Создание пользовательского индикатора 'True Range':
Создан пользовательский индикатор TrueRangeIndicator:
  - Название: TrueRangeIndicator
  - Базовый класс: CustomIndicator
  - Минимальные записи: 2
  - Требуемые колонки: ['high', 'low', 'close']
[OK] Creating custom indicator completed successfully
================================================================================
[STEP] STEP 4: Шаг 4: Тестирование пользовательского индикатора
--------------------------------------------------------
[INFO] Тестируем созданный пользовательский индикатор True Range.
[INFO] 4.1. Создание экземпляра индикатора:
Создан экземпляр индикатора:
  - Название: true_range
  - Конфигурация: true_range
  - Источник: custom
[INFO] 4.2. Валидация данных:
Данные валидны для индикатора: True
[INFO] 4.3. Расчет True Range:
Результат расчета True Range:
  - Название: true_range
  - Размер данных: (1000, 1)
  - Колонки: ['true_range']
  - Метаданные: {'calculation_method': 'max_of_three_ranges', 'first_valid_index': Timestamp('2025-06-11 20:00:00+0700', tz='UTC+07:00'), 'last_valid_index': Timestamp('2025-08-12 13:00:00+0700', tz='UTC+07:00'), 'total_records': 1000}
Первые 5 значений True Range:
                           true_range
time                                 
2025-06-11 20:00:00+07:00      16.820
2025-06-11 21:00:00+07:00      12.735
2025-06-11 22:00:00+07:00      13.275
2025-06-11 23:00:00+07:00       6.385
2025-06-12 00:00:00+07:00      12.055
Статистика True Range:
  - Минимум: 1.9550
  - Максимум: 47.7550
  - Среднее: 8.8282
  - Медиана: 7.5275
[OK] Testing custom indicator completed successfully
================================================================================
[STEP] STEP 5: Шаг 5: Создание индикатора на основе PreloadedIndicator
---------------------------------------------------------------
[INFO] PreloadedIndicator - это базовый класс для встроенных индикаторов BQuant.
[INFO] 5.1. Создание индикатора 'Price Range' на основе PreloadedIndicator:
Создан индикатор PriceRangeIndicator:
  - Базовый класс: PreloadedIndicator
  - Выходные колонки: ['price_range_pct']
  - Описание: Price Range как процент от цены закрытия
[INFO] 5.2. Тестирование PriceRangeIndicator:
Результат расчета Price Range:
  - Размер данных: (1000, 1)
  - Колонки: ['price_range_pct']
Статистика Price Range (%):
  - Минимум: 0.0588%
  - Максимум: 1.4293%
  - Среднее: 0.2622%
[OK] Creating PreloadedIndicator completed successfully
================================================================================
[STEP] STEP 6: Шаг 6: Работа с IndicatorFactory
----------------------------------------
[INFO] IndicatorFactory - это фабрика для создания и управления индикаторами.
[INFO] 6.1. Регистрация пользовательских индикаторов:
Зарегистрированы индикаторы в фабрике:
  - true_range: <class '__main__.TrueRangeIndicator'>
  - price_range: <class '__main__.PriceRangeIndicator'>
[INFO] 6.2. Просмотр доступных индикаторов:
Доступные индикаторы в фабрике:
  - sma: custom
  - ema: custom
  - rsi: custom
  - macd: custom
  - bbands: custom
  - macd_preloaded: preloaded
  - pandas_ta_aberration: library
  - pandas_ta_accbands: library
  - pandas_ta_ad: library
  - pandas_ta_adosc: library
  - pandas_ta_adx: library
  - pandas_ta_alligator: library
  - pandas_ta_alma: library
  - pandas_ta_alphatrend: library
  - pandas_ta_amat: library
  - pandas_ta_ao: library
  - pandas_ta_aobv: library
  - pandas_ta_apo: library
  - pandas_ta_aroon: library
  - pandas_ta_atr: library
  - pandas_ta_atrts: library
  - pandas_ta_bbands: library
  - pandas_ta_bias: library
  - pandas_ta_bop: library
  - pandas_ta_brar: library
  - pandas_ta_candle_color: library
  - pandas_ta_cci: library
  - pandas_ta_cdl: library
  - pandas_ta_cdl_doji: library
  - pandas_ta_cdl_inside: library
  - pandas_ta_cdl_pattern: library
  - pandas_ta_cdl_z: library
  - pandas_ta_cfo: library
  - pandas_ta_cg: library
  - pandas_ta_chandelier_exit: library
  - pandas_ta_chop: library
  - pandas_ta_cksp: library
  - pandas_ta_cmf: library
  - pandas_ta_cmo: library
  - pandas_ta_coppock: library
  - pandas_ta_crsi: library
  - pandas_ta_cti: library
  - pandas_ta_decay: library
  - pandas_ta_decreasing: library
  - pandas_ta_dema: library
  - pandas_ta_dm: library
  - pandas_ta_donchian: library
  - pandas_ta_dpo: library
  - pandas_ta_drawdown: library
  - pandas_ta_ebsw: library
  - pandas_ta_efi: library
  - pandas_ta_ema: library
  - pandas_ta_entropy: library
  - pandas_ta_eom: library
  - pandas_ta_er: library
  - pandas_ta_eri: library
  - pandas_ta_exhc: library
  - pandas_ta_fisher: library
  - pandas_ta_fwma: library
  - pandas_ta_ha: library
  - pandas_ta_high_low_range: library
  - pandas_ta_hilo: library
  - pandas_ta_hl2: library
  - pandas_ta_hlc3: library
  - pandas_ta_hma: library
  - pandas_ta_ht_trendline: library
  - pandas_ta_hwc: library
  - pandas_ta_hwma: library
  - pandas_ta_ichimoku: library
  - pandas_ta_increasing: library
  - pandas_ta_inertia: library
  - pandas_ta_jma: library
  - pandas_ta_kama: library
  - pandas_ta_kc: library
  - pandas_ta_kdj: library
  - pandas_ta_kst: library
  - pandas_ta_kurtosis: library
  - pandas_ta_kvo: library
  - pandas_ta_linreg: library
  - pandas_ta_log_return: library
  - pandas_ta_ma: library
  - pandas_ta_macd: library
  - pandas_ta_mad: library
  - pandas_ta_mama: library
  - pandas_ta_massi: library
  - pandas_ta_mcgd: library
  - pandas_ta_median: library
  - pandas_ta_mfi: library
  - pandas_ta_midpoint: library
  - pandas_ta_midprice: library
  - pandas_ta_mom: library
  - pandas_ta_natr: library
  - pandas_ta_nvi: library
  - pandas_ta_obv: library
  - pandas_ta_ohlc4: library
  - pandas_ta_pdist: library
  - pandas_ta_percent_return: library
  - pandas_ta_pgo: library
  - pandas_ta_pivots: library
  - pandas_ta_ppo: library
  - pandas_ta_psar: library
  - pandas_ta_psl: library
  - pandas_ta_pvo: library
  - pandas_ta_pvol: library
  - pandas_ta_pvr: library
  - pandas_ta_pvt: library
  - pandas_ta_pwma: library
  - pandas_ta_qqe: library
  - pandas_ta_qstick: library
  - pandas_ta_quantile: library
  - pandas_ta_real_body: library
  - pandas_ta_reflex: library
  - pandas_ta_rma: library
  - pandas_ta_roc: library
  - pandas_ta_rsi: library
  - pandas_ta_rsx: library
  - pandas_ta_rvgi: library
  - pandas_ta_rvi: library
  - pandas_ta_rwi: library
  - pandas_ta_sinwma: library
  - pandas_ta_skew: library
  - pandas_ta_slope: library
  - pandas_ta_sma: library
  - pandas_ta_smc: library
  - pandas_ta_smi: library
  - pandas_ta_smma: library
  - pandas_ta_squeeze: library
  - pandas_ta_squeeze_pro: library
  - pandas_ta_ssf: library
  - pandas_ta_ssf3: library
  - pandas_ta_stc: library
  - pandas_ta_stdev: library
  - pandas_ta_stoch: library
  - pandas_ta_stochf: library
  - pandas_ta_stochrsi: library
  - pandas_ta_supertrend: library
  - pandas_ta_swma: library
  - pandas_ta_t3: library
  - pandas_ta_tema: library
  - pandas_ta_thermo: library
  - pandas_ta_tmo: library
  - pandas_ta_tos_stdevall: library
  - pandas_ta_trendflex: library
  - pandas_ta_trima: library
  - pandas_ta_trix: library
  - pandas_ta_true_range: library
  - pandas_ta_tsi: library
  - pandas_ta_tsv: library
  - pandas_ta_ttm_trend: library
  - pandas_ta_ui: library
  - pandas_ta_uo: library
  - pandas_ta_variance: library
  - pandas_ta_vhf: library
  - pandas_ta_vidya: library
  - pandas_ta_vortex: library
  - pandas_ta_vp: library
  - pandas_ta_vwap: library
  - pandas_ta_vwma: library
  - pandas_ta_wcp: library
  - pandas_ta_willr: library
  - pandas_ta_wma: library
  - pandas_ta_zigzag: library
  - pandas_ta_zlma: library
  - pandas_ta_zscore: library
  - true_range: custom
  - price_range: preloaded
[INFO] 6.3. Создание индикаторов через фабрику:
Индикаторы созданы через фабрику:
  - true_range: TrueRangeIndicator
  - price_range: PriceRangeIndicator
[INFO] 6.4. Получение информации об индикаторах:
Информация об индикаторе 'true_range':
  - Класс: N/A
  - Источник: custom
  - Описание: True Range - максимальный диапазон цены
Информация об индикаторе 'price_range':
  - Класс: N/A
  - Источник: preloaded
  - Описание: Price Range как процент от цены закрытия
[OK] Testing IndicatorFactory completed successfully
================================================================================
[STEP] STEP 7: Шаг 7: Демонстрация работы с LibraryManager
---------------------------------------------------
[INFO] LibraryManager предоставляет централизованное управление внешними библиотеками индикаторов.
[INFO] 7.1. Проверка доступности внешних библиотек:
Доступные библиотеки: ['pandas_ta', 'talib']
  - pandas_ta: доступна
    * Индикаторов: 158
    * Статус: True
  - talib: недоступна
[INFO] 7.2. Загрузка внешних библиотек:
Результаты загрузки библиотек: {'pandas_ta': 158, 'talib': 0}
[INFO] 7.3. Демонстрация создания индикатора через LibraryManager:
Создан библиотечный индикатор: PandasTARsi
  - Источник: library
  - Название: pandas_ta_rsi
  - Результат расчета: (1000, 1)
  - Колонки: ['RSI_14']
[INFO] 7.4. Демонстрация создания индикатора через IndicatorFactory:
Создан индикатор через IndicatorFactory: PandasTAMacd
  - Источник: library
  - Результат расчета: (1000, 3)
  - Колонки: ['MACD_12_26_9', 'MACDh_12_26_9', 'MACDs_12_26_9']
[OK] Testing LibraryManager completed successfully
================================================================================
[STEP] STEP 8: Шаг 8: Тестирование производительности
----------------------------------------------
[INFO] BaseIndicator поддерживает кэширование результатов для оптимизации производительности.
[INFO] 8.1. Тестирование производительности TrueRangeIndicator:
[INFO] 8.2. Первый расчет:
Первый расчет завершен за 0.0019 секунд
Размер результата: (1000, 1)
[INFO] 8.3. Второй расчет:
Второй расчет завершен за 0.0020 секунд
Время расчетов: 0.0019s / 0.0020s
Результаты расчетов идентичны: True
[INFO] 8.4. Примечание о кэшировании:
В новой архитектуре кэширование для CustomIndicator пока не реализовано.
Для оптимизации производительности используйте специализированные индикаторы или внешние библиотеки.
[OK] Testing caching functionality completed successfully
================================================================================
[STEP] STEP 9: Шаг 9: Создание комплексного индикатора
-----------------------------------------------
[INFO] Демонстрация создания комплексного индикатора, объединяющего несколько расчетов.
[INFO] 9.1. Создание комплексного индикатора 'Price Analysis':
Создан комплексный индикатор PriceAnalysisIndicator:
  - Название: PriceAnalysisIndicator
  - Выходные колонки: ['true_range', 'price_range_pct', 'price_change_pct', 'volatility']
  - Минимальные записи: 21
[INFO] 9.2. Тестирование комплексного индикатора:
Результат комплексного анализа цен:
  - Размер данных: (1000, 4)
  - Колонки: ['true_range', 'price_range_pct', 'price_change_pct', 'volatility']
  - Метаданные: {'calculation_method': 'comprehensive_price_analysis', 'components': ['true_range', 'price_range_pct', 'price_change_pct', 'volatility'], 'first_valid_index': Timestamp('2025-06-11 20:00:00+0700', tz='UTC+07:00'), 'last_valid_index': Timestamp('2025-08-12 13:00:00+0700', tz='UTC+07:00'), 'total_records': 1000}
Статистика комплексного анализа:
  - true_range:
    * Записей: 1000
    * Минимум: 1.9550
    * Максимум: 47.7550
    * Среднее: 8.8282
  - price_range_pct:
    * Записей: 1000
    * Минимум: 0.0588
    * Максимум: 1.4293
    * Среднее: 0.2622
  - price_change_pct:
    * Записей: 999
    * Минимум: -0.8514
    * Максимум: 1.2351
    * Среднее: 0.0008
  - volatility:
    * Записей: 980
    * Минимум: 0.0951
    * Максимум: 0.3393
    * Среднее: 0.1751
[OK] Creating complex indicator completed successfully
================================================================================
[STEP] STEP 10: Шаг 10: Тестирование валидации данных
----------------------------------------------
[INFO] BaseIndicator предоставляет встроенную валидацию данных для обеспечения корректности расчетов.
[INFO] 10.1. Тестирование валидации корректных данных:
Валидация корректных данных: True
[INFO] 10.2. Тестирование валидации некорректных данных:
Валидация некорректных данных: False
[INFO] 10.3. Тестирование валидации данных с недостаточным количеством записей:
Валидация коротких данных: False
[OK] Testing data validation completed successfully
================================================================================
[STEP] STEP 11: Шаг 11: Анализ архитектуры и производительности
--------------------------------------------------------
[INFO] Анализ созданной архитектуры индикаторов и оценка производительности.
[INFO] 11.1. Анализ архитектуры индикаторов:
Анализ созданных индикаторов:
  - TrueRangeIndicator:
    * Базовый класс: CustomIndicator
    * Источник: custom
    * Выходные колонки: 1
    * Минимальные записи: 2
  - PriceRangeIndicator:
    * Базовый класс: PreloadedIndicator
    * Источник: unknown
    * Выходные колонки: 0
    * Минимальные записи: 1
  - PriceAnalysisIndicator:
    * Базовый класс: CustomIndicator
    * Источник: custom
    * Выходные колонки: 4
    * Минимальные записи: 21
[INFO] 11.2. Оценка производительности:
Результаты производительности:
  - TrueRangeIndicator:
    * Время расчета: 0.0020 сек
    * Выходные колонки: 1
    * Записей: 1000
    * Скорость: 500000 записей/сек
  - PriceRangeIndicator:
    * Время расчета: 0.0012 сек
    * Выходные колонки: 1
    * Записей: 1000
    * Скорость: 843170 записей/сек
  - PriceAnalysisIndicator:
    * Время расчета: 0.0025 сек
    * Выходные колонки: 4
    * Записей: 1000
    * Скорость: 396040 записей/сек
[INFO] 11.3. Анализ использования памяти:
Анализ использования памяти:
  - TrueRangeIndicator:
    * Размер результата: 0.05 МБ
    * Колонок: 1
  - PriceRangeIndicator:
    * Размер результата: 0.05 МБ
    * Колонок: 1
  - PriceAnalysisIndicator:
    * Размер результата: 0.07 МБ
    * Колонок: 4
[OK] Analyzing architecture and performance completed successfully
================================================================================
[STEP] STEP 12: Заключение
------------------------------
[INFO] Мы протестировали все основные компоненты обновленной архитектуры индикаторов BQuant:
✅ IndicatorSource - источники индикаторов (PRELOADED, CUSTOM, LIBRARY)
✅ IndicatorConfig - конфигурация индикаторов
✅ IndicatorResult - результаты вычислений
✅ BaseIndicator - абстрактный базовый класс для всех индикаторов
✅ CustomIndicator - базовый класс для пользовательских индикаторов
✅ PreloadedIndicator - базовый класс для встроенных индикаторов
✅ LibraryIndicator - базовый класс для внешних библиотек
✅ IndicatorFactory - единая фабрика для создания всех типов индикаторов
✅ LibraryManager - централизованное управление внешними библиотеками
[INFO] Созданы и протестированы пользовательские индикаторы:
🔧 TrueRangeIndicator - индикатор истинного диапазона
🔧 PriceRangeIndicator - индикатор диапазона цен
🔧 PriceAnalysisIndicator - комплексный анализ цен
[INFO] Новая архитектура индикаторов BQuant предоставляет:
🏗️ Единообразный интерфейс для всех типов индикаторов
🏗️ Четкое разделение ответственности между типами индикаторов
🏗️ Централизованное управление внешними библиотеками через LibraryManager
🏗️ Автоматическое обнаружение и регистрацию индикаторов из pandas-ta
🏗️ Встроенную валидацию данных и обработку ошибок
🏗️ Гибкую систему создания пользовательских индикаторов
🏗️ Единую фабрику для создания индикаторов из любого источника
[INFO] Это демонстрирует мощь и гибкость обновленной архитектуры BQuant для работы с техническими индикаторами.

[END] Script finished successfully!
[END] Log ended: 2025-10-18 12:42:01
[TIME] Duration: 0:00:00.083488
