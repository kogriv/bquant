"""
–¢–µ—Å—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –≠—Ç–∞–ø 8

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:
- PRELOADED
- CUSTOM (BUILTIN)
- LIBRARY (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
"""

import pandas as pd
import numpy as np

def test_all_indicator_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –≠—Ç–∞–ø 8")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100),
        'macd': np.random.randn(100).cumsum(),
        'signal': np.random.randn(100).cumsum()
    }, index=dates)
    
    # 1. –¢–µ—Å—Ç PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    if not test_preloaded_indicators(test_data):
        return False
    
    # 2. –¢–µ—Å—Ç CUSTOM (BUILTIN) –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç CUSTOM (BUILTIN) –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    if not test_custom_indicators(test_data):
        return False
    
    # 3. –¢–µ—Å—Ç LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    if not test_library_indicators(test_data):
        return False
    
    # 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤:")
    if not test_integration(test_data):
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_preloaded_indicators(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        
        # –°–æ–∑–¥–∞–µ–º MACD PRELOADED
        macd_preloaded = IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal'])
        print(f"      MACD PRELOADED: {type(macd_preloaded).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
        result = macd_preloaded.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = macd_preloaded.get_statistics(test_data)
        print(f"        ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        trending_up = macd_preloaded.is_trending_up(test_data, column='macd')
        trending_down = macd_preloaded.is_trending_down(test_data, column='macd')
        print(f"        ‚úÖ –¢—Ä–µ–Ω–¥—ã: up={trending_up}, down={trending_down}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        crossovers = macd_preloaded.get_crossovers(test_data)
        print(f"        ‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {len(crossovers['bullish'])} –±—ã—á—å–∏—Ö, {len(crossovers['bearish'])} –º–µ–¥–≤–µ–∂—å–∏—Ö")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PRELOADED: {e}")
        return False


def test_custom_indicators(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CUSTOM (BUILTIN) –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ CUSTOM (BUILTIN) –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SMA
        sma = IndicatorFactory.create('custom', 'sma', period=20)
        print(f"      SMA(20): {type(sma).__name__}")
        
        result = sma.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        stats = sma.get_statistics(test_data)
        print(f"        ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º EMA
        ema = IndicatorFactory.create('custom', 'ema', period=20)
        print(f"      EMA(20): {type(ema).__name__}")
        
        result = ema.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RSI
        rsi = IndicatorFactory.create('custom', 'rsi', period=14)
        print(f"      RSI(14): {type(rsi).__name__}")
        
        result = rsi.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º MACD
        macd = IndicatorFactory.create('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
        print(f"      MACD(12,26,9): {type(macd).__name__}")
        
        result = macd.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Bollinger Bands
        bb = IndicatorFactory.create('custom', 'bbands', period=20, std_dev=2.0)
        print(f"      Bollinger Bands(20,2.0): {type(bb).__name__}")
        
        result = bb.calculate(test_data)
        print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CUSTOM: {e}")
        return False


def test_library_indicators(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å pandas-ta –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            sma_pandas_ta = IndicatorFactory.create('pandas_ta', 'sma', length=20)
            print(f"      pandas-ta SMA(20): {type(sma_pandas_ta).__name__}")
            
            result = sma_pandas_ta.calculate(test_data)
            print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
            if hasattr(sma_pandas_ta, 'native_indicator'):
                print(f"        ‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {type(sma_pandas_ta.native_indicator).__name__}")
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è pandas-ta SMA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å TA-Lib –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            sma_talib = IndicatorFactory.create('talib', 'sma', timeperiod=20)
            print(f"      TA-Lib SMA(20): {type(sma_talib).__name__}")
            
            result = sma_talib.calculate(test_data)
            print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
            if hasattr(sma_talib, 'native_indicator'):
                print(f"        ‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {type(sma_talib.native_indicator).__name__}")
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è TA-Lib SMA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LIBRARY: {e}")
        return False


def test_integration(test_data: pd.DataFrame) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    try:
        from bquant.indicators import IndicatorFactory
        
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
        indicators = {
            'PRELOADED': IndicatorFactory.create('preloaded', 'macd', required_columns=['macd', 'signal']),
            'CUSTOM_SMA': IndicatorFactory.create('custom', 'sma', period=20),
            'CUSTOM_EMA': IndicatorFactory.create('custom', 'ema', period=20),
            'CUSTOM_RSI': IndicatorFactory.create('custom', 'rsi', period=14),
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å LIBRARY –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            indicators['LIBRARY_PANDAS_TA'] = IndicatorFactory.create('pandas_ta', 'sma', length=20)
        except:
            pass
        
        try:
            indicators['LIBRARY_TALIB'] = IndicatorFactory.create('talib', 'sma', timeperiod=20)
        except:
            pass
        
        print(f"      –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(indicators)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for name, indicator in indicators.items():
            print(f"      {name}: {type(indicator).__name__}")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            is_valid = indicator.validate_data(test_data)
            print(f"        ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid}")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
            result = indicator.calculate(test_data)
            print(f"        ‚úÖ –†–∞—Å—á–µ—Ç: {len(result.data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = indicator.get_statistics(test_data)
            print(f"        ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert hasattr(result, 'data'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç data"
            assert hasattr(result, 'config'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç config"
            assert hasattr(result, 'metadata'), f"–†–µ–∑—É–ª—å—Ç–∞—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç metadata"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ IndicatorFactory
        print("      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ IndicatorFactory:")
        all_indicators = IndicatorFactory.list_indicators()
        print(f"        ‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(all_indicators)}")
        
        for source in ['preloaded', 'custom', 'library']:
            indicators_by_source = IndicatorFactory.get_indicators_by_source(source)
            print(f"        ‚úÖ {source}: {len(indicators_by_source)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    success = test_all_indicator_types()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
