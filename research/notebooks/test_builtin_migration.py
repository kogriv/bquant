"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –≠—Ç–∞–ø 4

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
"""

import pandas as pd
import numpy as np
from bquant.indicators.custom import (
    SimpleMovingAverage, ExponentialMovingAverage, 
    RelativeStrengthIndex, MACD, BollingerBands
)

def test_builtin_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞:")
    try:
        from bquant.indicators.custom import (
            SimpleMovingAverage, ExponentialMovingAverage, 
            RelativeStrengthIndex, MACD, BollingerBands
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ custom –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ custom: {e}")
        return False
    
    try:
        from bquant.indicators import (
            SimpleMovingAverage, ExponentialMovingAverage, 
            RelativeStrengthIndex, MACD, BollingerBands
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:")
    try:
        sma = SimpleMovingAverage()
        print(f"‚úÖ SMA —Å–æ–∑–¥–∞–Ω: {sma.name}")
        
        ema = ExponentialMovingAverage()
        print(f"‚úÖ EMA —Å–æ–∑–¥–∞–Ω: {ema.name}")
        
        rsi = RelativeStrengthIndex()
        print(f"‚úÖ RSI —Å–æ–∑–¥–∞–Ω: {rsi.name}")
        
        macd = MACD()
        print(f"‚úÖ MACD —Å–æ–∑–¥–∞–Ω: {macd.name}")
        
        bb = BollingerBands()
        print(f"‚úÖ Bollinger Bands —Å–æ–∑–¥–∞–Ω: {bb.name}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:")
    try:
        # SMA
        sma_cols = SimpleMovingAverage.get_default_columns()
        sma_info = SimpleMovingAverage.get_info()
        print(f"‚úÖ SMA - –∫–æ–ª–æ–Ω–∫–∏: {sma_cols}, —Ç–∏–ø: {sma_info['type']}")
        
        # EMA
        ema_cols = ExponentialMovingAverage.get_default_columns()
        ema_info = ExponentialMovingAverage.get_info()
        print(f"‚úÖ EMA - –∫–æ–ª–æ–Ω–∫–∏: {ema_cols}, —Ç–∏–ø: {ema_info['type']}")
        
        # RSI
        rsi_cols = RelativeStrengthIndex.get_default_columns()
        rsi_info = RelativeStrengthIndex.get_info()
        print(f"‚úÖ RSI - –∫–æ–ª–æ–Ω–∫–∏: {rsi_cols}, —Ç–∏–ø: {rsi_info['type']}")
        
        # MACD
        macd_cols = MACD.get_default_columns()
        macd_info = MACD.get_info()
        print(f"‚úÖ MACD - –∫–æ–ª–æ–Ω–∫–∏: {macd_cols}, —Ç–∏–ø: {macd_info['type']}")
        
        # Bollinger Bands
        bb_cols = BollingerBands.get_default_columns()
        bb_info = BollingerBands.get_info()
        print(f"‚úÖ BB - –∫–æ–ª–æ–Ω–∫–∏: {bb_cols}, —Ç–∏–ø: {bb_info['type']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    np.random.seed(42)
    
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(100).cumsum(),
        'high': 100 + np.random.randn(100).cumsum() + 2,
        'low': 100 + np.random.randn(100).cumsum() - 2,
        'close': 100 + np.random.randn(100).cumsum(),
        'volume': np.random.randint(1000, 10000, 100)
    }, index=dates)
    
    try:
        # –¢–µ—Å—Ç SMA
        sma_result = sma.calculate(test_data)
        print(f"‚úÖ SMA —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(sma_result.data.columns)}")
        
        # –¢–µ—Å—Ç EMA
        ema_result = ema.calculate(test_data)
        print(f"‚úÖ EMA —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(ema_result.data.columns)}")
        
        # –¢–µ—Å—Ç RSI
        rsi_result = rsi.calculate(test_data)
        print(f"‚úÖ RSI —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(rsi_result.data.columns)}")
        
        # –¢–µ—Å—Ç MACD
        macd_result = macd.calculate(test_data)
        print(f"‚úÖ MACD —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(macd_result.data.columns)}")
        
        # –¢–µ—Å—Ç Bollinger Bands
        bb_result = bb.calculate(test_data)
        print(f"‚úÖ BB —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏: {list(bb_result.data.columns)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
    try:
        sma_valid = sma.validate_data(test_data)
        ema_valid = ema.validate_data(test_data)
        rsi_valid = rsi.validate_data(test_data)
        macd_valid = macd.validate_data(test_data)
        bb_valid = bb.validate_data(test_data)
        
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è SMA: {sma_valid}")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è EMA: {ema_valid}")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è RSI: {rsi_valid}")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è MACD: {macd_valid}")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è BB: {bb_valid}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    try:
        sma_stats = sma.get_statistics(test_data)
        ema_stats = ema.get_statistics(test_data)
        rsi_stats = rsi.get_statistics(test_data)
        macd_stats = macd.get_statistics(test_data)
        bb_stats = bb.get_statistics(test_data)
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMA: {len(sma_stats)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EMA: {len(ema_stats)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RSI: {len(rsi_stats)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MACD: {len(macd_stats)} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BB: {len(bb_stats)} –∫–æ–ª–æ–Ω–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False
    
    # 7. –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤:")
    try:
        sma_trend_up = sma.is_trending_up(test_data)
        sma_trend_down = sma.is_trending_down(test_data)
        
        print(f"‚úÖ SMA —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö: {sma_trend_up}, —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑: {sma_trend_down}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        return False
    
    # 8. –¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    try:
        from bquant.indicators.base import CustomIndicator
        
        print(f"‚úÖ SMA –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CustomIndicator: {isinstance(sma, CustomIndicator)}")
        print(f"‚úÖ EMA –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CustomIndicator: {isinstance(ema, CustomIndicator)}")
        print(f"‚úÖ RSI –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CustomIndicator: {isinstance(rsi, CustomIndicator)}")
        print(f"‚úÖ MACD –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CustomIndicator: {isinstance(macd, CustomIndicator)}")
        print(f"‚úÖ BB –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CustomIndicator: {isinstance(bb, CustomIndicator)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_builtin_migration()
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 4: –ú–∏–≥—Ä–∞—Ü–∏—è BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 4: –ú–∏–≥—Ä–∞—Ü–∏—è BUILTIN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")
