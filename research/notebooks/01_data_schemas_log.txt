[LOG] Log started: 2025-09-02 12:51:54
[OUTPUT] Output will be written to: research\notebooks\01_data_schemas_log.txt
[>>] Starting Демонстрация работы модуля bquant.data.schemas
==================================================================
[SCRIPT] Демонстрация работы модуля bquant.data.schemas
[DATE] Started: 2025-09-02 12:51:54
==================================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных и создание проблемных данных
--------------------------------------------------------------------
[INFO] Для демонстрации валидации данных используем встроенные sample-данные и создадим проблемные данные.
[INFO] 1.1. Загружаем корректные sample-данные:
Колонка 'time' преобразована в DatetimeIndex
Загружено 1000 строк корректных данных
Структура: ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label']
Тип индекса: <class 'pandas.core.indexes.datetimes.DatetimeIndex'>
Диапазон дат: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
[OK] Loading sample data completed successfully
[INFO] 1.2. Создаем проблемные данные для демонстрации валидации:
Создано 1000 строк проблемных данных
Добавлены проблемы: логические ошибки OHLC, отрицательные цены, нулевые цены, отрицательный объем
[OK] Creating problematic data completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 2: Шаг 2: Работа с OHLCVRecord
-----------------------------------
[INFO] Класс OHLCVRecord предоставляет схему для валидации отдельных OHLCV записей.
[INFO] 2.1. Создание корректных OHLCV записей:
Создано 2 корректных OHLCV записей
  - Запись 1: ✅ Валидна
    * Timestamp: 2025-09-02 12:52:10.488626
    * OHLC: 3330.0/3340.0/3320.0/3335.0
    * Volume: 100000
  - Запись 2: ✅ Валидна
    * Timestamp: 2025-09-02 13:52:10.488647
    * OHLC: 3335.0/3350.0/3330.0/3345.0
    * Volume: 150000
[OK] Creating valid OHLCV records completed successfully
[INFO] 2.2. Создание проблемных OHLCV записей:
Создано 3 проблемных OHLCV записей
  - Запись 1: ❌ Невалидна
    * Timestamp: 2025-09-02 12:52:10.491044
    * OHLC: 3330.0/3320.0/3340.0/3335.0
    * Volume: 100000
  - Запись 2: ❌ Невалидна
    * Timestamp: 2025-09-02 13:52:10.491049
    * OHLC: -100.0/3350.0/3330.0/3345.0
    * Volume: 150000
  - Запись 3: ❌ Невалидна
    * Timestamp: 2025-09-02 14:52:10.491056
    * OHLC: 3330.0/3350.0/0.0/3345.0
    * Volume: -50000
[OK] Creating problematic OHLCV records completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 3: Шаг 3: Работа с DataSourceConfig
----------------------------------------
[INFO] Класс DataSourceConfig предоставляет конфигурацию для источников данных.
[INFO] 3.1. Создание конфигураций источников данных:
Создано 2 конфигурации источников данных:
  - TradingView:
    * Паттерн файлов: OANDA_{symbol}, {timeframe}.csv
    * Маппинг таймфреймов: 6
    * Провайдеры котировок: 3
    * Примеры маппинга: {'1m': '1', '5m': '5', '15m': '15'}
  - MetaTrader:
    * Паттерн файлов: {symbol}{timeframe}.csv
    * Маппинг таймфреймов: 6
    * Провайдеры котировок: 3
    * Примеры маппинга: {'1m': 'M1', '5m': 'M5', '15m': 'M15'}
[OK] Creating data source configurations completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 4: Шаг 4: Работа с базовым классом DataSchema
--------------------------------------------------
[INFO] Класс DataSchema - это базовый класс для создания пользовательских схем валидации.
[INFO] 4.1. Создание пользовательской схемы данных:
Создана пользовательская схема 'analysis':
  - Тип схемы: analysis
  - Обязательные поля: ['timestamp', 'price', 'signal']
  - Опциональные поля: ['confidence', 'volume']
  - Правила валидации: 3
Создан тестовый DataFrame для валидации: (2, 5)
Результат валидации:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 2, 'columns': 5}
[OK] Creating custom data schema completed successfully

============================================================
============================================================

================================================================================
[STEP] STEP 5: Шаг 5: Работа с OHLCVSchema
-----------------------------------
[INFO] OHLCVSchema предоставляет специализированную схему для валидации OHLCV данных.
[INFO] 5.1. Тестирование OHLCV схемы:
Детали OHLCV схемы:
  - Тип схемы: ohlcv
  - Обязательные поля: ['open', 'high', 'low', 'close']
  - Опциональные поля: ['volume']
  - Правила валидации: 5
[INFO] 5.2. Валидация корректных OHLCV данных:
Результат валидации корректных данных:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[INFO] 5.3. Валидация проблемных OHLCV данных:
Результат валидации проблемных данных:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[OK] Testing OHLCV schema completed successfully

============================================================
