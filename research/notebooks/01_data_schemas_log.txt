[LOG] Log started: 2025-10-22 12:58:09
[OUTPUT] Output will be written to: research\notebooks\01_data_schemas_log.txt
[>>] Starting Демонстрация работы модуля bquant.data.schemas
==================================================================
[SCRIPT] Демонстрация работы модуля bquant.data.schemas
[DATE] Started: 2025-10-22 12:58:09
==================================================================
================================================================================
[STEP] STEP 1: Шаг 1: Загрузка тестовых данных и создание проблемных данных
--------------------------------------------------------------------
[INFO] Для демонстрации валидации данных используем встроенные sample-данные и создадим проблемные данные.
[INFO] 1.1. Загружаем корректные sample-данные:
Колонка 'time' преобразована в DatetimeIndex
Загружено 1000 строк корректных данных
Структура: ['open', 'high', 'low', 'close', 'volume', 'accumulation_distribution', 'macd', 'signal', 'rsi', 'rsi_based_ma', 'regular_bullish', 'regular_bullish_label', 'regular_bearish', 'regular_bearish_label']
Тип индекса: <class 'pandas.core.indexes.datetimes.DatetimeIndex'>
Диапазон дат: 2025-06-11 20:00:00+07:00 - 2025-08-12 13:00:00+07:00
[OK] Loading sample data completed successfully
[INFO] 1.2. Создаем проблемные данные для демонстрации валидации:
Создано 1000 строк проблемных данных
Добавлены проблемы: логические ошибки OHLC, отрицательные цены, нулевые цены, отрицательный объем
[OK] Creating problematic data completed successfully
================================================================================
[STEP] STEP 2: Шаг 2: Работа с OHLCVRecord
-----------------------------------
[INFO] Класс OHLCVRecord предоставляет схему для валидации отдельных OHLCV записей.
[INFO] 2.1. Создание корректных OHLCV записей:
Создано 2 корректных OHLCV записей
  - Запись 1: ✅ Валидна
    * Timestamp: 2025-10-22 12:58:09.340596
    * OHLC: 3330.0/3340.0/3320.0/3335.0
    * Volume: 100000
  - Запись 2: ✅ Валидна
    * Timestamp: 2025-10-22 13:58:09.340602
    * OHLC: 3335.0/3350.0/3330.0/3345.0
    * Volume: 150000
[OK] Creating valid OHLCV records completed successfully
[INFO] 2.2. Создание проблемных OHLCV записей:
Создано 3 проблемных OHLCV записей
  - Запись 1: ❌ Невалидна
    * Timestamp: 2025-10-22 12:58:09.340782
    * OHLC: 3330.0/3320.0/3340.0/3335.0
    * Volume: 100000
  - Запись 2: ❌ Невалидна
    * Timestamp: 2025-10-22 13:58:09.340785
    * OHLC: -100.0/3350.0/3330.0/3345.0
    * Volume: 150000
  - Запись 3: ❌ Невалидна
    * Timestamp: 2025-10-22 14:58:09.340790
    * OHLC: 3330.0/3350.0/0.0/3345.0
    * Volume: -50000
[OK] Creating problematic OHLCV records completed successfully
================================================================================
[STEP] STEP 3: Шаг 3: Работа с DataSourceConfig
----------------------------------------
[INFO] Класс DataSourceConfig предоставляет конфигурацию для источников данных.
[INFO] 3.1. Создание конфигураций источников данных:
Создано 2 конфигурации источников данных:
  - TradingView:
    * Паттерн файлов: OANDA_{symbol}, {timeframe}.csv
    * Маппинг таймфреймов: 6
    * Провайдеры котировок: 3
    * Примеры маппинга: {'1m': '1', '5m': '5', '15m': '15'}
  - MetaTrader:
    * Паттерн файлов: {symbol}{timeframe}.csv
    * Маппинг таймфреймов: 6
    * Провайдеры котировок: 3
    * Примеры маппинга: {'1m': 'M1', '5m': 'M5', '15m': 'M15'}
[OK] Creating data source configurations completed successfully
================================================================================
[STEP] STEP 4: Шаг 4: Работа с базовым классом DataSchema
--------------------------------------------------
[INFO] Класс DataSchema - это базовый класс для создания пользовательских схем валидации.
[INFO] 4.1. Создание пользовательской схемы данных:
Создана пользовательская схема 'analysis':
  - Тип схемы: analysis
  - Обязательные поля: ['timestamp', 'price', 'signal']
  - Опциональные поля: ['confidence', 'volume']
  - Правила валидации: 3
Создан тестовый DataFrame для валидации: (2, 5)
Результат валидации:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 2, 'columns': 5}
[OK] Creating custom data schema completed successfully
================================================================================
[STEP] STEP 5: Шаг 5: Работа с OHLCVSchema
-----------------------------------
[INFO] OHLCVSchema предоставляет специализированную схему для валидации OHLCV данных.
[INFO] 5.1. Тестирование OHLCV схемы:
Детали OHLCV схемы:
  - Тип схемы: ohlcv
  - Обязательные поля: ['open', 'high', 'low', 'close']
  - Опциональные поля: ['volume']
  - Правила валидации: 5
[INFO] 5.2. Валидация корректных OHLCV данных:
Результат валидации корректных данных:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[INFO] 5.3. Валидация проблемных OHLCV данных:
Результат валидации проблемных данных:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[OK] Testing OHLCV schema completed successfully
================================================================================
[STEP] STEP 6: Шаг 6: Работа с IndicatorSchema
---------------------------------------
[INFO] IndicatorSchema предоставляет схемы для валидации технических индикаторов.
[INFO] 6.1. Тестирование MACD схемы:
Детали MACD схемы:
  - Тип схемы: indicators
  - Индикатор: macd
  - Обязательные поля: ['macd', 'macd_signal', 'macd_hist']
  - Правила валидации: 0
Создан тестовый DataFrame для MACD: (3, 3)
Результат валидации MACD:
  - Валидны: True
  - Проблемы: 0
  - Статистика: {'rows': 3, 'columns': 3}
[INFO] 6.2. Тестирование RSI схемы:
Детали RSI схемы:
  - Тип схемы: indicators
  - Индикатор: rsi
  - Обязательные поля: ['rsi']
  - Правила валидации: 1
Создан тестовый DataFrame для RSI: (5, 1)
Результат валидации RSI:
  - Валидны: True
  - Проблемы: 0
  - Статистика: {'rows': 5, 'columns': 1}
[OK] Testing indicator schemas completed successfully
================================================================================
[STEP] STEP 7: Шаг 7: Работа с функцией get_schema
-------------------------------------------
[INFO] Функция get_schema() позволяет получать предопределенные схемы по имени.
[INFO] 7.1. Получение доступных схем:
Доступные схемы: ['ohlcv', 'macd', 'rsi']
  - ohlcv: получена схема типа 'ohlcv'
  - macd: получена схема типа 'indicators'
  - rsi: получена схема типа 'indicators'
[INFO] 7.2. Тестирование получения несуществующей схемы:
Результат получения 'non_existent': None
[INFO] 7.3. Тестирование получения схемы 'ohlcv':
Получена схема OHLCV:
  - Тип: ohlcv
  - Обязательные поля: ['open', 'high', 'low', 'close']
  - Опциональные поля: ['volume']
[OK] Testing get_schema function completed successfully
================================================================================
[STEP] STEP 8: Шаг 8: Работа с функцией validate_with_schema
-----------------------------------------------------
[INFO] Функция validate_with_schema() позволяет валидировать DataFrame с помощью предопределенных схем.
[INFO] 8.1. Валидация данных с помощью схемы 'ohlcv':
Результат валидации корректных данных с 'ohlcv':
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
Результат валидации проблемных данных с 'ohlcv':
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[INFO] 8.2. Валидация данных с помощью схемы 'macd':
Результат валидации данных с 'macd':
  - Валидны: True
  - Проблемы: 0
  - Статистика: {'rows': 1000, 'columns': 14}
[INFO] 8.3. Тестирование валидации с несуществующей схемой:
Результат валидации с несуществующей схемой:
  - Валидны: False
  - Проблемы: ["Schema 'non_existent' not found"]
  - Рекомендации: ["Available schemas: ['ohlcv', 'macd', 'rsi']"]
[OK] Testing validate_with_schema function completed successfully
================================================================================
[STEP] STEP 9: Шаг 9: Создание комплексной схемы валидации
---------------------------------------------------
[INFO] Демонстрация создания комплексной схемы валидации для финансовых данных.
[INFO] 9.1. Создание комплексной схемы для финансовых данных:
Создана комплексная финансовая схема:
  - Тип схемы: financial_comprehensive
  - Обязательные поля: ['open', 'high', 'low', 'close']
  - Опциональные поля: ['volume', 'rsi', 'macd']
  - Правила валидации: 6
[INFO] 9.2. Тестирование комплексной схемы:
Создан тестовый DataFrame: (3, 7)
Результат валидации комплексной схемы:
  - Валидны: True
  - Проблемы: 0
  - Предупреждения: 0
  - Статистика: {'rows': 3, 'columns': 7}
[OK] Creating comprehensive validation schema completed successfully
================================================================================
[STEP] STEP 10: Шаг 10: Анализ результатов валидации
---------------------------------------------
[INFO] Анализ результатов валидации различных типов данных.
[INFO] 10.1. Сводка результатов валидации:
Результаты валидации по схемам:
  - OHLCV корректные: ✅ Валидны
    * Проблемы: 0
    * Предупреждения: 0
    * Статистика: {'rows': 1000, 'columns': 14}
  - OHLCV проблемные: ✅ Валидны
    * Проблемы: 0
    * Предупреждения: 0
    * Статистика: {'rows': 1000, 'columns': 14}
  - MACD тест: ✅ Валидны
    * Проблемы: 0
    * Предупреждения: 0
    * Статистика: {'rows': 1000, 'columns': 14}
  - RSI тест: ✅ Валидны
    * Проблемы: 0
    * Предупреждения: 0
    * Статистика: {'rows': 1000, 'columns': 14}
  - Комплексная схема: ✅ Валидны
    * Проблемы: 0
    * Предупреждения: 0
    * Статистика: {'rows': 3, 'columns': 7}
[INFO] 10.2. Анализ качества данных:
Качество sample данных:
  - Всего строк: 1000
  - Всего колонок: 14
  - Числовые колонки: 10
  - Пропущенные значения: 4000
  - Отрицательные цены: 0
  - Логические ошибки OHLC: 0
Качество проблемных данных:
  - Всего строк: 1000
  - Всего колонок: 14
  - Пропущенные значения: 4000
  - Отрицательные цены: 5
  - Логические ошибки OHLC: 5
[OK] Analyzing validation results completed successfully
================================================================================
[STEP] STEP 11: Заключение
------------------------------
[INFO] Мы протестировали все основные функции модуля bquant.data.schemas:
[OK] OHLCVRecord - валидация отдельных OHLCV записей
[OK] DataSourceConfig - конфигурация источников данных
[OK] DataSchema - базовый класс для создания схем
[OK] OHLCVSchema - специализированная схема для OHLCV данных
[OK] IndicatorSchema - схемы для технических индикаторов
[OK] get_schema() - получение предопределенных схем
[OK] validate_with_schema() - валидация DataFrame по схемам
[INFO] Модуль schemas успешно продемонстрировал:
[+] Создание и настройку схем валидации
[+] Валидацию различных типов финансовых данных
[+] Работу с конфигурацией источников данных
[+] Создание пользовательских схем валидации
[+] Анализ качества данных
[INFO] Это демонстрирует возможности системы валидации данных BQuant для обеспечения качества и консистентности финансовых данных.

[END] Script finished successfully!
[END] Log ended: 2025-10-22 12:58:09
[TIME] Duration: 0:00:00.055105
