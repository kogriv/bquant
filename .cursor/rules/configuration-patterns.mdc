# Configuration and Pattern Guidelines for BQuant

## Configuration Pattern
Use the centralized configuration system for all project settings:

```python
from bquant.core.config import get_data_path, get_indicator_params, PROJECT_ROOT

# Get configured paths
data_dir = get_data_path()

# Get indicator parameters
macd_params = get_indicator_params('macd')

# Access project constants
project_root = PROJECT_ROOT
```

## Key Configuration Functions
- **`get_data_path()`**: Returns configured data directory path
- **`get_indicator_params(indicator_name)`**: Returns parameters for specific indicators
- **`validate_timeframe(timeframe)`**: Validates timeframe strings
- **`PROJECT_ROOT`**: Project root directory constant
- **`DATA_DIR`**: Data directory constant

## Timeframe Mapping
The system uses universal timeframe mapping for different data providers:
- **Minutes**: `1m`, `5m`, `15m`, `30m`
- **Hours**: `1h`, `4h`, `12h`
- **Daily+**: `1d`, `1w`, `1M`

## Performance Monitoring Pattern
Use built-in performance monitoring for analysis functions:

```python
from bquant.core.performance import performance_monitor, performance_context

@performance_monitor
def my_analysis_function(data):
    # your analysis code
    pass

# Or use as context manager
with performance_context("My Operation"):
    # time-intensive code
    pass
```

## Caching Pattern
Use the two-level caching system for performance optimization:

```python
from bquant.core.cache import get_cache, set_cache

# Get cached result
result = get_cache('my_analysis_key')

if result is None:
    # Calculate and cache
    result = expensive_calculation()
    set_cache('my_analysis_key', result)
```

## Logging Pattern
Use the centralized logging configuration:

```python
from bquant.core.logging_config import get_logger

logger = get_logger(__name__)
logger.info("Processing data")
logger.error("Error occurred", exc_info=True)
```

## Exception Handling Pattern
Use the custom exception hierarchy:

```python
from bquant.core.exceptions import BQuantError, DataError, ValidationError

try:
    # risky operation
    process_data()
except DataError as e:
    logger.error(f"Data error: {e}")
    # handle data-specific errors
except ValidationError as e:
    logger.error(f"Validation error: {e}")
    # handle validation errors
except BQuantError as e:
    logger.error(f"General error: {e}")
    # handle general errors
```

## Configuration Best Practices
- Always use configuration functions instead of hardcoded values
- Validate all input parameters
- Use appropriate default values
- Cache configuration results when appropriate
- Log configuration changes for debugging
- Support environment variable overrides
description:
globs:
alwaysApply: true
---
