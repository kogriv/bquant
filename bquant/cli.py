"""
BQuant CLI Module

–ü—Ä–æ—Å—Ç–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π BQuant.
–†–∞–±–æ—Ç–∞–µ—Ç "–∏–∑ –∫–æ—Ä–æ–±–∫–∏" –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import argparse
import sys
from typing import Optional

from .core.logging_config import get_logger
from .data.samples import get_sample_data, list_datasets, print_sample_data_status
from .indicators import MACD
from .visualization import charts

logger = get_logger(__name__)


def analyze_macd(dataset_name: str = 'tv_xauusd_1h', output_file: Optional[str] = None, quiet: bool = False):
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ MACD –¥–ª—è sample –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        dataset_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        quiet: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    """
    try:
        if not quiet:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ MACD –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not quiet:
            print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data = get_sample_data(dataset_name)
        if not quiet:
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
        if not quiet:
            print("üìà –†–∞—Å—á–µ—Ç MACD...")
        macd = MACD()
        result = macd.calculate(data)
        if not quiet:
            print("   MACD —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        if not quiet:
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω —Å MACD
            fig = charts.create_price_chart(data, chart_type='line', title=f"Price Chart - {dataset_name}")
            
            if fig is None:
                if not quiet:
                    print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if output_file:
                html_file = output_file
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ results/charts
                from datetime import datetime
                import os
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                charts_dir = "results/charts"
                os.makedirs(charts_dir, exist_ok=True)
                html_file = os.path.join(charts_dir, f"chart_{dataset_name}_{timestamp}.html")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ HTML
            fig.write_html(html_file)
            if not quiet:
                print(f"   –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {html_file}")
            else:
                print(f"–ì—Ä–∞—Ñ–∏–∫: {html_file}")
                
        except Exception as e:
            if not quiet:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            
        if not quiet:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        if not quiet:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        else:
            print(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(f"MACD analysis failed: {e}")
        sys.exit(1)


def list_available_data():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö sample –¥–∞–Ω–Ω—ã—Ö."""
    try:
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ sample –¥–∞–Ω–Ω—ã–µ:")
        print("=" * 50)
        
        datasets = list_datasets()
        for i, dataset in enumerate(datasets, 1):
            print(f"{i}. {dataset['title']} ({dataset['name']})")
            print(f"   –°–∏–º–≤–æ–ª: {dataset['symbol']} | –¢–∞–π–º—Ñ—Ä–µ–π–º: {dataset['timeframe']}")
            print(f"   –ó–∞–ø–∏—Å–µ–π: {dataset['rows']:,} | –†–∞–∑–º–µ—Ä: {dataset['size_kb']} KB")
            print()
            
        print(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(datasets)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"Failed to list datasets: {e}")
        sys.exit(1)


def show_data_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö sample –¥–∞–Ω–Ω—ã—Ö."""
    try:
        print_sample_data_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        logger.error(f"Failed to show data status: {e}")
        sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="BQuant - Quantitative Research Toolkit",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  bquant analyze                    # –ê–Ω–∞–ª–∏–∑ MACD —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  bquant analyze mt_xauusd_m15     # –ê–Ω–∞–ª–∏–∑ MACD —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º
  bquant analyze --output chart.html  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª
  bquant analyze --quiet           # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
  bquant analyze -q -o chart.html  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª
  bquant list                      # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  bquant status                    # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ MACD')
    analyze_parser.add_argument(
        'dataset', 
        nargs='?', 
        default='tv_xauusd_1h',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: tv_xauusd_1h)'
    )
    analyze_parser.add_argument(
        '--output', '-o',
        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (HTML —Ñ–∞–π–ª)'
    )
    analyze_parser.add_argument(
        '--quiet', '-q',
        action='store_true',
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    subparsers.add_parser('status', help='–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'analyze':
            analyze_macd(args.dataset, args.output, args.quiet)
        elif args.command == 'list':
            list_available_data()
        elif args.command == 'status':
            show_data_status()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Unexpected error in CLI: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
