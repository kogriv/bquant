"""
Tests for BQuant core modules (Steps 1.2-1.3)

–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: config, exceptions, logging, utils, numpy_fix
"""

import pandas as pd
import numpy as np
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from bquant.core.config import (
    get_data_path, get_indicator_params, get_analysis_params, 
    validate_timeframe, get_results_path, SUPPORTED_TIMEFRAMES,
    DEFAULT_INDICATORS, ANALYSIS_CONFIG, LOGGING
)
from bquant.core.exceptions import (
    BQuantError, ConfigurationError, DataError, 
    IndicatorCalculationError, DataValidationError
)
from bquant.core.logging_config import get_logger, setup_logging
from bquant.core.utils import (
    calculate_returns, normalize_data, save_results,
    validate_ohlcv_columns, create_timestamp, memory_usage_info
)
from bquant.core.numpy_fix import apply_numpy_fixes


def test_config_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è config:")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    data_path = get_data_path('XAUUSD', '1h')
    assert isinstance(data_path, str) or hasattr(data_path, 'exists')
    
    print("[OK] get_data_path() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    macd_params = get_indicator_params('macd')
    assert isinstance(macd_params, dict)
    assert 'fast' in macd_params
    assert 'slow' in macd_params
    
    print("[OK] get_indicator_params() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    analysis_params = get_analysis_params('zone_analysis')
    assert isinstance(analysis_params, dict)
    assert 'min_duration' in analysis_params
    
    print("[OK] get_analysis_params() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    valid_timeframe = validate_timeframe('1h')
    assert valid_timeframe == '1h'
    
    print("[OK] validate_timeframe() –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    results_path = get_results_path('test_experiment')
    assert isinstance(results_path, str) or hasattr(results_path, 'exists')
    
    print("[OK] get_results_path() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    assert isinstance(SUPPORTED_TIMEFRAMES, dict)
    assert isinstance(DEFAULT_INDICATORS, dict)
    assert isinstance(ANALYSIS_CONFIG, dict)
    assert isinstance(LOGGING, dict)
    
    print("[OK] –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")


def test_exceptions_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è exceptions:")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    try:
        raise BQuantError("Test error", {'test': True})
    except BQuantError as e:
        assert "Test error" in str(e)
        assert e.details['test'] is True
    
    print("[OK] BQuantError —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    exceptions_to_test = [
        ConfigurationError("Config error"),
        DataError("Data error"),
        IndicatorCalculationError("Indicator error"),
        DataValidationError("Validation error")
    ]
    
    for exc in exceptions_to_test:
        assert isinstance(exc, BQuantError)
        assert len(str(exc)) > 0
    
    print("[OK] –í—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç BQuantError")


def test_logging_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è logging:")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
    logger = get_logger(__name__)
    assert logger is not None
    assert hasattr(logger, 'info')
    assert hasattr(logger, 'error')
    assert hasattr(logger, 'debug')
    
    print("[OK] get_logger() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(level='DEBUG')
    logger = get_logger('test_logger')
    logger.info("Test log message")
    
    print("[OK] setup_logging() –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è 'research'
    setup_logging(profile='research')
    research_logger = get_logger('bquant.data.test')
    research_logger.info("Research profile test message")
    print("[OK] –ü—Ä–æ—Ñ–∏–ª—å 'research' —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è 'clean'
    setup_logging(profile='clean')
    clean_logger = get_logger('bquant.indicators.test')
    clean_logger.info("Clean profile test message")
    print("[OK] –ü—Ä–æ—Ñ–∏–ª—å 'clean' —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è 'debug'
    setup_logging(profile='debug')
    debug_logger = get_logger('bquant.test')
    debug_logger.debug("Debug profile test message")
    print("[OK] –ü—Ä–æ—Ñ–∏–ª—å 'debug' —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    setup_logging(
        modules_config={
            'bquant.test.module1': {'console': 'WARNING', 'file': 'INFO'},
            'bquant.test.module2': {'console': 'ERROR', 'file': 'DEBUG'}
        }
    )
    module1_logger = get_logger('bquant.test.module1')
    module2_logger = get_logger('bquant.test.module2')
    module1_logger.info("Module1 test message")
    module2_logger.debug("Module2 test message")
    print("[OK] –ú–æ–¥—É–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:")
    setup_logging(
        profile='research',
        exceptions={
            'bquant.test.special': 'DEBUG'
        }
    )
    special_logger = get_logger('bquant.test.special')
    special_logger.debug("Special logger debug message")
    print("[OK] –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –¢–µ—Å—Ç LoggingConfigurator
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoggingConfigurator:")
    from bquant.core.logging_config import LoggingConfigurator
    
    configurator = LoggingConfigurator()
    configurator.preset('notebook', 'research').apply()
    configurator_logger = get_logger('bquant.test.configurator')
    configurator_logger.info("Configurator test message")
    print("[OK] LoggingConfigurator —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_utils_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —É—Ç–∏–ª–∏—Ç."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è utils:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_prices = pd.Series([100, 110, 105, 115, 120])
    test_data = pd.DataFrame({
        'open': [100, 110, 105, 115, 120],
        'high': [105, 115, 110, 120, 125],
        'low': [98, 108, 103, 113, 118],
        'close': [110, 105, 115, 120, 125]
    })
    
    # –¢–µ—Å—Ç calculate_returns
    returns = calculate_returns(test_prices)
    assert isinstance(returns, pd.Series)
    assert len(returns) == len(test_prices)
    
    print("[OK] calculate_returns() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç normalize_data
    normalized = normalize_data(test_data, method='zscore')
    assert isinstance(normalized, pd.DataFrame)
    assert normalized.shape == test_data.shape
    
    print("[OK] normalize_data() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç validate_ohlcv_columns
    validation = validate_ohlcv_columns(test_data)
    assert isinstance(validation, dict)
    assert 'is_valid' in validation
    
    print("[OK] validate_ohlcv_columns() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç create_timestamp
    timestamp = create_timestamp()
    assert isinstance(timestamp, str)
    assert len(timestamp) > 0
    
    print("[OK] create_timestamp() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç memory_usage_info
    memory_info = memory_usage_info(test_data)
    assert isinstance(memory_info, dict)
    assert 'total_memory_mb' in memory_info
    
    print("[OK] memory_usage_info() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_numpy_fix_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π NumPy."""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è numpy_fix:")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    apply_numpy_fixes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    # (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è)
    print("[OK] apply_numpy_fixes() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")


def run_core_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π BQuant (–®–∞–≥–∏ 1.2-1.3)...")
    print("=" * 60)
    
    test_functions = [
        test_config_module,
        test_exceptions_module,
        test_logging_module,
        test_utils_module,
        test_numpy_fix_module
    ]
    
    total_tests = 0
    passed_tests = 0
    
    for test_func in test_functions:
        total_tests += 1
        try:
            test_func()
            passed_tests += 1
        except Exception as e:
            print(f"[FAIL] {test_func.__name__}: FAILED - {e}")
    
    print("\n" + "=" * 60)
    print(f"[TARGET] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ë–ê–ó–û–í–´–• –ú–û–î–£–õ–ï–ô –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("[WARN] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False


if __name__ == "__main__":
    run_core_tests()
