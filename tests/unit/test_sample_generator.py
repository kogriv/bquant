"""
–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ embedded sample –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import tempfile
import os
from pathlib import Path

from bquant.data.samples import SampleDataGenerator


class TestSampleDataGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è SampleDataGenerator."""
    
    def test_generator_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
        generator = SampleDataGenerator()
        
        assert generator is not None
        assert hasattr(generator, 'data_sources')
        assert 'tv_xauusd_1h' in generator.data_sources
        assert 'mt_xauusd_m15' in generator.data_sources
        
        print("[OK] test_generator_creation: SampleDataGenerator —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_data_sources_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        generator = SampleDataGenerator()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for dataset_name, config in generator.data_sources.items():
            required_keys = ['name', 'description', 'source', 'symbol', 'timeframe', 
                           'data_source', 'quote_provider', 'rows', 'license', 'disclaimer']
            
            for key in required_keys:
                assert key in config, f"Missing key '{key}' in dataset '{dataset_name}'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
            assert isinstance(config['symbol'], str)
            assert isinstance(config['timeframe'], str)
            assert isinstance(config['rows'], int)
            assert config['rows'] > 0
        
        print("[OK] test_data_sources_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    def test_validate_source_files(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        generator = SampleDataGenerator()
        
        results = generator.validate_source_files()
        
        assert isinstance(results, dict)
        assert 'tv_xauusd_1h' in results
        assert 'mt_xauusd_m15' in results
        
        # –§–∞–π–ª—ã –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ, –Ω–æ –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        for dataset, exists in results.items():
            assert isinstance(exists, bool)
        
        print("[OK] test_validate_source_files: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_convert_value_type(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π."""
        generator = SampleDataGenerator()
        
        # –¢–µ—Å—Ç NaN –∑–Ω–∞—á–µ–Ω–∏–π
        assert generator._convert_value_type(None, 'test') is None
        assert generator._convert_value_type(float('nan'), 'test') is None
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert generator._convert_value_type('2025-01-01', 'time') == '2025-01-01'
        
        # –¢–µ—Å—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert generator._convert_value_type(123, 'close') == 123.0
        assert generator._convert_value_type('123.45', 'volume') == 123.45
        
        # –¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert generator._convert_value_type('test_string', 'symbol') == 'test_string'
        
        print("[OK] test_convert_value_type: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_identify_time_column(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏."""
        generator = SampleDataGenerator()
        
        # –¢–µ—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
        columns = ['open', 'high', 'time', 'close']
        assert generator._identify_time_column(columns) == 'time'
        
        # –¢–µ—Å—Ç —Å timestamp
        columns = ['open', 'timestamp', 'close']
        assert generator._identify_time_column(columns) == 'timestamp'
        
        # –¢–µ—Å—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        columns = ['open', 'high', 'low', 'close']
        assert generator._identify_time_column(columns) is None
        
        print("[OK] test_identify_time_column: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_generate_file_content(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
        generator = SampleDataGenerator()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        metadata = {
            'name': 'Test Dataset',
            'description': 'Test description',
            'source': 'Test Source',
            'symbol': 'TEST',
            'timeframe': '1h',
            'rows': 2,
            'columns': ['time', 'close'],
            'period_start': '2025-01-01',
            'period_end': '2025-01-02',
            'license': 'Test License',
            'disclaimer': 'Test Disclaimer',
            'updated': '2025-01-01 00:00:00',
            'extracted_from': 'test.csv'
        }
        
        data = [
            {'time': '2025-01-01T00:00:00', 'close': 100.0},
            {'time': '2025-01-01T01:00:00', 'close': 101.0}
        ]
        
        content = generator._generate_file_content('test_dataset', metadata, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        assert '"""' in content  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        assert 'from typing import Dict, List, Any' in content  # –ò–º–ø–æ—Ä—Ç—ã
        assert 'DATASET_INFO = ' in content  # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        assert 'DATA = [' in content  # –î–∞–Ω–Ω—ã–µ
        assert "'time': '2025-01-01T00:00:00'" in content  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert "'close': 100.0" in content
        
        print("[OK] test_generate_file_content: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_generate_embedded_file(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedded —Ñ–∞–π–ª–∞."""
        generator = SampleDataGenerator()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        metadata = {
            'name': 'Test Dataset',
            'description': 'Test description',
            'source': 'Test Source',
            'symbol': 'TEST',
            'timeframe': '1h',
            'rows': 1,
            'columns': ['time', 'close'],
            'period_start': '2025-01-01',
            'period_end': '2025-01-01',
            'license': 'Test License',
            'disclaimer': 'Test Disclaimer',
            'updated': '2025-01-01 00:00:00',
            'extracted_from': 'test.csv'
        }
        
        data = [{'time': '2025-01-01T00:00:00', 'close': 100.0}]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º embedded_dir
            original_dir = generator.embedded_dir
            generator.embedded_dir = Path(temp_dir)
            
            try:
                output_file = generator._generate_embedded_file('test_dataset', metadata, data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                assert output_file.exists()
                assert output_file.name == 'test_dataset.py'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = output_file.read_text(encoding='utf-8')
                assert 'DATASET_INFO = ' in content
                assert 'DATA = [' in content
                assert "'time': '2025-01-01T00:00:00'" in content
                
                print("[OK] test_generate_embedded_file: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedded —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                generator.embedded_dir = original_dir


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_generator = TestSampleDataGenerator()
    
    test_generator.test_generator_creation()
    test_generator.test_data_sources_config()
    test_generator.test_validate_source_files()
    test_generator.test_convert_value_type()
    test_generator.test_identify_time_column()
    test_generator.test_generate_file_content()
    test_generator.test_generate_embedded_file()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã SampleDataGenerator –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
