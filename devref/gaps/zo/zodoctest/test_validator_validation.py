import sys
import traceback
from pathlib import Path
from typing import Callable, Iterable, List, Tuple

import numpy as np
import pandas as pd


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

DOCUMENT_PATH = PROJECT_ROOT / "docs" / "api" / "data" / "validator.md"


def _print_result(title: str, success: bool) -> None:
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {title}")


def _build_dataframe(rows: int = 120) -> pd.DataFrame:
    index = pd.date_range("2024-01-01", periods=rows, freq="1h", name="time")
    base = np.linspace(100.0, 110.0, rows)
    wave = np.sin(np.linspace(0, 4 * np.pi, rows))

    return pd.DataFrame(
        {
            "open": base + wave,
            "high": base + wave + 0.6,
            "low": base + wave - 0.6,
            "close": base + 0.5 * wave,
            "volume": np.linspace(500, 900, rows),
        },
        index=index,
    )


def test_code_examples() -> bool:
    print("\nüß™ –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    try:
        from bquant.data.validator import (
            validate_ohlcv_data,
            validate_data_completeness,
            validate_price_consistency,
            validate_time_series_continuity,
            validate_statistical_properties,
        )
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ validator: {exc}")
        traceback.print_exc()
        return False

    df = _build_dataframe()

    try:
        overall = validate_ohlcv_data(df)
        completeness = validate_data_completeness(df)
        prices = validate_price_consistency(df)
        ts = validate_time_series_continuity(df, expected_frequency="1h")
        stats = validate_statistical_properties(df)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {exc}")
        traceback.print_exc()
        return False

    if not overall.get("stats") or "is_valid" not in overall:
        print("  ‚ùå validate_ohlcv_data –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False

    if not completeness.get("is_complete", True):
        print(f"  ‚ùå validate_data_completeness —Å–æ–æ–±—â–∏–ª –ø—Ä–æ–±–ª–µ–º—ã: {completeness}")
        return False

    if "price_issues" not in prices or "is_consistent" not in prices:
        print("  ‚ùå validate_price_consistency –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏")
        return False

    if ts.get("detected_frequency") not in {"h", "1h", "H", "1H"}:
        print(f"  ‚ùå validate_time_series_continuity —á–∞—Å—Ç–æ—Ç–∞: {ts}")
        return False

    if "statistics" not in stats or "outliers" not in stats:
        print("  ‚ùå validate_statistical_properties –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ statistics/outliers")
        return False

    print(
        "  ‚ÑπÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞:",
        f"is_valid={overall['is_valid']}, detected_freq={ts['detected_frequency']}",
    )
    return True


def test_cross_references() -> bool:
    print("\nüîó –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    targets: Iterable[Tuple[str, Path]] = [
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è validator", DOCUMENT_PATH),
    ]

    missing: List[str] = []
    for name, path in targets:
        if not path.exists():
            missing.append(name)

    if missing:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing}")
        return False

    if "validate_statistical_properties" not in DOCUMENT_PATH.read_text(encoding="utf-8"):
        print("  ‚ùå –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è validate_statistical_properties")
        return False

    print("  ‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    return True


def main() -> int:
    tests: Tuple[Tuple[str, Callable[[], bool]], ...] = (
        ("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞", test_code_examples),
        ("–°—Å—ã–ª–∫–∏", test_cross_references),
    )

    success = True
    for title, func in tests:
        result = func()
        _print_result(title, result)
        success &= result

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
