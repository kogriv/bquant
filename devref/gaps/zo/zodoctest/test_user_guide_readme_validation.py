#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ docs/user_guide/README.md –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ core_concepts.md.

–°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
- –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ README;
- —É–±–µ–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –±–ª–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π;
- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ core_concepts.md;
- –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ python-–ø—Ä–∏–º–µ—Ä—ã –∏–∑ core_concepts.md, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å.
"""

import os
import re
import sys
import textwrap
from pathlib import Path
from typing import Iterable, List

import pandas as pd  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞–±–∞—Ö –¥–ª—è pandas-ta

os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

PROJECT_ROOT = Path(__file__).resolve().parents[4]
sys.path.insert(0, str(PROJECT_ROOT))

README_PATH = PROJECT_ROOT / "docs/user_guide/README.md"
CORE_CONCEPTS_PATH = PROJECT_ROOT / "docs/user_guide/core_concepts.md"


def _prepare_pandas_ta(minimal_functions: Iterable[str] = ("rsi", "ao", "stoch")) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é pandas-ta –±–∞–∑–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

    try:
        from bquant.indicators.library import pandas_ta as pandas_ta_loader  # type: ignore
    except Exception:
        return

    try:
        import pandas_ta as ta  # type: ignore
    except Exception:
        return

    loader = pandas_ta_loader.PandasTALoader
    selected = {}
    for name in minimal_functions:
        func = getattr(ta, name, None)
        if func is not None:
            selected[name] = func

    if not selected:
        return

    loader._function_cache = selected  # type: ignore[attr-defined]
    loader._available_indicators = sorted(selected.keys())  # type: ignore[attr-defined]
    loader._indicators_registered = False  # type: ignore[attr-defined]


def _ensure_stub_zigzag_registered() -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π zigzag, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""

    try:
        from bquant.indicators.base import IndicatorFactory, LibraryIndicator  # type: ignore
    except Exception:
        return

    registry = getattr(IndicatorFactory, "_registry", {})
    if "pandas_ta_zigzag" in registry:
        return

    def _zigzag_stub(df: pd.DataFrame, **kwargs) -> pd.DataFrame:
        if isinstance(df, pd.DataFrame):
            series = df.get("close")
            if series is None:
                numeric = df.select_dtypes(include=["number"])
                series = numeric.iloc[:, 0] if not numeric.empty else pd.Series(dtype=float)
        else:
            series = pd.Series(df)

        return pd.DataFrame({"zigzag": series.to_numpy(copy=True)})

    class _StubZigZagIndicator(LibraryIndicator):
        def __init__(self, **params):
            super().__init__("zigzag", _zigzag_stub, parameters=params)

    IndicatorFactory.register_indicator("pandas_ta_zigzag", _StubZigZagIndicator)
    IndicatorFactory.register_library_function("pandas_ta_zigzag", _zigzag_stub)


def _extract_links(markdown_text: str) -> List[str]:
    pattern = re.compile(r"\[[^\]]+\]\(([^)]+)\)")
    return pattern.findall(markdown_text)


def _extract_python_blocks(markdown_text: str) -> List[str]:
    pattern = re.compile(r"```python\n(.*?)```", re.DOTALL)
    return [textwrap.dedent(block).strip() for block in pattern.findall(markdown_text)]


def test_navigation_links() -> bool:
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ README")
    content = README_PATH.read_text(encoding="utf-8")
    links = _extract_links(content)

    relative_links = [link for link in links if not link.startswith("http")]
    all_exist = True
    for link in relative_links:
        target_path = (README_PATH.parent / link).resolve()
        exists = target_path.exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {link} ‚Üí {target_path}")
        if not exists:
            all_exist = False

    return all_exist


def test_language_presence() -> bool:
    print("üó£Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    content = README_PATH.read_text(encoding="utf-8")
    russian_markers = ["—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–¥–∞–Ω–Ω—ã—Ö", "–∞–Ω–∞–ª–∏–∑", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"]
    found = sum(1 for marker in russian_markers if marker in content.lower())
    print(f"  –ù–∞–π–¥–µ–Ω–æ {found} —Ä—É—Å—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ {len(russian_markers)}")
    return found >= 3


def test_pip_command() -> bool:
    print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    content = README_PATH.read_text(encoding="utf-8")
    snippet = "pip install pandas numpy matplotlib seaborn plotly"
    has_command = snippet in content
    print(f"  –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if has_command else '‚ùå'}")
    return has_command


def test_universal_pipeline_mentions() -> bool:
    print("üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Universal Pipeline")
    content = README_PATH.read_text(encoding="utf-8")
    required_phrases = [
        "Universal Zone Analysis Pipeline v2.1",
        "Core Concepts",
        "macd",
    ]
    results = []
    for phrase in required_phrases:
        present = phrase.lower() in content.lower()
        status = "‚úÖ" if present else "‚ùå"
        print(f"  {status} '{phrase}'")
        results.append(present)
    return all(results)


def test_core_concepts_file_exists() -> bool:
    print("üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ core_concepts.md")
    exists = CORE_CONCEPTS_PATH.exists()
    print(f"  –§–∞–π–ª {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: {CORE_CONCEPTS_PATH}")
    return exists


def test_core_concepts_examples() -> bool:
    print("üß™ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ core_concepts.md")
    if not CORE_CONCEPTS_PATH.exists():
        print("  ‚ùå core_concepts.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    content = CORE_CONCEPTS_PATH.read_text(encoding="utf-8")
    code_blocks = _extract_python_blocks(content)

    if len(code_blocks) < 2:
        print("  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â• 2)")
        return False

    print("  ‚ñ∂Ô∏è –ü—Ä–∏–º–µ—Ä 1: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ZoneAnalysisConfig")
    globals_dict = {"__name__": "__main__"}
    locals_dict = {}
    exec(code_blocks[0], globals_dict, locals_dict)

    config = locals_dict.get("config")
    if config is None:
        print("  ‚ùå –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç config")
        return False

    checks = [
        config.zone_detection.strategy_name == "zero_crossing",
        config.indicator.name == "macd",
        config.perform_clustering is True,
        config.n_clusters == 3,
    ]
    if not all(checks):
        print("  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        return False
    print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    print("  ‚ñ∂Ô∏è –ü—Ä–∏–º–µ—Ä 2: –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    _prepare_pandas_ta()
    _ensure_stub_zigzag_registered()

    globals_dict_2 = {"__name__": "__main__"}
    locals_dict_2 = {}
    exec(code_blocks[1], globals_dict_2, locals_dict_2)

    result = locals_dict_2.get("result")
    if result is None:
        print("  ‚ùå –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç result")
        return False

    zones_count = len(getattr(result, "zones", []))
    stats = getattr(result, "statistics", {})
    clustering = getattr(result, "clustering", None)

    print(f"  üî¢ –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {zones_count}")
    print(f"  üìä –ö–ª—é—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {list(stats.keys())[:3]}")
    print(f"  üß© –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if clustering else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")

    return zones_count > 0 and isinstance(stats, dict) and clustering is not None


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/user_guide/README.md –∏ core_concepts.md")
    print("=" * 60)

    tests = [
        ("–°—Å—ã–ª–∫–∏ README", test_navigation_links),
        ("–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", test_language_presence),
        ("–ö–æ–º–∞–Ω–¥–∞ pip install", test_pip_command),
        ("Universal Pipeline –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", test_universal_pipeline_mentions),
        ("–ù–∞–ª–∏—á–∏–µ core_concepts.md", test_core_concepts_file_exists),
        ("–ü—Ä–∏–º–µ—Ä—ã core_concepts.md", test_core_concepts_examples),
    ]

    results = []
    for name, func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {name}")
        try:
            result = func()
        except Exception as exc:  # noqa: BLE001
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc}")
            result = False
        results.append((name, result))

    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–û–í:")
    passed = 0
    for name, status in results:
        flag = "‚úÖ" if status else "‚ùå"
        print(f"  {flag} {name}")
        if status:
            passed += 1

    total = len(results)
    print(f"\nüéØ –ò—Ç–æ–≥: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
