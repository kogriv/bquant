#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ docs/api/core/performance.md."""

from __future__ import annotations

import sys
import time
import traceback
from pathlib import Path
from typing import Dict, Iterable, Tuple

import numpy as np


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))


def _print_result(title: str, success: bool) -> None:
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {title}")


def test_monitoring_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–Ω–∏–ø–ø–µ—Ç —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @performance_monitor."""

    print("\nüìã –¢–µ—Å—Ç: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏")

    try:
        from bquant.core.performance import get_performance_monitor, performance_monitor
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    monitor = get_performance_monitor()
    monitor.clear_stats()

    @performance_monitor()
    def compute() -> None:
        import time as _time

        _time.sleep(0.2)

    try:
        compute()
        stats = monitor.get_stats()
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False
    finally:
        monitor.clear_stats()

    if not stats:
        print("  ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return False

    sample = next(iter(stats.values()))
    duration_ok = sample.get("total_time", 0) >= 0.2
    count_ok = sample.get("call_count") == 1
    print(f"  ‚ÑπÔ∏è total_time={sample.get('total_time'):.3f}, call_count={sample.get('call_count')}")
    return duration_ok and count_ok


def test_context_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–Ω–∏–ø–ø–µ—Ç —Å performance_context."""

    print("\nüìã –¢–µ—Å—Ç: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π")

    try:
        from bquant.core.performance import get_performance_monitor, performance_context
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    monitor = get_performance_monitor()
    monitor.clear_stats()

    def process() -> None:
        time.sleep(0.1)

    try:
        with performance_context("data_processing"):
            process()
        stats = monitor.get_stats("data_processing")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False
    finally:
        monitor.clear_stats()

    if not stats:
        print("  ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    duration_ok = stats.get("total_time", 0) >= 0.1
    count_ok = stats.get("call_count") == 1
    print(f"  ‚ÑπÔ∏è total_time={stats.get('total_time'):.3f}, call_count={stats.get('call_count')}")
    return duration_ok and count_ok


def test_optimized_indicators() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä —Å OptimizedIndicators."""

    print("\nüìã –¢–µ—Å—Ç: OptimizedIndicators (NumPy)")

    try:
        from bquant.core.performance import OptimizedIndicators
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç OptimizedIndicators –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    rng = np.random.default_rng(42)
    prices = rng.random(1000)

    try:
        sma = OptimizedIndicators.sma(prices, 20)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ SMA: {exc}")
        traceback.print_exc()
        return False

    length_ok = sma.shape == prices.shape
    leading_nans = np.isnan(sma[:19]).all()
    print(f"  ‚ÑπÔ∏è –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: {sma.shape[0]}, –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN: {leading_nans}")
    return length_ok and leading_nans


def test_benchmark_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–Ω–∏–ø–ø–µ—Ç —Å compare_implementations."""

    print("\nüìã –¢–µ—Å—Ç: –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π")

    try:
        from bquant.core.performance import compare_implementations
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç compare_implementations –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    impls = {
        "py_impl": lambda arr: float(sum(arr) / len(arr)),
        "np_impl": lambda arr: float(arr.mean()),
    }

    arr = np.random.rand(10_000)

    try:
        df = compare_implementations(impls, arr, iterations=20)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π: {exc}")
        traceback.print_exc()
        return False

    if df.empty:
        print("  ‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É—Å—Ç–∞")
        return False

    required_columns = {"implementation", "avg_time", "iterations"}
    missing = required_columns.difference(df.columns)
    print(f"  ‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∏: {sorted(df.columns)}")
    return not missing and df["iterations"].ge(1).all()


def test_language() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º."""

    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    path = Path("docs/api/core/performance.md")
    try:
        content = path.read_text(encoding="utf-8")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path}: {exc}")
        traceback.print_exc()
        return False

    russian_markers = ["–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–º–æ–Ω–∏—Ç–æ—Ä", "–±–µ–Ω—á–º–∞—Ä", "–∫–æ–Ω—Ç–µ–∫—Å—Ç"]
    markers_found = sum(1 for marker in russian_markers if marker in content.lower())
    code_blocks = content.count("```python")
    print(f"  ‚ÑπÔ∏è –†—É—Å—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {markers_found}, python-–±–ª–æ–∫–æ–≤: {code_blocks}")
    return markers_found >= len(russian_markers) - 1 and code_blocks >= 4


def run_all_tests() -> Iterable[Tuple[str, bool]]:
    yield "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏", test_monitoring_example()
    yield "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π", test_context_example()
    yield "OptimizedIndicators", test_optimized_indicators()
    yield "–ë–µ–Ω—á–º–∞—Ä–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π", test_benchmark_example()
    yield "–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞", test_language()


def main() -> int:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/performance.md")
    print("=" * 60)

    results: Dict[str, bool] = {}
    for title, success in run_all_tests():
        _print_result(title, success)
        results[title] = success

    all_passed = all(results.values())
    print("=" * 60)
    print("–ò—Ç–æ–≥: ", "‚úÖ –£–°–ü–ï–•" if all_passed else "‚ùå –ù–ï–£–°–ü–ï–•")
    return 0 if all_passed else 1


if __name__ == "__main__":
    raise SystemExit(main())

