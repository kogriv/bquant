#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/exceptions.md."""

import os
import sys
import traceback
from pathlib import Path
from typing import List, Tuple

import pandas as pd

# –£—Å–∫–æ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))


def test_class_hierarchy() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""

    print("üìã –¢–µ—Å—Ç: –ö–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π")

    try:
        from bquant.core.exceptions import (
            AnalysisError,
            BQuantError,
            ConfigurationError,
            DataError,
            DataLoadingError,
            DataProcessingError,
            DataValidationError,
            FeatureExtractionError,
            FileOperationError,
            IndicatorCalculationError,
            InvalidIndicatorParametersError,
            InvalidTimeframeError,
            MLError,
            ModelTrainingError,
            StatisticalAnalysisError,
            VisualizationError,
            ZoneAnalysisError,
        )
        from bquant.core.exceptions import NotImplementedError as BQuantNotImplementedError
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    checks: List[Tuple[str, bool]] = [
        ("DataError", issubclass(DataError, BQuantError)),
        ("DataValidationError", issubclass(DataValidationError, DataError)),
        ("DataLoadingError", issubclass(DataLoadingError, DataError)),
        ("DataProcessingError", issubclass(DataProcessingError, DataError)),
        ("ConfigurationError", issubclass(ConfigurationError, BQuantError)),
        ("InvalidTimeframeError", issubclass(InvalidTimeframeError, ConfigurationError)),
        (
            "InvalidIndicatorParametersError",
            issubclass(InvalidIndicatorParametersError, ConfigurationError),
        ),
        ("AnalysisError", issubclass(AnalysisError, BQuantError)),
        ("IndicatorCalculationError", issubclass(IndicatorCalculationError, AnalysisError)),
        ("ZoneAnalysisError", issubclass(ZoneAnalysisError, AnalysisError)),
        (
            "StatisticalAnalysisError",
            issubclass(StatisticalAnalysisError, AnalysisError),
        ),
        ("VisualizationError", issubclass(VisualizationError, BQuantError)),
        ("MLError", issubclass(MLError, BQuantError)),
        ("FeatureExtractionError", issubclass(FeatureExtractionError, MLError)),
        ("ModelTrainingError", issubclass(ModelTrainingError, MLError)),
        ("FileOperationError", issubclass(FileOperationError, BQuantError)),
        ("NotImplementedError", issubclass(BQuantNotImplementedError, BQuantError)),
    ]

    success = True
    for name, result in checks:
        print(f"  {'‚úÖ' if result else '‚ùå'} –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {name}")
        success &= result

    return success


def test_factory_and_context_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""

    print("\nüìã –¢–µ—Å—Ç: –§–∞–±—Ä–∏–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç")

    try:
        from bquant.core.exceptions import (
            BQuantError,
            BQuantErrorContext,
            DataValidationError,
            create_data_validation_error,
        )
        from bquant.core.logging_config import get_logger
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    try:
        try:
            raise create_data_validation_error(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", expected_type="DataFrame", actual_type="dict"
            )
        except DataValidationError as err:
            message = str(err)
            print(f"  ‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: {message}")
            factory_ok = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in message and "actual_type=dict" in message

        logger = get_logger(__name__)
        try:
            with BQuantErrorContext("load data", logger=logger):
                1 / 0
        except BQuantError as wrapped:
            print(f"  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {wrapped}")
            context_ok = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in str(wrapped)
        else:
            print("  ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª BQuantError")
            context_ok = False

        return factory_ok and context_ok
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False


def test_validators_examples() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    print("\nüìã –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã")

    try:
        from bquant.core.exceptions import (
            DataValidationError,
            InvalidIndicatorParametersError,
            InvalidTimeframeError,
            validate_indicator_parameters,
            validate_ohlcv_data,
            validate_timeframe,
        )
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    try:
        supported = ["1h", "4h"]
        validate_timeframe("1h", supported)
        try:
            validate_timeframe("2d", supported)
        except InvalidTimeframeError as err:
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {err}")
            timeframe_ok = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º" in str(err)
        else:
            print("  ‚ùå –ù–µ –≤—ã–±—Ä–æ—à–µ–Ω InvalidTimeframeError")
            timeframe_ok = False

        parameters = {"fast": 12, "slow": 26}
        validate_indicator_parameters("macd", parameters, ["fast", "slow"])
        try:
            validate_indicator_parameters("macd", {"fast": 12}, ["fast", "slow"])
        except InvalidIndicatorParametersError as err:
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {err}")
            indicator_ok = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" in str(err)
        else:
            print("  ‚ùå –ù–µ –≤—ã–±—Ä–æ—à–µ–Ω InvalidIndicatorParametersError")
            indicator_ok = False

        df = pd.DataFrame(
            {
                "open": [1.0, 2.0],
                "high": [1.5, 2.5],
                "low": [0.5, 1.5],
                "close": [1.2, 2.2],
            }
        )
        validate_ohlcv_data(df)
        try:
            validate_ohlcv_data(pd.DataFrame({"close": [1.0, 2.0]}))
        except DataValidationError as err:
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
            data_ok = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏" in str(err)
        else:
            print("  ‚ùå –ù–µ –≤—ã–±—Ä–æ—à–µ–Ω DataValidationError")
            data_ok = False

        return timeframe_ok and indicator_ok and data_ok
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {exc}")
        traceback.print_exc()
        return False


def test_language_and_format() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞."""

    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    doc_path = project_root / "docs" / "api" / "core" / "exceptions.md"
    try:
        content = doc_path.read_text(encoding="utf-8")
    except Exception as exc:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: {exc}")
        traceback.print_exc()
        return False

    cyrillic_markers = ["–ò—Å–∫–ª—é—á–µ–Ω–∏—è", "–§–∞–±—Ä–∏–∫–∏", "–ö–æ–Ω—Ç–µ–∫—Å—Ç", "–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã"]
    marker_hits = sum(1 for marker in cyrillic_markers if marker.lower() in content.lower())
    code_blocks = content.count("```python")

    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {marker_hits}")
    print(f"  ‚úÖ –ö–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {code_blocks}")

    return marker_hits == len(cyrillic_markers) and code_blocks == 1


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/exceptions.md")
    print("=" * 60)

    tests = [
        ("–ö–ª–∞—Å—Å—ã", test_class_hierarchy),
        ("–§–∞–±—Ä–∏–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç", test_factory_and_context_example),
        ("–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã", test_validators_examples),
        ("–Ø–∑—ã–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", test_language_and_format),
    ]

    results = []
    for name, func in tests:
        print(f"\n‚û°Ô∏è {name}")
        ok = func()
        results.append(ok)
        print(f"‚úîÔ∏è {name}: {'—É—Å–ø–µ—Ö' if ok else '–æ—à–∏–±–∫–∞'}")

    total = sum(1 for passed in results if passed)
    print("=" * 60)
    print(f"–ò—Ç–æ–≥–æ: {total}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return all(results)


if __name__ == "__main__":
    sys.exit(0 if main() else 1)

