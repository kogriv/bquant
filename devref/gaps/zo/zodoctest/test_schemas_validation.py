"""–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ docs/api/data/schemas.md."""

from __future__ import annotations

import sys
import traceback
from dataclasses import asdict
from pathlib import Path

import pandas as pd


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))


def _print_result(title: str, success: bool) -> None:
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {title}")


def test_imports_and_models() -> bool:
    print("\nüì¶ –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã –∏ –º–æ–¥–µ–ª–∏")

    try:
        from bquant.data import schemas
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è schemas: {exc}")
        traceback.print_exc()
        return False

    try:
        record = schemas.OHLCVRecord(
            timestamp=pd.Timestamp("2024-01-01T00:00:00Z").to_pydatetime(),
            open=1900.0,
            high=1905.0,
            low=1898.0,
            close=1902.0,
            volume=1_000.0,
        )
        if not record.validate():
            print("  ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è OHLCVRecord –≤–µ—Ä–Ω—É–ª–∞ False")
            return False

        config = schemas.DataSourceConfig(
            name="demo",
            file_pattern="*.csv",
            timeframe_mapping={"1h": "60"},
            quote_providers=["tradingview"],
        )
        config_payload = asdict(config)
        if config_payload["timeframe_mapping"].get("1h") != "60":
            print("  ‚ùå DataSourceConfig –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –º–∞–ø–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
            return False

        validation = schemas.ValidationResult(
            is_valid=True,
            issues=[],
            warnings=[],
            stats={"rows": 0},
            recommendations=["Schema validation is not yet implemented"],
        )
        if not validation.is_valid or "rows" not in validation.stats:
            print("  ‚ùå ValidationResult –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
            return False

        base_schema = schemas.DataSchema("demo")
        result = base_schema.validate_dataframe(pd.DataFrame())
        if not isinstance(result, schemas.ValidationResult):
            print("  ‚ùå validate_dataframe –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ValidationResult")
            return False
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
        traceback.print_exc()
        return False

    return True


def test_validate_with_schema_example() -> bool:
    print("\nüß™ –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä validate_with_schema")

    try:
        from bquant.data.schemas import validate_with_schema
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ validate_with_schema: {exc}")
        traceback.print_exc()
        return False

    df = pd.DataFrame(
        {
            "open": [1.0, 2.0],
            "high": [2.0, 3.0],
            "low": [1.0, 2.0],
            "close": [1.5, 2.5],
        }
    )

    try:
        result = validate_with_schema(df, "ohlcv")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print(f"  ‚ùå –ü—Ä–∏–º–µ—Ä validate_with_schema –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {exc}")
        traceback.print_exc()
        return False

    if not result.is_valid:
        print("  ‚ùå validate_with_schema –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å is_valid=True –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ df")
        return False

    expected_stats = {"rows": 2, "columns": 4}
    if result.stats != expected_stats:
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {expected_stats}, –ø–æ–ª—É—á–µ–Ω–æ {result.stats}")
        return False

    if "Schema validation is not yet implemented" not in result.recommendations:
        print("  ‚ùå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –∑–∞–≥–æ—Ç–æ–≤–∫–µ —Å—Ö–µ–º –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ recommendations")
        return False

    return True


def test_available_schemas_listing() -> bool:
    print("\nüìö –¢–µ—Å—Ç: –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ö–µ–º—ã")

    try:
        from bquant.data import schemas
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è schemas: {exc}")
        traceback.print_exc()
        return False

    expected_keys = {"ohlcv", "macd", "rsi"}
    available = getattr(schemas, "AVAILABLE_SCHEMAS", {})

    if set(available.keys()) != expected_keys:
        print(f"  ‚ùå AVAILABLE_SCHEMAS –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {expected_keys}, –ø–æ–ª—É—á–µ–Ω–æ {set(available.keys())}")
        return False

    if not isinstance(available["ohlcv"], schemas.OHLCVSchema):
        print("  ‚ùå AVAILABLE_SCHEMAS['ohlcv'] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º OHLCVSchema")
        return False

    macd_schema = available["macd"]
    rsi_schema = available["rsi"]
    if macd_schema.schema_type != "indicators" or rsi_schema.schema_type != "indicators":
        print("  ‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ —Å—Ö–µ–º—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç–∏–ø 'indicators'")
        return False

    if schemas.get_schema("bollinger_bands") is not None:
        print("  ‚ùå get_schema –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ö–µ–º—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏")
        return False

    ohlcv_result = schemas.validate_with_schema(
        pd.DataFrame(
            {
                "open": [10.0],
                "high": [10.5],
                "low": [9.8],
                "close": [10.2],
            }
        ),
        "ohlcv",
    )
    if not ohlcv_result.is_valid:
        print("  ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ validate_with_schema –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π")
        return False

    return True


def main() -> int:
    tests = (
        ("–ò–º–ø–æ—Ä—Ç—ã –∏ –º–æ–¥–µ–ª–∏", test_imports_and_models),
        ("–ü—Ä–∏–º–µ—Ä validate_with_schema", test_validate_with_schema_example),
        ("–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ö–µ–º—ã", test_available_schemas_listing),
    )

    results = []
    all_ok = True
    for title, func in tests:
        success = func()
        _print_result(title, success)
        results.append((title, success))
        all_ok &= success

    print("\n–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    for title, success in results:
        status = "OK" if success else "FAIL"
        print(f"  - {title}: {status}")

    return 0 if all_ok else 1


if __name__ == "__main__":
    raise SystemExit(main())
