"""–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ docs/api/data/README.md."""

from __future__ import annotations

import logging
import sys
import traceback
import warnings
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Callable, Iterable, List, Tuple

import numpy as np
import pandas as pd


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))


def _print_result(title: str, success: bool) -> None:
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {title}")


def _build_demo_dataframe(rows: int = 120) -> pd.DataFrame:
    """–°–æ–∑–¥–∞—ë—Ç OHLCV DataFrame, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    index = pd.date_range("2024-01-01", periods=rows, freq="H", name="time")
    base = np.linspace(1900.0, 1950.0, rows)
    oscillation = np.sin(np.linspace(0, 6 * np.pi, rows))
    close = base + oscillation
    open_ = close - 0.3
    high = np.maximum(open_, close) + 0.6
    low = np.minimum(open_, close) - 0.6
    volume = np.linspace(1_000, 1_500, rows)

    return pd.DataFrame(
        {
            "open": open_,
            "high": high,
            "low": low,
            "close": close,
            "volume": volume,
        },
        index=index,
    )


def test_loader_examples() -> bool:
    print("\nüì• –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    try:
        from bquant.data.loader import (
            load_ohlcv_data,
            load_symbol_data,
            load_xauusd_data,
        )
        from bquant.core.config import get_data_dir, set_data_dir
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ loader/config: {exc}")
        traceback.print_exc()
        return False

    demo_df = _build_demo_dataframe()

    with TemporaryDirectory() as tmp_dir:
        tmp_path = Path(tmp_dir)
        csv_path = tmp_path / "data.csv"
        demo_df.to_csv(csv_path)

        tradingview_file = tmp_path / "OANDA_XAUUSD, 60.csv"
        demo_df.to_csv(tradingview_file)

        original_dir = get_data_dir()
        try:
            set_data_dir(tmp_path)

            data = load_ohlcv_data(str(csv_path), symbol="XAUUSD", timeframe="1h")
            tv_data = load_symbol_data(
                "XAUUSD",
                "1h",
                data_source="tradingview",
                quote_provider="oanda",
            )
            xau = load_xauusd_data("1h")
        except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏: {exc}")
            traceback.print_exc()
            return False
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º runtime –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
            set_data_dir(original_dir)

    if data.empty or tv_data.empty or xau.empty:
        print("  ‚ùå –û–¥–∏–Ω –∏–∑ DataFrame –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º")
        return False

    if not list(data.columns)[:4] == ["open", "high", "low", "close"]:
        print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ data: {data.columns}")
        return False

    if not data.index.equals(tv_data.index) or not data.index.equals(xau.index):
        print("  ‚ùå –ò–Ω–¥–µ–∫—Å—ã DataFrame –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return False

    print(f"  ‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(data)}; timeframe: 1h")
    return True


def test_processor_examples() -> bool:
    print("\nüîÑ –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    try:
        from bquant.data.processor import (
            clean_ohlcv_data,
            prepare_data_for_analysis,
            resample_ohlcv,
        )
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ processor: {exc}")
        traceback.print_exc()
        return False

    demo_df = _build_demo_dataframe()

    try:
        clean_data = clean_ohlcv_data(
            demo_df,
            remove_outliers=True,
            fill_method="forward",
        )
        analysis_data = prepare_data_for_analysis(
            clean_data,
            add_tech_features=True,
            normalize=True,
        )
        hourly_data = resample_ohlcv(demo_df, "1H")
        daily_data = resample_ohlcv(demo_df, "1D")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {exc}")
        traceback.print_exc()
        return False

    if clean_data.empty or analysis_data.empty:
        print("  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—É—Å—Ç—ã–µ")
        return False

    if hourly_data.empty or daily_data.empty:
        print("  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –ø—É—Å—Ç—ã–µ")
        return False

    numeric_cols = analysis_data.select_dtypes(include=["number"])
    if numeric_cols.isna().all().all():
        print("  ‚ùå –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç NaN")
        return False

    print(
        "  ‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:",
        f"{list(numeric_cols.columns)[:5]} ‚Ä¶ (–≤—Å–µ–≥–æ {numeric_cols.shape[1]})",
    )
    return True


def test_validator_examples() -> bool:
    print("\n‚úÖ –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    try:
        from bquant.data.validator import (
            validate_ohlcv_data,
            validate_data_completeness,
        )
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ validator: {exc}")
        traceback.print_exc()
        return False

    demo_df = _build_demo_dataframe()

    try:
        validation_result = validate_ohlcv_data(demo_df)
        completeness = validate_data_completeness(demo_df)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {exc}")
        traceback.print_exc()
        return False

    if not validation_result.get("is_valid", False):
        print(f"  ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è OHLCV –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_result}")
        return False

    if not completeness.get("is_complete", False):
        print(f"  ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∞: {completeness}")
        return False

    print(
        f"  ‚ÑπÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(validation_result.get('warnings', []))}"
    )
    return True


def test_samples_examples() -> bool:
    print("\nüìä –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å sample –¥–∞–Ω–Ω—ã–º–∏")

    try:
        from bquant.data.samples import (
            SampleDataGenerator,
            convert_to_dataframe,
            convert_to_list_of_dicts,
            get_data_statistics,
            get_dataset_info,
            get_sample_data,
            list_datasets,
            list_dataset_names,
        )
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ samples: {exc}")
        traceback.print_exc()
        return False

    try:
        datasets_summary = list_datasets()
        dataset_names = list_dataset_names()
        info = get_dataset_info("tv_xauusd_1h")
        df = get_sample_data("tv_xauusd_1h")
        data_list = get_sample_data("tv_xauusd_1h", format="dict")
        df_converted = convert_to_dataframe(data_list, "tv_xauusd_1h")
        roundtrip_list = convert_to_list_of_dicts(df, "tv_xauusd_1h")
        stats = get_data_statistics("tv_xauusd_1h")
        generator = SampleDataGenerator()
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å sample –¥–∞–Ω–Ω—ã–º–∏: {exc}")
        traceback.print_exc()
        return False

    if not datasets_summary or not dataset_names:
        print("  ‚ùå –°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
        return False

    if info.get("symbol") != "XAUUSD":
        print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ: {info}")
        return False

    if df.empty or df_converted.empty:
        print("  ‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ DataFrame –ø—É—Å—Ç—ã–µ")
        return False

    if len(data_list) != len(roundtrip_list):
        print("  ‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞–ª–∞ —Ä–∞–∑–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
        return False

    if stats.get("total_records", 0) <= 0:
        print(f"  ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {stats}")
        return False

    if not isinstance(generator, object):  # pragma: no branch - –≥–∞—Ä–∞–Ω—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("  ‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä sample –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False

    print(
        "  ‚ÑπÔ∏è –î–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:",
        f"{len(dataset_names)}, –∑–∞–ø–∏—Å–µ–π –≤ tv_xauusd_1h: {stats.get('total_records')}",
    )
    return True


def test_logging_snippet() -> bool:
    print("\nü™µ –¢–µ—Å—Ç: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞")

    try:
        logging.getLogger("bquant.data").setLevel(logging.WARNING)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {exc}")
        traceback.print_exc()
        return False

    current_level = logging.getLogger("bquant.data").level
    print(f"  ‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–µ—Ä–∞ bquant.data: {current_level}")
    return current_level == logging.WARNING


def test_cross_references() -> bool:
    print("\nüîó –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ —Ä–∞–∑–¥–µ–ª–∞")

    targets: Iterable[Tuple[str, Path]] = [
        ("core logging", PROJECT_ROOT / "docs" / "api" / "core" / "logging.md"),
        ("core readme", PROJECT_ROOT / "docs" / "api" / "core" / "README.md"),
        ("indicators", PROJECT_ROOT / "docs" / "api" / "indicators" / "README.md"),
        ("analysis", PROJECT_ROOT / "docs" / "api" / "analysis" / "README.md"),
        ("visualization", PROJECT_ROOT / "docs" / "api" / "visualization" / "README.md"),
        ("loader", PROJECT_ROOT / "docs" / "api" / "data" / "loader.md"),
        ("processor", PROJECT_ROOT / "docs" / "api" / "data" / "processor.md"),
        ("validator", PROJECT_ROOT / "docs" / "api" / "data" / "validator.md"),
        ("schemas", PROJECT_ROOT / "docs" / "api" / "data" / "schemas.md"),
        ("samples", PROJECT_ROOT / "docs" / "api" / "data" / "samples.md"),
    ]

    missing: List[str] = []
    for name, path in targets:
        if not path.exists():
            missing.append(name)

    if missing:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing}")
        return False

    print("  ‚ÑπÔ∏è –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def main() -> int:
    warnings.filterwarnings("ignore", category=FutureWarning)
    warnings.filterwarnings("ignore", category=pd.errors.PerformanceWarning)

    tests: Tuple[Tuple[str, Callable[[], bool]], ...] = (
        ("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏", test_loader_examples),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_processor_examples),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_validator_examples),
        ("Sample –¥–∞–Ω–Ω—ã–µ", test_samples_examples),
        ("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_logging_snippet),
        ("Cross-reference", test_cross_references),
    )

    results = []
    all_ok = True
    for title, func in tests:
        success = func()
        _print_result(title, success)
        results.append((title, success))
        all_ok &= success

    print("\n–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    for title, success in results:
        status = "OK" if success else "FAIL"
        print(f"  - {title}: {status}")

    return 0 if all_ok else 1


if __name__ == "__main__":
    raise SystemExit(main())
