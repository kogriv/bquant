#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/api/analysis/base.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã, —Ñ–∞–±—Ä–∏–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import sys
import traceback
from pathlib import Path
from typing import Dict

import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))


def test_imports() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –º–æ–¥—É–ª—è."""

    print("üìã –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã")

    targets = [
        ("bquant.analysis", "AnalysisResult"),
        ("bquant.analysis", "BaseAnalyzer"),
        ("bquant.analysis", "get_available_analyzers"),
        ("bquant.analysis", "create_analyzer"),
        ("bquant.analysis", "SUPPORTED_ANALYSIS_TYPES"),
    ]

    success = 0
    for module_name, attr_name in targets:
        try:
            module = __import__(module_name, fromlist=[attr_name])
            getattr(module, attr_name)
            print(f"  ‚úÖ {module_name}.{attr_name}")
            success += 1
        except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
            print(f"  ‚ùå {module_name}.{attr_name}: {exc}")
            traceback.print_exc()

    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}/{len(targets)} –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return success == len(targets)


def test_example_from_docs() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–æ–¥–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    print("\nüìã –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä MyAnalyzer")

    try:
        from bquant.analysis import BaseAnalyzer, AnalysisResult
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã: {exc}")
        traceback.print_exc()
        return False

    class MyAnalyzer(BaseAnalyzer):
        def analyze(self, data: pd.DataFrame, **kwargs) -> AnalysisResult:
            if not self.validate_data(data):
                raise ValueError("Invalid data")
            return AnalysisResult(
                "my_analysis",
                results={"rows": len(data)},
                data_size=len(data),
            )

    try:
        analyzer = MyAnalyzer("MyAnalyzer")
        result = analyzer.analyze(pd.DataFrame({"close": list(range(1, 11))}))
        result_dict: Dict[str, object] = result.to_dict()
        print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result_dict}")
        return result_dict.get("results", {}).get("rows") == 10
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False


def test_factory_behaviour() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ–∞–±—Ä–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤."""

    print("\nüìã –¢–µ—Å—Ç: –§–∞–±—Ä–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤")

    try:
        import types
        from unittest import mock

        import bquant.analysis as analysis_module
        from bquant.analysis import create_analyzer, BaseAnalyzer
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏: {exc}")
        traceback.print_exc()
        return False

    try:
        fake_zones = types.ModuleType("bquant.analysis.zones")
        fake_zones.get_zone_analyzers = lambda: {"zones": "–ê–Ω–∞–ª–∏–∑ –∑–æ–Ω"}

        with mock.patch.dict(sys.modules, {"bquant.analysis.zones": fake_zones}):
            registry = analysis_module.get_available_analyzers()

        print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: {sorted(registry.keys())[:6]}")

        analyzer = create_analyzer("statistical")
        print(f"  ‚úÖ –§–∞–±—Ä–∏–∫–∞ –≤–µ—Ä–Ω—É–ª–∞: {analyzer.__class__.__name__}")
        return isinstance(analyzer, BaseAnalyzer) and "statistical" in registry
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏: {exc}")
        traceback.print_exc()
        return False


def test_cross_references() -> bool:
    """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""

    print("\nüìã –¢–µ—Å—Ç: Cross-references")

    references = [
        Path("docs/api/analysis/statistical.md"),
        Path("docs/api/analysis/zones.md"),
    ]

    success = 0
    for ref in references:
        if ref.exists():
            print(f"  ‚úÖ {ref}")
            success += 1
        else:
            print(f"  ‚ùå {ref} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    return success == len(references)


def test_language() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    try:
        content = Path("docs/api/analysis/base.md").read_text(encoding="utf-8")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {exc}")
        traceback.print_exc()
        return False

    russian_markers = ["–±–∞–∑–æ–≤—ã–µ", "–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", "—Ñ–∞–±—Ä–∏–∫–∞", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö"]
    found = sum(1 for marker in russian_markers if marker in content.lower())
    code_blocks = content.count("```python")

    print(f"  ‚úÖ –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {found}")
    print(f"  ‚úÖ Python-–±–ª–æ–∫–æ–≤: {code_blocks}")
    return found >= len(russian_markers) - 1 and code_blocks >= 1


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/analysis/base.md")
    print("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ü—Ä–∏–º–µ—Ä MyAnalyzer", test_example_from_docs),
        ("–§–∞–±—Ä–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤", test_factory_behaviour),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞", test_language),
    ]

    results = []
    for name, func in tests:
        print(f"\n‚û°Ô∏è {name}")
        ok = func()
        results.append(ok)
        print(f"‚úîÔ∏è {name}: {'—É—Å–ø–µ—Ö' if ok else '–æ—à–∏–±–∫–∞'}")

    total = sum(results)
    print("=" * 60)
    print(f"–ò—Ç–æ–≥–æ: {total}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return all(results)


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
