#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/api/README.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ docs/api/README.md
–°–æ–∑–¥–∞–Ω: 2025-10-24
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath('.'))

def test_real_examples_from_docs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã –∏–∑ docs/api/README.md"""
    print("üìã –¢–µ—Å—Ç: –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    examples_to_test = [
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
        ('bquant.indicators.base', 'BaseIndicator'),
        ('bquant.indicators.base', 'IndicatorFactory'),
        ('bquant.indicators.base', 'PreloadedIndicator'),  # –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è PRELOADED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ('bquant.indicators.preloaded', 'MACDPreloadedIndicator'),
        ('bquant.indicators.macd', 'MACDZoneAnalyzer'),  # Deprecated, –Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        
        # Universal Zone Analysis
        ('bquant.analysis.zones', 'analyze_zones'),
        ('bquant.analysis.zones', 'ZoneAnalysisBuilder'),
        ('bquant.analysis.zones', 'UniversalZoneAnalyzer'),
        ('bquant.analysis.statistical', 'run_all_hypothesis_tests'),
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        ('bquant.visualization.charts', 'FinancialCharts'),
        ('bquant.visualization.zones', 'ZoneVisualizer'),
        ('bquant.visualization.statistical', 'StatisticalPlots'),
        
        # –§—É–Ω–∫—Ü–∏–∏
        ('bquant.data.loader', 'load_ohlcv_data'),
        ('bquant.data.samples', 'get_sample_data'),
        ('bquant.data.processor', 'clean_ohlcv_data'),
        ('bquant.visualization.charts', 'create_candlestick_chart'),
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        ('bquant.core.exceptions', 'BQuantError'),
        ('bquant.core.exceptions', 'DataError'),
        ('bquant.core.exceptions', 'AnalysisError'),
        ('bquant.core.exceptions', 'VisualizationError'),
    ]
    
    results = []
    for module_path, function_name in examples_to_test:
        try:
            module = __import__(module_path, fromlist=[function_name])
            if hasattr(module, function_name):
                print(f"  ‚úÖ {module_path}.{function_name}")
                results.append(True)
            else:
                print(f"  ‚ùå {module_path}.{function_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results.append(False)
        except ImportError as e:
            print(f"  ‚ùå {module_path}.{function_name}: {e}")
            results.append(False)
    
    return all(results)

def test_deprecated_warning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º deprecated –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è MACDZoneAnalyzer"""
    print("\nüìã –¢–µ—Å—Ç: Deprecated –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    
    try:
        from bquant.indicators.macd import MACDZoneAnalyzer
        analyzer = MACDZoneAnalyzer()
        print("  ‚úÖ MACDZoneAnalyzer –¥–æ—Å—Ç—É–ø–µ–Ω (deprecated)")
        return True
    except Exception as e:
        print(f"  ‚ùå MACDZoneAnalyzer: {e}")
        return False

def test_universal_pipeline_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä Universal Pipeline –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Universal Pipeline –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Universal Pipeline (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        result = (
            analyze_zones(data)
            .with_indicator('pandas_ta', 'rsi', length=14)
            .detect_zones('threshold', indicator_col='rsi', 
                         upper_threshold=70, lower_threshold=30)
            .analyze(clustering=False)
            .build()
        )
        
        print(f"  ‚úÖ Universal Pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"     –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(result.zones)}")
        return True
    except Exception as e:
        print(f"  ‚ùå Universal Pipeline: {e}")
        return False

def test_load_ohlcv_data_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é load_ohlcv_data –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: load_ohlcv_data —Ñ—É–Ω–∫—Ü–∏—è")
    
    try:
        from bquant.data.loader import load_ohlcv_data
        import tempfile
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π)
        periods = 120  # –ë–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞ –≤ 100 –∑–∞–ø–∏—Å–µ–π
        test_data = pd.DataFrame({
            'time': pd.date_range('2023-01-01', periods=periods, freq='1H'),
            'open': [100 + i*0.1 for i in range(periods)],
            'high': [101 + i*0.1 for i in range(periods)],
            'low': [99 + i*0.1 for i in range(periods)],
            'close': [100.5 + i*0.1 for i in range(periods)],
            'volume': [1000 + i*10 for i in range(periods)]
        })
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            test_data.to_csv(f.name, index=False)
            temp_file = f.name
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            loaded_data = load_ohlcv_data(temp_file)
            print(f"  ‚úÖ load_ohlcv_data —Ä–∞–±–æ—Ç–∞–µ—Ç: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"     –ö–æ–ª–æ–Ω–∫–∏: {list(loaded_data.columns)}")
            return True
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.unlink(temp_file)
            
    except Exception as e:
        print(f"  ‚ùå load_ohlcv_data: {e}")
        return False

def test_clean_ohlcv_data_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é clean_ohlcv_data –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: clean_ohlcv_data —Ñ—É–Ω–∫—Ü–∏—è")
    
    try:
        from bquant.data.processor import clean_ohlcv_data
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        cleaned_data = clean_ohlcv_data(data)
        print(f"  ‚úÖ clean_ohlcv_data —Ä–∞–±–æ—Ç–∞–µ—Ç: –æ—á–∏—â–µ–Ω–æ {len(cleaned_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"     –ò—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        return True
    except Exception as e:
        print(f"  ‚ùå clean_ohlcv_data: {e}")
        return False

def test_preloaded_indicator_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å PreloadedIndicator –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: PreloadedIndicator –∫–ª–∞—Å—Å")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PreloadedIndicator –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è (base)
        from bquant.indicators.base import PreloadedIndicator
        from bquant.indicators.preloaded import MACDPreloadedIndicator
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MACDPreloadedIndicator
        macd_indicator = MACDPreloadedIndicator()
        print(f"  ‚úÖ MACDPreloadedIndicator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        base_class = MACDPreloadedIndicator.__bases__[0]
        print(f"  ‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å MACDPreloadedIndicator: {base_class.__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PreloadedIndicator –¥–æ—Å—Ç—É–ø–µ–Ω
        print(f"  ‚úÖ PreloadedIndicator –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ bquant.indicators.base")
        
        return True
    except Exception as e:
        print(f"  ‚ùå PreloadedIndicator: {e}")
        return False

def test_actual_macd_examples():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å MACD –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã MACD")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç 1: Universal Pipeline —Å custom MACD
        result1 = (
            analyze_zones(data)
            .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
            .detect_zones('zero_crossing', indicator_col='macd_hist')
            .with_strategies(swing='find_peaks', shape='statistical')
            .analyze(clustering=True, n_clusters=3)
            .build()
        )
        
        print(f"  ‚úÖ Custom MACD —á–µ—Ä–µ–∑ Universal Pipeline: {len(result1.zones)} –∑–æ–Ω")
        
        # –¢–µ—Å—Ç 2: PRELOADED MACD
        result2 = (
            analyze_zones(data)
            .with_indicator('preloaded', 'macd_preloaded')
            .detect_zones('zero_crossing', indicator_col='macd')
            .analyze(clustering=False)
            .build()
        )
        
        print(f"  ‚úÖ PRELOADED MACD —á–µ—Ä–µ–∑ Universal Pipeline: {len(result2.zones)} –∑–æ–Ω")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã MACD: {e}")
        return False

def test_cross_references():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º cross-references –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Cross-references")
    
    references_to_check = [
        'docs/api/core/README.md',
        'docs/api/data/README.md',
        'docs/api/indicators/README.md',
        'docs/api/analysis/README.md',
        'docs/api/visualization/README.md',
        'docs/api/extension_guide.md',
    ]
    
    results = []
    for ref_path in references_to_check:
        exists = os.path.exists(ref_path)
        status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        print(f"  {ref_path}: {status}")
        results.append(exists)
    
    return all(results)

def test_language_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")
    
    try:
        with open('docs/api/README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        russian_words = ['—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '–º–æ–¥—É–ª–∏', '–∫–ª–∞—Å—Å—ã', '—Ñ—É–Ω–∫—Ü–∏–∏', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
        found_russian = sum(1 for word in russian_words if word in content.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –∫–æ–¥–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        code_blocks = content.count('```')
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤: {found_russian}")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞: {code_blocks}")
        print("  ‚úÖ –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: —Ä—É—Å—Å–∫–∏–π (–∫–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        
        return found_russian > 0
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/README.md (–†–ï–ê–õ–¨–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã)")
    print("=" * 60)
    
    tests = [
        ("–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", test_real_examples_from_docs),
        ("load_ohlcv_data —Ñ—É–Ω–∫—Ü–∏—è", test_load_ohlcv_data_function),
        ("clean_ohlcv_data —Ñ—É–Ω–∫—Ü–∏—è", test_clean_ohlcv_data_function),
        ("PreloadedIndicator –∫–ª–∞—Å—Å", test_preloaded_indicator_class),
        ("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã MACD", test_actual_macd_examples),
        ("Universal Pipeline –ø—Ä–∏–º–µ—Ä", test_universal_pipeline_example),
        ("Deprecated –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", test_deprecated_warning),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞", test_language_check),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
