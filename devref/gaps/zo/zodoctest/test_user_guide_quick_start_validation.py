#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ docs/user_guide/quick_start.md."""

from __future__ import annotations

import os
import re
import sys
import textwrap
from pathlib import Path
from typing import Dict, Iterable, List, Tuple

import pandas as pd

os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

PROJECT_ROOT = Path(__file__).resolve().parents[4]
sys.path.insert(0, str(PROJECT_ROOT))

QUICK_START_PATH = PROJECT_ROOT / "docs/user_guide/quick_start.md"


def _extract_links(markdown_text: str) -> List[str]:
    pattern = re.compile(r"\[[^\]]+\]\(([^)]+)\)")
    return pattern.findall(markdown_text)


def _extract_python_blocks(markdown_text: str) -> List[str]:
    pattern = re.compile(r"```python\n(.*?)```", re.DOTALL)
    return [textwrap.dedent(block).strip() for block in pattern.findall(markdown_text)]


def _prepare_pandas_ta(minimal_functions: Iterable[str] = ("rsi",)) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é pandas-ta –±–∞–∑–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

    try:
        from bquant.indicators.library import pandas_ta as pandas_ta_loader  # type: ignore
    except Exception:  # noqa: BLE001
        return

    try:
        import pandas_ta as ta  # type: ignore
    except Exception:  # noqa: BLE001
        return

    loader = pandas_ta_loader.PandasTALoader
    selected: Dict[str, object] = {}
    for name in minimal_functions:
        func = getattr(ta, name, None)
        if func is not None:
            selected[name] = func

    if not selected:
        return

    loader._function_cache = selected  # type: ignore[attr-defined]
    loader._available_indicators = sorted(selected.keys())  # type: ignore[attr-defined]
    loader._indicators_registered = False  # type: ignore[attr-defined]


def _ensure_stub_zigzag_registered() -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π zigzag, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""

    try:
        from bquant.indicators.base import IndicatorFactory, LibraryIndicator  # type: ignore
    except Exception:  # noqa: BLE001
        return

    registry = getattr(IndicatorFactory, "_registry", {})
    if "pandas_ta_zigzag" in registry:
        return

    def _zigzag_stub(df: pd.DataFrame, **kwargs: object) -> pd.DataFrame:
        if isinstance(df, pd.DataFrame):
            series = df.get("close")
            if series is None:
                numeric = df.select_dtypes(include=["number"])
                series = numeric.iloc[:, 0] if not numeric.empty else pd.Series(dtype=float)
        else:
            series = pd.Series(df)

        return pd.DataFrame({"zigzag": series.to_numpy(copy=True)})

    class _StubZigZagIndicator(LibraryIndicator):  # type: ignore[misc]
        def __init__(self, **params: object) -> None:
            super().__init__("zigzag", _zigzag_stub, parameters=params)

    IndicatorFactory.register_indicator("pandas_ta_zigzag", _StubZigZagIndicator)
    IndicatorFactory.register_library_function("pandas_ta_zigzag", _zigzag_stub)


def test_relative_links() -> bool:
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ quick_start.md")
    content = QUICK_START_PATH.read_text(encoding="utf-8")
    links = _extract_links(content)

    relative_links = [link for link in links if not link.startswith("http") and not link.startswith("mailto:")]
    all_exist = True
    for link in relative_links:
        target = link.split("#", 1)[0]
        if not target:
            continue
        target_path = (QUICK_START_PATH.parent / target).resolve()
        exists = target_path.exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {link} ‚Üí {target_path}")
        if not exists:
            all_exist = False

    return all_exist


def test_language_presence() -> bool:
    print("üó£Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫")
    content = QUICK_START_PATH.read_text(encoding="utf-8")
    markers = ["–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "–∞–Ω–∞–ª–∏–∑", "–∑–æ–Ω—ã", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–≥–∏–¥"]
    found = sum(1 for marker in markers if marker in content.lower())
    print(f"  –ù–∞–π–¥–µ–Ω–æ {found} –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ {len(markers)}")
    return found >= 3


def _execute_python_examples(code_blocks: List[str]) -> Tuple[Dict[str, object], Dict[str, object]]:
    """–í—ã–ø–æ–ª–Ω—è–µ–º python-–±–ª–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""

    import plotly.io as pio  # noqa: WPS433
    from plotly.graph_objs import Figure  # noqa: WPS433

    pio.renderers.default = "json"

    original_show = Figure.show

    def _patched_show(self, *args, **kwargs):  # noqa: ANN001, D401
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ."""

        print("  üìà Figure.show() –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω (renderer=json)")
        return {"rendered": True}

    Figure.show = _patched_show

    globals_dict: Dict[str, object] = {"__name__": "__main__"}
    stored: Dict[str, object] = {}

    try:
        for idx, block in enumerate(code_blocks, 1):
            print(f"  ‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ {idx}")
            exec(block, globals_dict)  # noqa: S102

            if idx == 4 and "result" in globals_dict:
                stored["rsi_pipeline_result"] = globals_dict["result"]
            if idx == 7 and "rsi_result" in globals_dict:
                stored["rsi_indicator_df"] = globals_dict["rsi_result"].data
            if idx == 9 and "result" in globals_dict:
                stored["macd_pipeline_result"] = globals_dict["result"]

    finally:
        Figure.show = original_show

    return stored, globals_dict


def test_python_examples() -> bool:
    print("üß™ –í—ã–ø–æ–ª–Ω—è–µ–º python-–ø—Ä–∏–º–µ—Ä—ã quick_start.md")
    if not QUICK_START_PATH.exists():
        print("  ‚ùå –§–∞–π–ª quick_start.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    content = QUICK_START_PATH.read_text(encoding="utf-8")
    code_blocks = _extract_python_blocks(content)

    expected_blocks = 11
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(code_blocks)} python-–±–ª–æ–∫–æ–≤")
    if len(code_blocks) < expected_blocks:
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ –º–µ–Ω–µ–µ {expected_blocks} –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞")
        return False

    _prepare_pandas_ta()
    _ensure_stub_zigzag_registered()

    stored, globals_dict = _execute_python_examples(code_blocks)

    rsi_pipeline = stored.get("rsi_pipeline_result")
    macd_pipeline = stored.get("macd_pipeline_result")
    rsi_indicator_df = stored.get("rsi_indicator_df")

    success = True

    if rsi_pipeline is None:
        print("  ‚ùå –ü–æ—Å–ª–µ –±–ª–æ–∫–∞ 4 –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç RSI pipeline")
        success = False
    else:
        zones = getattr(rsi_pipeline, "zones", [])
        print(f"  ‚úÖ RSI pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω (–∑–æ–Ω: {len(zones)})")

    if not isinstance(rsi_indicator_df, pd.DataFrame):
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å DataFrame –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ RSI")
        success = False
    else:
        has_column = "RSI_14" in rsi_indicator_df.columns
        print(f"  {'‚úÖ' if has_column else '‚ùå'} –ö–æ–ª–æ–Ω–∫–∞ RSI_14 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö")
        success = success and has_column

    if macd_pipeline is None:
        print("  ‚ùå –ü–æ—Å–ª–µ –±–ª–æ–∫–∞ 9 –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç MACD pipeline")
        success = False
    else:
        macd_zones = len(getattr(macd_pipeline, "zones", []))
        print(f"  ‚úÖ MACD pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω (–∑–æ–Ω: {macd_zones})")
        if macd_zones == 0:
            success = False
            print("  ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–æ–Ω –¥–ª—è MACD")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ troubleshooting-–±–ª–æ–∫–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –≤ —Ç–æ–π –∂–µ —Å—Ä–µ–¥–µ
    version_again = globals_dict.get("bquant")
    if version_again is None:
        print("  ‚ö†Ô∏è –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ BQuant –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")

    return success


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/user_guide/quick_start.md")
    print("=" * 60)

    tests = [
        ("–°—Å—ã–ª–∫–∏ quick_start", test_relative_links),
        ("–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", test_language_presence),
        ("Python-–ø—Ä–∏–º–µ—Ä—ã", test_python_examples),
    ]

    results = []
    for name, func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {name}")
        try:
            result = func()
        except Exception as exc:  # noqa: BLE001
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc}")
            result = False
        results.append((name, result))

    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–û–í:")
    passed = 0
    for name, status in results:
        flag = "‚úÖ" if status else "‚ùå"
        print(f"  {flag} {name}")
        if status:
            passed += 1

    total = len(results)
    print(f"\nüéØ –ò—Ç–æ–≥: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
