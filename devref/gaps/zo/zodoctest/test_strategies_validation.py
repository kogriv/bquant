#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/api/analysis/strategies.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ cross-references
"""

import sys
import os
import traceback
from pathlib import Path
from typing import Iterable

import numpy as np
import pandas as pd

# –£—Å–∫–æ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É pandas-ta –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))


def _prepare_pandas_ta(minimal_functions: Iterable[str] = ("rsi", "ao", "stoch")) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é pandas-ta –º–∏–Ω–∏–º—É–º–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

    try:
        from bquant.indicators.library import pandas_ta as pandas_ta_loader
    except Exception:
        return

    try:
        import pandas_ta as ta
    except Exception:
        return

    loader = pandas_ta_loader.PandasTALoader
    selected = {}
    for name in minimal_functions:
        func = getattr(ta, name, None)
        if func is not None:
            selected[name] = func

    if not selected:
        return

    loader._function_cache = selected
    loader._available_indicators = sorted(selected.keys())
    loader._indicators_registered = False


_prepare_pandas_ta()


def _create_synthetic_zone_data() -> pd.DataFrame:
    """–°–æ–∑–¥–∞—ë—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    index = pd.date_range("2024-01-01", periods=120, freq="H")
    base = 100 + np.sin(np.linspace(0, 6, len(index)))
    trend = np.linspace(-0.5, 0.5, len(index))
    close = base + trend
    high = close + 0.3 + np.linspace(0.0, 0.1, len(index))
    low = close - 0.3 - np.linspace(0.0, 0.1, len(index))
    open_ = np.concatenate(([close[0]], close[:-1]))
    volume = 1200 + np.linspace(0, 1, len(index)) * 150

    df = pd.DataFrame({
        "open": open_,
        "high": high,
        "low": low,
        "close": close,
        "volume": volume,
    }, index=index)

    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df["macd"] = df["close"].ewm(span=12).mean() - df["close"].ewm(span=26).mean()
    df["macd_signal"] = df["macd"].ewm(span=9).mean()
    df["macd_hist"] = df["macd"] - df["macd_signal"]
    df["RSI_14"] = np.linspace(35, 65, len(df))
    df["AO_5_34"] = np.sin(np.linspace(0, 3 * np.pi, len(df)))
    df["atr"] = (df["high"] - df["low"]).rolling(14, min_periods=1).mean()

    return df


def test_imports_from_docs() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    print("üìã –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    targets = [
        ("bquant.analysis.zones", "ZoneFeaturesAnalyzer"),
        ("bquant.analysis.zones", "analyze_zones"),
        ("bquant.analysis.zones.strategies.shape", "StatisticalShapeStrategy"),
        ("bquant.analysis.zones.strategies.divergence", "ClassicDivergenceStrategy"),
        ("bquant.analysis.zones.strategies.volume", "StandardVolumeStrategy"),
        ("bquant.analysis.zones.strategies.volatility", "CombinedVolatilityStrategy"),
        ("bquant.analysis.zones.strategies.registry", "StrategyRegistry"),
        ("bquant.core.config", "create_swing_strategy"),
    ]

    success = 0
    for module_name, attr_name in targets:
        try:
            module = __import__(module_name, fromlist=[attr_name])
            getattr(module, attr_name)
            print(f"  ‚úÖ {module_name}.{attr_name}")
            success += 1
        except Exception as exc:
            print(f"  ‚ùå {module_name}.{attr_name}: {exc}")
            traceback.print_exc()

    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}/{len(targets)} –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return success == len(targets)


def test_strategy_examples() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    print("\nüìã –¢–µ—Å—Ç: –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

    try:
        from bquant.analysis.zones.strategies.shape import StatisticalShapeStrategy
        from bquant.analysis.zones.strategies.divergence import ClassicDivergenceStrategy
        from bquant.analysis.zones.strategies.volume import StandardVolumeStrategy
        from bquant.analysis.zones.strategies.volatility import CombinedVolatilityStrategy

        zone_data = _create_synthetic_zone_data()
        baseline_volume = float(zone_data["volume"].iloc[:50].mean())

        shape_strategy = StatisticalShapeStrategy()
        shape_macd = shape_strategy.calculate(zone_data, indicator_col="macd_hist")
        shape_rsi = shape_strategy.calculate(zone_data, indicator_col="RSI_14")
        shape_ao = shape_strategy.calculate(zone_data, indicator_col="AO_5_34")
        print(f"  ‚úÖ Shape metrics: MACD skew={shape_macd.hist_skewness:.2f}, RSI skew={shape_rsi.hist_skewness:.2f}, AO skew={shape_ao.hist_skewness:.2f}")

        divergence_strategy = ClassicDivergenceStrategy()
        div_rsi = divergence_strategy.calculate_divergence(zone_data, indicator_col="RSI_14")
        div_macd_hist = divergence_strategy.calculate_divergence(zone_data, indicator_col="macd_hist")
        div_macd_two_line = divergence_strategy.calculate_divergence(
            zone_data,
            indicator_col="macd",
            indicator_line_col="macd_signal",
        )
        print(f"  ‚úÖ Divergence metrics: RSI count={div_rsi.divergence_count}, MACD strength={div_macd_hist.divergence_strength:.2f}, Two-line type={div_macd_two_line.divergence_type}")

        volume_strategy = StandardVolumeStrategy()
        volume_metrics = volume_strategy.calculate_volume(
            zone_data,
            baseline_volume=baseline_volume,
            indicator_col="macd_hist",
        )
        ratio = volume_metrics.volume_zone_ratio
        ratio_display = f"{ratio:.2f}" if ratio is not None else "None"
        print(f"  ‚úÖ Volume metrics: ratio={ratio_display}, corr={volume_metrics.volume_indicator_corr}")

        volatility_strategy = CombinedVolatilityStrategy()
        volatility_metrics = volatility_strategy.calculate_volatility(zone_data)
        print(f"  ‚úÖ Volatility metrics: score={volatility_metrics.volatility_score:.2f}, regime={volatility_metrics.volatility_regime}")

        return True

    except Exception as exc:
        print(f"  ‚ùå Strategy examples: {exc}")
        traceback.print_exc()
        return False


def test_zone_features_analyzer_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —Å ZoneFeaturesAnalyzer."""
    print("\nüìã –¢–µ—Å—Ç: ZoneFeaturesAnalyzer")

    try:
        from bquant.analysis.zones import ZoneFeaturesAnalyzer

        zone_data = _create_synthetic_zone_data()
        zone_dict = {
            "zone_id": "synthetic_bull",
            "type": "bull",
            "duration": len(zone_data),
            "data": zone_data,
            "indicator_context": {
                "detection_indicator": "macd_hist",
                "signal_line": "macd_signal",
            },
        }

        analyzer = ZoneFeaturesAnalyzer(
            swing_strategy="zigzag",
            shape_strategy="statistical",
            divergence_strategy="classic",
            volatility_strategy="combined",
            volume_strategy="standard",
        )

        features = analyzer.extract_zone_features(zone_dict)
        metadata = features.metadata

        swing_available = metadata.get("swing_metrics") is not None
        shape_available = metadata.get("shape_metrics") is not None
        divergence_available = metadata.get("divergence_metrics") is not None
        volatility_available = metadata.get("volatility_metrics") is not None
        volume_available = metadata.get("volume_metrics") is not None

        print(f"  ‚úÖ Swing metrics: {'–µ—Å—Ç—å' if swing_available else '–Ω–µ—Ç'}")
        print(f"  ‚úÖ Shape metrics: {'–µ—Å—Ç—å' if shape_available else '–Ω–µ—Ç'}")
        print(f"  ‚úÖ Divergence metrics: {'–µ—Å—Ç—å' if divergence_available else '–Ω–µ—Ç'}")
        print(f"  ‚úÖ Volatility metrics: {'–µ—Å—Ç—å' if volatility_available else '–Ω–µ—Ç'}")
        print(f"  ‚úÖ Volume metrics: {'–µ—Å—Ç—å' if volume_available else '–Ω–µ—Ç'}")

        return all([swing_available, shape_available, divergence_available, volatility_available, volume_available])

    except Exception as exc:
        print(f"  ‚ùå ZoneFeaturesAnalyzer example: {exc}")
        traceback.print_exc()
        return False


def test_pipeline_combination() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —Å Universal Pipeline –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
    print("\nüìã –¢–µ—Å—Ç: Universal Pipeline —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏")

    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data

        df = get_sample_data("tv_xauusd_1h")

        result = (
            analyze_zones(df)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist", min_duration=2)
            .with_strategies(
                swing="zigzag",
                shape="statistical",
                divergence="classic",
                volatility="combined",
                volume="standard",
            )
            .analyze(clustering=True)
            .build()
        )

        print(f"  ‚úÖ Universal Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")

        if not result.zones:
            print("  ‚ö†Ô∏è –ù–µ—Ç –∑–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            return True

        zone = result.zones[0]
        if zone.features:
            print(f"  ‚úÖ zone.features —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(zone.features.keys())[:6]}")
            print(f"  ‚úÖ volatility_regime: {zone.features.get('volatility_regime', 'N/A')}")
            print(f"  ‚úÖ volume_indicator_corr: {zone.features.get('volume_indicator_corr', 'N/A')}")
            return True

        print("  ‚ö†Ô∏è zone.features –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    except Exception as exc:
        print(f"  ‚ùå Universal Pipeline example: {exc}")
        traceback.print_exc()
        return False


def test_strategy_registry_usage() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å StrategyRegistry."""
    print("\nüìã –¢–µ—Å—Ç: StrategyRegistry")

    try:
        from bquant.analysis.zones.strategies.registry import StrategyRegistry

        swing_before = set(StrategyRegistry.list_swing_strategies())
        shape_before = set(StrategyRegistry.list_shape_strategies())
        volume_before = set(StrategyRegistry.list_volume_strategies())

        print(f"  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ swing —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {sorted(swing_before)}")
        print(f"  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ shape —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {sorted(shape_before)}")
        print(f"  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {sorted(volume_before)}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        @StrategyRegistry.register_swing_strategy("doc_test_swing")
        class _DocTestSwingStrategy:
            def __init__(self, threshold: float = 0.02):
                self.threshold = threshold

            def calculate_swing(self, zone_data):  # pragma: no cover - —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                from bquant.analysis.zones.strategies.base import SwingMetrics

                return SwingMetrics(
                    num_swings=0,
                    avg_rally_pct=0.0,
                    avg_drop_pct=0.0,
                    max_rally_pct=0.0,
                    max_drop_pct=0.0,
                    rally_to_drop_ratio=0.0,
                    rally_count=0,
                    drop_count=0,
                    min_rally_pct=0.0,
                    min_drop_pct=0.0,
                    rally_amplitude_std=0.0,
                    drop_amplitude_std=0.0,
                    rally_amplitude_median=0.0,
                    drop_amplitude_median=0.0,
                    avg_rally_duration_bars=0.0,
                    avg_drop_duration_bars=0.0,
                    max_rally_duration_bars=0,
                    max_drop_duration_bars=0,
                    avg_rally_speed_pct_per_bar=0.0,
                    avg_drop_speed_pct_per_bar=0.0,
                    max_rally_speed_pct_per_bar=0.0,
                    max_drop_speed_pct_per_bar=0.0,
                    duration_symmetry=0.0,
                    strategy_name="doc_test_swing",
                    strategy_params={"threshold": self.threshold},
                )

            def get_name(self):  # pragma: no cover - —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                return "doc_test_swing"

            def get_metadata(self):  # pragma: no cover - —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                return {"threshold": self.threshold}

        custom_entry = StrategyRegistry.get_swing_strategy("doc_test_swing")
        instance = custom_entry() if isinstance(custom_entry, type) else custom_entry
        metrics = instance.calculate_swing(_create_synthetic_zone_data().head(20))
        print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {instance.get_name()}, threshold={instance.threshold}")
        print(f"  ‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: strategy_name={metrics.strategy_name}, num_swings={metrics.num_swings}")

        return True

    except Exception as exc:
        print(f"  ‚ùå StrategyRegistry: {exc}")
        traceback.print_exc()
        return False


def test_language_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")

    try:
        content = Path("docs/api/analysis/strategies.md").read_text(encoding="utf-8")
        russian_markers = ["—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ"]
        found = sum(1 for word in russian_markers if word in content.lower())
        code_blocks = content.count("```python")

        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {found}")
        print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ python-–±–ª–æ–∫–æ–≤: {code_blocks}")
        return found >= len(russian_markers) - 1 and code_blocks >= 5

    except Exception as exc:
        print(f"  ‚ùå Language check: {exc}")
        return False


def test_cross_references() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    print("\nüìã –¢–µ—Å—Ç: Cross-references")

    references = [
        Path("docs/api/analysis/zones.md"),
        Path("docs/api/analysis/pipeline.md"),
        Path("docs/api/analysis/statistical.md"),
        Path("docs/api/extension_guide.md"),
        Path("docs/user_guide/quick_start.md"),
        Path("docs/examples/README.md"),
        Path("docs/api/visualization/README.md"),
        Path("docs/api/indicators/README.md"),
        Path("examples/02_macd_zone_analysis.py"),
        Path("research/notebooks/03_zones_universal.py"),
        Path("research/notebooks/03_analysis_new_features.py"),
        Path("devref/gaps/swing_detection_approaches.md"),
        Path("tests/integration"),
        Path("tests/unit/test_classic_divergence_strategy.py"),
        Path("tests/unit/test_combined_volatility_strategy.py"),
    ]

    success = 0
    for ref in references:
        if ref.exists():
            print(f"  ‚úÖ {ref}")
            success += 1
        else:
            print(f"  ‚ùå {ref} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    return success == len(references)


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/analysis/strategies.md")
    print("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports_from_docs),
        ("–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", test_strategy_examples),
        ("ZoneFeaturesAnalyzer", test_zone_features_analyzer_example),
        ("Universal Pipeline", test_pipeline_combination),
        ("StrategyRegistry", test_strategy_registry_usage),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞", test_language_check),
    ]

    results = []
    for label, func in tests:
        try:
            result = func()
        except Exception as exc:
            print(f"  ‚ùå –¢–µ—Å—Ç {func.__name__} —É–ø–∞–ª: {exc}")
            traceback.print_exc()
            result = False
        results.append((label, result))

    passed = sum(1 for _, r in results if r)
    total = len(results)

    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    for label, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {label}: {status}")

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True

    print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

