#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/index.rst
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ docs/index.rst
–°–æ–∑–¥–∞–Ω: 2025-10-24
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath('.'))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üìã –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã")
    
    imports_to_test = [
        'bquant',
        'bquant.data.samples.get_sample_data',
        'bquant.analysis.zones.analyze_zones',
        'bquant.indicators.macd.MACDZoneAnalyzer',
    ]
    
    results = []
    for import_path in imports_to_test:
        try:
            if '.' in import_path:
                module_path, function_name = import_path.rsplit('.', 1)
                module = __import__(module_path, fromlist=[function_name])
                if hasattr(module, function_name):
                    print(f"  ‚úÖ {import_path}")
                    results.append(True)
                else:
                    print(f"  ‚ùå {import_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    results.append(False)
            else:
                __import__(import_path)
                print(f"  ‚úÖ {import_path}")
                results.append(True)
        except ImportError as e:
            print(f"  ‚ùå {import_path}: {e}")
            results.append(False)
    
    return all(results)

def test_sample_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É sample –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìã –¢–µ—Å—Ç: Sample –¥–∞–Ω–Ω—ã–µ")
    
    try:
        from bquant.data.samples import get_sample_data
        data = get_sample_data('tv_xauusd_1h')
        print(f"  ‚úÖ Sample –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data.shape}")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ sample –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_universal_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Universal Pipeline"""
    print("\nüìã –¢–µ—Å—Ç: Universal Pipeline")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Universal Pipeline
        result = (
            analyze_zones(data)
            .with_indicator('pandas_ta', 'rsi', length=14)
            .detect_zones('threshold', indicator_col='rsi',
                         upper_threshold=70, lower_threshold=30)
            .analyze(clustering=True)
            .build()
        )
        
        print("  ‚úÖ Universal Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"     –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(result.zones)}")
        print(f"     –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result.statistics}")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ Universal Pipeline: {e}")
        return False

def test_legacy_macd():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Legacy MACD"""
    print("\nüìã –¢–µ—Å—Ç: Legacy MACD")
    
    try:
        from bquant.indicators.macd import MACDZoneAnalyzer
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sample –¥–∞–Ω–Ω—ã–µ
        data = get_sample_data('tv_xauusd_1h')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Legacy MACD
        analyzer = MACDZoneAnalyzer()
        result = analyzer.analyze_complete(data)
        
        print("  ‚úÖ Legacy MACD –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (deprecated)")
        print(f"     –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(result.zones)}")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ Legacy MACD: {e}")
        return False

def test_cross_references():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º cross-references"""
    print("\nüìã –¢–µ—Å—Ç: Cross-references")
    
    references_to_check = [
        'docs/user_guide/quick_start.md',
        'docs/api/README.md',
        'docs/tutorials/README.md',
        'docs/examples/README.md',
        'docs/developer_guide/README.md',
    ]
    
    results = []
    for ref_path in references_to_check:
        exists = os.path.exists(ref_path)
        status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        print(f"  {ref_path}: {status}")
        results.append(exists)
    
    return all(results)

def test_language_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")
    
    try:
        with open('docs/index.rst', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        russian_words = ['–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–∏–º–µ—Ä—ã', '–±—ã—Å—Ç—Ä—ã–π', '—Å—Ç–∞—Ä—Ç']
        found_russian = sum(1 for word in russian_words if word in content.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –∫–æ–¥–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        code_blocks = content.count('.. code-block::')
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤: {found_russian}")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞: {code_blocks}")
        print("  ‚úÖ –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: —Ä—É—Å—Å–∫–∏–π (–∫–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        
        return found_russian > 0
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/index.rst")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("Sample –¥–∞–Ω–Ω—ã–µ", test_sample_data),
        ("Universal Pipeline", test_universal_pipeline),
        ("Legacy MACD", test_legacy_macd),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞", test_language_check),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
