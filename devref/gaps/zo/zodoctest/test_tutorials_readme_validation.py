#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ docs/tutorials/README.md (—ç—Ç–∞–ø 4.1)."""

from __future__ import annotations

import re
import subprocess
import sys
from pathlib import Path
from typing import Iterable, List

PROJECT_ROOT = Path(__file__).resolve().parents[4]
TUTORIALS_README = PROJECT_ROOT / "docs/tutorials/README.md"


def _extract_links(markdown_text: str) -> List[str]:
    pattern = re.compile(r"\[[^\]]+\]\(([^)]+)\)")
    return pattern.findall(markdown_text)


def _extract_code_blocks(markdown_text: str, language: str) -> List[str]:
    pattern = re.compile(rf"```{language}\n(.*?)```", re.DOTALL)
    return [block.strip() for block in pattern.findall(markdown_text)]


def test_relative_links() -> bool:
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ tutorials/README.md")
    content = TUTORIALS_README.read_text(encoding="utf-8")
    links = _extract_links(content)
    relative_links = [
        link for link in links if not link.startswith(("http://", "https://", "mailto:"))
    ]

    all_exist = True
    for link in relative_links:
        target = link.split("#", 1)[0]
        if not target:
            continue
        target_path = (TUTORIALS_README.parent / target).resolve()
        exists = target_path.exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {link} ‚Üí {target_path}")
        if not exists:
            all_exist = False

    return all_exist


def test_language_markers() -> bool:
    print("üó£Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    content = TUTORIALS_README.read_text(encoding="utf-8").lower()
    markers: Iterable[str] = (
        "–æ–±—É—á–∞—é—â–∏–µ",
        "–∞–Ω–∞–ª–∏–∑",
        "—Å—Ç—Ä–∞—Ç–µ–≥",
        "–∞—Ä—Ö–∏—Ç–µ–∫—Ç",
        "–∫–æ–Ω–≤–µ–π–µ—Ä",
    )
    found = sum(1 for marker in markers if marker in content)
    print(f"  –ù–∞–π–¥–µ–Ω–æ {found} —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤")
    return found >= 4


def test_bash_examples() -> bool:
    print("üêö –ü—Ä–æ–≤–µ—Ä—è–µ–º bash-–ø—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    content = TUTORIALS_README.read_text(encoding="utf-8")
    bash_blocks = _extract_code_blocks(content, "bash")

    if not bash_blocks:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω bash-–±–ª–æ–∫ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        return False

    print(f"  –ù–∞–π–¥–µ–Ω–æ bash-–±–ª–æ–∫–æ–≤: {len(bash_blocks)}")

    unique_commands = {line.strip() for block in bash_blocks for line in block.splitlines() if line.strip()}
    if unique_commands != {"pip install bquant"}:
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä 'pip install bquant', –ø–æ–ª—É—á–µ–Ω–æ: {unique_commands}")
        return False

    try:
        result = subprocess.run(
            [sys.executable, "-m", "pip", "help", "install"],
            capture_output=True,
            text=True,
            check=True,
            timeout=30,
        )
    except (subprocess.TimeoutExpired, subprocess.CalledProcessError, FileNotFoundError) as exc:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pip: {exc}")
        return False

    if "install packages" not in result.stdout.lower() and "install packages" not in result.stderr.lower():
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É pip install")
        return False

    print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ pip install –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ --help)")
    return True


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/tutorials/README.md")
    print("=" * 50)

    tests = [
        ("–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏", test_relative_links),
        ("–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã", test_language_markers),
        ("Bash-–ø—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏", test_bash_examples),
    ]

    passed = 0
    for name, func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {name}")
        try:
            if func():
                print("  ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
                passed += 1
            else:
                print("  ‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as exc:  # noqa: BLE001
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc}")

    total = len(tests)
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    success = passed == total
    print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã!" if success else "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
    return success


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
