#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/README.md"""

import sys
import time
import traceback
from pathlib import Path
from types import SimpleNamespace
from typing import List

import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))


def test_config_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    print("üìã –¢–µ—Å—Ç: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    try:
        from bquant.core.config import get_data_path, validate_timeframe
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    try:
        timeframe = validate_timeframe("1h")
        path = Path(get_data_path("XAUUSD", "1h", data_source="tradingview", quote_provider="oanda"))
        print(f"  ‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        print(f"  ‚úÖ –ü—É—Ç—å: {path}")
        return timeframe == "1h" and path.suffix == ".csv"
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False


def test_logging_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\nüìã –¢–µ—Å—Ç: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    try:
        from bquant.core.logging_config import setup_logging, get_logger
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {exc}")
        traceback.print_exc()
        return False

    try:
        setup_logging(level="INFO", log_file="bquant.log")
        logger = get_logger(__name__)
        logger.info("Starting analysis...")
        logger.debug("Processing data...")
        logger.warning("Data validation failed")
        logger.error("Analysis failed")
        print("  ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return True
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {exc}")
        traceback.print_exc()
        return False


def test_performance_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("\nüìã –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    try:
        from bquant.core.performance import (
            get_performance_monitor,
            performance_context,
            performance_monitor,
        )
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç performance: {exc}")
        traceback.print_exc()
        return False

    try:
        @performance_monitor()
        def slow_function():
            time.sleep(0.05)
            return "result"

        def process_large_dataset():
            return sum(range(100))

        result = slow_function()
        with performance_context("data_processing"):
            process_large_dataset()

        stats = get_performance_monitor().get_stats()
        print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç slow_function: {result}")
        print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {len(stats)}")
        return result == "result" and any("slow_function" in key for key in stats.keys())
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {exc}")
        traceback.print_exc()
        return False


def test_exceptions_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    print("\nüìã –¢–µ—Å—Ç: –ò—Å–∫–ª—é—á–µ–Ω–∏—è")
    try:
        from bquant.core.exceptions import AnalysisError, BQuantError, DataError
        from bquant.core.logging_config import get_logger
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {exc}")
        traceback.print_exc()
        return False

    logger = get_logger(__name__)

    def load_data(_: str):
        raise DataError("invalid file")

    handled = SimpleNamespace(data=False, base=False)

    try:
        load_data("invalid_file.csv")
    except DataError as exc:
        logger.error(f"Data error: {exc}")
        handled.data = True
    except BQuantError as exc:
        logger.error(f"BQuant error: {exc}")
        handled.base = True
    except AnalysisError:
        logger.error("Analysis error")

    print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: data={handled.data}, base={handled.base}")
    return handled.data and not handled.base


def test_utils_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–∏–ª–∏—Ç—ã."""
    print("\nüìã –¢–µ—Å—Ç: –£—Ç–∏–ª–∏—Ç—ã")
    try:
        from bquant.core.utils import calculate_returns, validate_ohlcv_columns
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç: {exc}")
        traceback.print_exc()
        return False

    try:
        df = pd.DataFrame(
            {
                "open": [1, 2, 3],
                "high": [2, 3, 4],
                "low": [0.5, 1.5, 2.5],
                "close": [1.2, 2.2, 3.2],
                "volume": [100, 110, 120],
            }
        )
        check = validate_ohlcv_columns(df)
        returns = calculate_returns(df["close"], method="log")
        print(f"  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {check['is_valid']}, —Å–æ–æ–±—â–µ–Ω–∏—è: {check['messages']}")
        print(f"  ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {returns.dropna().tolist()}")
        return check["is_valid"] and len(returns.dropna()) == 2
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏—Ç: {exc}")
        traceback.print_exc()
        return False


def test_notebook_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä Notebook-style API."""
    print("\nüìã –¢–µ—Å—Ç: Notebook-style —Å–∫—Ä–∏–ø—Ç")
    try:
        from unittest import mock

        from bquant.core.nb import NotebookSimulator
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç NotebookSimulator: {exc}")
        traceback.print_exc()
        return False

    try:
        runner = NotebookSimulator("Data Analysis Script", auto_setup=False)
        runner.setup_logging("analysis.log")
        runner.step("Loading Data")
        with mock.patch("builtins.input", return_value=""):
            runner.wait()
        runner.success("Data loaded successfully")
        runner.step("Processing Data")
        with mock.patch("builtins.input", return_value=""):
            runner.wait()
        runner.success("Processing completed")
        try:
            runner.finish()
        except SystemExit as exc:
            print(f"  ‚úÖ Finish –≤—ã–∑–≤–∞–ª SystemExit({exc.code})")
            return exc.code == 0
        return False
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ NotebookSimulator: {exc}")
        traceback.print_exc()
        return False


def test_cross_references() -> bool:
    """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    print("\nüìã –¢–µ—Å—Ç: Cross-references")
    references: List[Path] = [
        Path("docs/api/core/config.md"),
        Path("docs/api/core/exceptions.md"),
        Path("docs/api/core/logging.md"),
        Path("docs/api/core/performance.md"),
        Path("docs/api/core/utils.md"),
        Path("docs/api/core/nb.md"),
        Path("docs/api/data/README.md"),
        Path("docs/api/indicators/README.md"),
        Path("docs/api/analysis/README.md"),
        Path("docs/api/visualization/README.md"),
    ]

    missing = [ref for ref in references if not ref.exists()]
    if missing:
        for ref in missing:
            print(f"  ‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞: {ref}")
        return False

    for ref in references:
        print(f"  ‚úÖ {ref}")
    return True


def test_language() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–º."""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫")
    try:
        content = Path("docs/api/core/README.md").read_text(encoding="utf-8")
    except Exception as exc:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {exc}")
        traceback.print_exc()
        return False

    markers = ["–º–æ–¥—É–ª–∏", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–∏—Å–∫–ª—é—á–µ–Ω–∏—è", "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—É—Ç–∏–ª–∏—Ç—ã"]
    found = sum(1 for marker in markers if marker in content.lower())
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {found}/{len(markers)}")
    code_blocks = content.count("```python")
    print(f"  ‚úÖ Python-–±–ª–æ–∫–æ–≤: {code_blocks}")
    return found >= len(markers) - 1 and code_blocks >= 5


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/README.md")
    print("=" * 60)

    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_example),
        ("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_logging_example),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance_example),
        ("–ò—Å–∫–ª—é—á–µ–Ω–∏—è", test_exceptions_example),
        ("–£—Ç–∏–ª–∏—Ç—ã", test_utils_example),
        ("Notebook", test_notebook_example),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫", test_language),
    ]

    results = []
    for name, func in tests:
        print(f"\n‚û°Ô∏è {name}")
        ok = func()
        results.append(ok)
        print(f"‚úîÔ∏è {name}: {'—É—Å–ø–µ—Ö' if ok else '–æ—à–∏–±–∫–∞'}")

    total = sum(results)
    print("=" * 60)
    print(f"–ò—Ç–æ–≥–æ: {total}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return all(results)


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
