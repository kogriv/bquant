"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/api/analysis/pipeline.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã pipeline, —Ä–∞–±–æ—Ç—É Fluent Builder –∏ cross-references
"""

import sys
import os
import traceback
from functools import lru_cache
from pathlib import Path
from typing import Iterable

import numpy as np
import pandas as pd

# –£—Å–∫–æ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É pandas-ta –∏ numba –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))


def _prepare_pandas_ta(minimal_functions: Iterable[str] = ("rsi", "ao", "stoch", "zigzag")) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é pandas-ta –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

    try:
        from bquant.indicators.library import pandas_ta as pandas_ta_loader
    except Exception:
        return

    try:
        import pandas_ta as ta
    except Exception:
        return

    if getattr(ta, "zigzag", None) is None:
        def _zigzag_stub(df: pd.DataFrame, **kwargs) -> pd.DataFrame:
            if isinstance(df, pd.DataFrame):
                series = df.get("close")
                if series is None:
                    numeric = df.select_dtypes(include=[np.number])
                    series = numeric.iloc[:, 0] if not numeric.empty else pd.Series(dtype=float)
            else:
                series = pd.Series(df)

            base_series = series if isinstance(series, pd.Series) else pd.Series(series)
            return pd.DataFrame({"zigzag": base_series.copy()})

        ta.zigzag = _zigzag_stub

    loader = pandas_ta_loader.PandasTALoader
    selected = {}
    for name in minimal_functions:
        func = getattr(ta, name, None)
        if func is not None:
            selected[name] = func

    if not selected:
        return

    loader._function_cache = selected
    loader._available_indicators = sorted(selected.keys())
    loader._indicators_registered = False


def _ensure_stub_zigzag_registered() -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ pandas-ta zigzag –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    try:
        from bquant.indicators.base import IndicatorFactory, LibraryIndicator
    except Exception:
        return

    registry_key = "pandas_ta_zigzag"
    if registry_key in getattr(IndicatorFactory, "_registry", {}):
        return

    def _zigzag_stub(df: pd.DataFrame, **kwargs) -> pd.DataFrame:
        if isinstance(df, pd.DataFrame):
            series = df.get("close")
            if series is None:
                numeric = df.select_dtypes(include=[np.number])
                series = numeric.iloc[:, 0] if not numeric.empty else pd.Series(dtype=float)
        else:
            series = pd.Series(df)

        base_series = series if isinstance(series, pd.Series) else pd.Series(series)
        return pd.DataFrame({"zigzag": base_series.copy()})

    class _StubZigZagIndicator(LibraryIndicator):
        def __init__(self, **params):
            super().__init__("zigzag", _zigzag_stub, parameters=params)

    IndicatorFactory.register_indicator(registry_key, _StubZigZagIndicator)
    IndicatorFactory.register_library_function(registry_key, _zigzag_stub)


_prepare_pandas_ta()
_ensure_stub_zigzag_registered()


@lru_cache(maxsize=1)
def _load_sample_data() -> pd.DataFrame:
    from bquant.data.samples import get_sample_data

    return get_sample_data("tv_xauusd_1h")


def _generate_line_crossing_data() -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏ –ª–∏–Ω–∏–π."""

    index = pd.date_range("2023-01-01", periods=240, freq="H")
    base = np.sin(np.linspace(0, 18, len(index))) + 100

    df = pd.DataFrame({
        "open": base + 0.05,
        "high": base + 0.1,
        "low": base - 0.1,
        "close": base,
        "volume": np.linspace(1, 10, len(index)),
    }, index=index)

    df["ma_fast"] = df["close"].rolling(window=5, min_periods=1).mean()
    df["ma_slow"] = df["close"].rolling(window=20, min_periods=1).mean()

    return df


def test_imports_from_docs() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    print("üìã –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    imports_to_test = [
        ("bquant.analysis.zones", "analyze_zones"),
        ("bquant.analysis.zones.pipeline", "ZoneAnalysisBuilder"),
        ("bquant.analysis.zones.pipeline", "ZoneAnalysisPipeline"),
        ("bquant.analysis.zones.analyzer", "UniversalZoneAnalyzer"),
        ("bquant.analysis.zones.pipeline", "ZoneAnalysisConfig"),
        ("bquant.analysis.zones.pipeline", "ZoneAnalysisResult"),
        ("bquant.data.samples", "get_sample_data"),
    ]

    success = 0
    for module_name, attr_name in imports_to_test:
        try:
            module = __import__(module_name, fromlist=[attr_name])
            getattr(module, attr_name)
            print(f"  ‚úÖ {module_name}.{attr_name}")
            success += 1
        except Exception as exc:
            print(f"  ‚ùå {module_name}.{attr_name}: {exc}")
            traceback.print_exc()

    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}/{len(imports_to_test)} –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return success == len(imports_to_test)


def test_fluent_builder_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä Fluent Builder Pattern."""

    print("\nüìã –¢–µ—Å—Ç: Fluent Builder Pattern")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(400).copy()

        result = (
            analyze_zones(data)
            .with_indicator("pandas_ta", "rsi", length=14)
            .detect_zones(
                "threshold",
                indicator_col="rsi",
                upper_threshold=70,
                lower_threshold=30,
            )
            .with_strategies(swing="find_peaks", shape="statistical")
            .analyze(clustering=True, n_clusters=3)
            .build()
        )

        print(f"  ‚úÖ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(result.zones)}")
        if result.zones and result.zones[0].features:
            keys = list(result.zones[0].features.keys())[:6]
            print(f"  ‚úÖ zone.features —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {keys}")

        return True

    except Exception as exc:
        print(f"  ‚ùå Fluent Builder –ø—Ä–∏–º–µ—Ä: {exc}")
        traceback.print_exc()
        return False


def test_pipeline_core_engine() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä ZoneAnalysisPipeline —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π."""

    print("\nüìã –¢–µ—Å—Ç: ZoneAnalysisPipeline core engine")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(400).copy()

        result = (
            analyze_zones(data)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .analyze(clustering=True)
            .build()
        )

        print(f"  ‚úÖ Core engine: {len(result.zones)} –∑–æ–Ω")

        if result.zones:
            zone = result.zones[0]
            print(f"  ‚úÖ indicator_context: {zone.indicator_context.get('indicator_name')}")
            print(f"  ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {zone.indicator_context.get('detection_strategy')}")

        return True

    except Exception as exc:
        print(f"  ‚ùå ZoneAnalysisPipeline –ø—Ä–∏–º–µ—Ä: {exc}")
        traceback.print_exc()
        return False


def test_indicator_context_contract() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è indicator_context –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    print("\nüìã –¢–µ—Å—Ç: indicator_context contract")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(400).copy()

        result = (
            analyze_zones(data)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .with_strategies(swing="zigzag")
            .analyze(clustering=True)
            .build()
        )

        if not result.zones:
            print("  ‚ö†Ô∏è –ù–µ—Ç –∑–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
            return True

        context = result.zones[0].indicator_context or {}
        required_keys = [
            "detection_indicator",
            "detection_strategy",
            "detection_rules",
            "signal_line",
        ]

        missing = [key for key in required_keys if key not in context]
        print(f"  ‚úÖ indicator_context –∫–ª—é—á–∏: {sorted(context.keys())[:6]}")
        if missing:
            print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing}")
            return False

        return True

    except Exception as exc:
        print(f"  ‚ùå indicator_context contract: {exc}")
        traceback.print_exc()
        return False


def test_practical_examples() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (MACD, RSI, AO, caching)."""

    print("\nüìã –¢–µ—Å—Ç: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(400).copy()

        # –ü—Ä–∏–º–µ—Ä 1: MACD analysis
        macd_result = (
            analyze_zones(data)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .with_strategies(swing="find_peaks", divergence="classic")
            .analyze(clustering=True, n_clusters=3)
            .build()
        )
        print(f"  ‚úÖ MACD –ø—Ä–∏–º–µ—Ä: {len(macd_result.zones)} –∑–æ–Ω")

        # –ü—Ä–∏–º–µ—Ä 2: RSI analysis
        rsi_result = (
            analyze_zones(data)
            .with_indicator("pandas_ta", "rsi", length=14)
            .detect_zones(
                "threshold",
                indicator_col="rsi",
                upper_threshold=70,
                lower_threshold=30,
            )
            .with_strategies(swing="pivot_points", volatility="combined")
            .analyze(clustering=True)
            .build()
        )
        print(f"  ‚úÖ RSI –ø—Ä–∏–º–µ—Ä: {len(rsi_result.zones)} –∑–æ–Ω")

        # –ü—Ä–∏–º–µ—Ä 3: AO analysis
        ao_result = (
            analyze_zones(data)
            .with_indicator("pandas_ta", "ao", fast=5, slow=34)
            .detect_zones("zero_crossing", indicator_col="AO_5_34")
            .with_strategies(swing="zigzag", shape="statistical")
            .analyze(clustering=True)
            .build()
        )
        print(f"  ‚úÖ AO –ø—Ä–∏–º–µ—Ä: {len(ao_result.zones)} –∑–æ–Ω")

        # –ü—Ä–∏–º–µ—Ä 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache_result = (
            analyze_zones(data)
            .with_cache(enable=True, ttl=7200)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .analyze(clustering=True)
            .build()
        )
        print(f"  ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(cache_result.zones)} –∑–æ–Ω")

        return True

    except Exception as exc:
        print(f"  ‚ùå –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã: {exc}")
        traceback.print_exc()
        return False


def test_detect_zones_line_crossing_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä line_crossing –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""

    print("\nüìã –¢–µ—Å—Ç: Line crossing detection")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _generate_line_crossing_data()

        result = (
            analyze_zones(data)
            .detect_zones("line_crossing", line1_col="ma_fast", line2_col="ma_slow")
            .analyze(clustering=False)
            .build()
        )

        print(f"  ‚úÖ Line crossing: –Ω–∞–π–¥–µ–Ω–æ –∑–æ–Ω {len(result.zones)}")
        assert result.zones, "Line crossing –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–æ–Ω—ã"

        first_zone = result.zones[0]
        print(f"  ‚úÖ –ü–µ—Ä–≤–∞—è –∑–æ–Ω–∞: type={first_zone.type}, duration={first_zone.duration}")

        return True

    except Exception as exc:
        print(f"  ‚ùå Line crossing –ø—Ä–∏–º–µ—Ä: {exc}")
        traceback.print_exc()
        return False


def test_with_strategies_extended_example() -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä .with_strategies."""

    print("\nüìã –¢–µ—Å—Ç: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(400).copy()

        result = (
            analyze_zones(data)
            .with_indicator("pandas_ta", "rsi", length=14)
            .detect_zones(
                "threshold",
                indicator_col="rsi",
                upper_threshold=70,
                lower_threshold=30,
            )
            .with_strategies(
                swing="zigzag",
                divergence="classic",
                volume="standard",
                volatility="combined",
            )
            .analyze(clustering=True)
            .build()
        )

        print(f"  ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∑–æ–Ω={len(result.zones)}")

        return True

    except Exception as exc:
        print(f"  ‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {exc}")
        traceback.print_exc()
        return False


def test_analyze_full_options_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å regression –∏ validation."""

    print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (regression + validation)")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(300).copy()

        result = (
            analyze_zones(data)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .analyze(clustering=True, regression=True, validation=True)
            .build()
        )

        regression_ready = bool(getattr(result, "regression_results", None))
        validation_ready = bool(getattr(result, "validation_results", None))

        print(
            "  ‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∑–æ–Ω=%s, regression=%s, validation=%s"
            % (len(result.zones), regression_ready, validation_ready)
        )

        return True

    except Exception as exc:
        print(f"  ‚ùå –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {exc}")
        traceback.print_exc()
        return False


def test_cache_disable_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä .with_cache(enable=False)."""

    print("\nüìã –¢–µ—Å—Ç: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞")

    try:
        from bquant.analysis.zones import analyze_zones

        data = _load_sample_data().head(300).copy()

        result = (
            analyze_zones(data)
            .with_cache(enable=False)
            .with_indicator("custom", "macd", fast_period=12, slow_period=26, signal_period=9)
            .detect_zones("zero_crossing", indicator_col="macd_hist")
            .analyze(clustering=True)
            .build()
        )

        print(f"  ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫—ç—à: –∑–æ–Ω={len(result.zones)}")

        return True

    except Exception as exc:
        print(f"  ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫—ç—à: {exc}")
        traceback.print_exc()
        return False


def test_migration_example() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª Migration Guide."""

    print("\nüìã –¢–µ—Å—Ç: Migration Guide")

    try:
        from bquant.indicators import MACDZoneAnalyzer
        from bquant.data.samples import get_sample_data

        analyzer = MACDZoneAnalyzer()
        data = get_sample_data("tv_xauusd_1h")
        legacy_result = analyzer.analyze_complete(data.head(200))
        zones = legacy_result.zones
        print(f"  ‚úÖ Legacy analyze_complete: –∑–æ–Ω={len(zones)}")

        if zones:
            zone = zones[0]
            print(f"  ‚úÖ –ü–µ—Ä–≤–∞—è –∑–æ–Ω–∞: id={zone.zone_id}, type={zone.type}, duration={zone.duration}")

        return True

    except Exception as exc:
        print(f"  ‚ùå Migration Guide –ø—Ä–∏–º–µ—Ä: {exc}")
        traceback.print_exc()
        return False


def test_cross_references() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ cross-reference —Å—Å—ã–ª–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""

    print("\nüìã –¢–µ—Å—Ç: Cross-references")

    references = [
        Path("docs/api/analysis/strategies.md"),
        Path("docs/api/analysis/statistical.md"),
        Path("docs/api/analysis/zones.md"),
        Path("docs/user_guide/quick_start.md"),
        Path("docs/examples/README.md"),
        Path("research/notebooks/03_zones_universal.py"),
        Path("research/notebooks/03_analysis_new_features.py"),
        Path("examples/02_macd_zone_analysis.py"),
        Path("docs/developer_guide/README.md"),
        Path("docs/api/visualization/README.md"),
        Path("docs/api/indicators/README.md"),
        Path("tests/integration"),
    ]

    success = 0
    for ref in references:
        if ref.exists():
            print(f"  ‚úÖ {ref}")
            success += 1
        else:
            print(f"  ‚ùå {ref} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    return success == len(references)


def test_language_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")

    try:
        content = Path("docs/api/analysis/pipeline.md").read_text(encoding="utf-8")
        lowered = content.lower()
        russian_markers = ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä", "—Å—Ç—Ä–∞—Ç–µ–≥", "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å", "–∫—ç—à"]
        found = sum(1 for word in russian_markers if word in lowered)
        code_blocks = content.count("```python")

        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {found}")
        print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ python-–±–ª–æ–∫–æ–≤: {code_blocks}")
        return found >= len(russian_markers) - 1 and code_blocks >= 6

    except Exception as exc:
        print(f"  ‚ùå Language check: {exc}")
        return False


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/analysis/pipeline.md")
    print("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports_from_docs),
        ("Fluent Builder", test_fluent_builder_example),
        ("Core Engine", test_pipeline_core_engine),
        ("indicator_context", test_indicator_context_contract),
        ("Line crossing", test_detect_zones_line_crossing_example),
        ("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", test_with_strategies_extended_example),
        ("–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", test_analyze_full_options_example),
        ("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞", test_cache_disable_example),
        ("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã", test_practical_examples),
        ("Migration Guide", test_migration_example),
        ("Cross-references", test_cross_references),
        ("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞", test_language_check),
    ]

    results = []
    for label, func in tests:
        try:
            result = func()
        except Exception as exc:
            print(f"  ‚ùå –¢–µ—Å—Ç {func.__name__} —É–ø–∞–ª: {exc}")
            traceback.print_exc()
            result = False
        results.append((label, result))

    passed = sum(1 for _, r in results if r)
    total = len(results)

    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    for label, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {label}: {status}")

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True

    print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

