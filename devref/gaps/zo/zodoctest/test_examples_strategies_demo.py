"""–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è examples/05_strategies_demo.py."""

from __future__ import annotations

import os
import re
import subprocess
import sys
import tempfile
from functools import lru_cache
from pathlib import Path
from typing import Tuple


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
SCRIPT_PATH = PROJECT_ROOT / "examples" / "05_strategies_demo.py"


@lru_cache(maxsize=1)
def _run_example() -> Tuple[int, str, str]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –∫—ç—à–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥."""

    env = os.environ.copy()
    env.setdefault("NUMBA_DISABLE_JIT", "1")

    with tempfile.TemporaryDirectory() as tmpdir:
        proc = subprocess.run(
            [sys.executable, str(SCRIPT_PATH)],
            check=False,
            capture_output=True,
            text=True,
            cwd=tmpdir,
            env=env,
        )

    return proc.returncode, proc.stdout, proc.stderr


def _combined_output() -> str:
    code, stdout, stderr = _run_example()
    return stdout + "\n" + stderr + f"\n[exit={code}]"


def test_script_execution() -> bool:
    print("üìã –¢–µ—Å—Ç: –∑–∞–ø—É—Å–∫ examples/05_strategies_demo.py")

    code, stdout, stderr = _run_example()

    if code != 0:
        print(f"  ‚ùå –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {code}")
        if stderr:
            print("  ‚ÑπÔ∏è STDERR:")
            print(stderr)
        return False

    if "Traceback" in stdout or "Traceback" in stderr:
        print("  ‚ùå –ù–∞–π–¥–µ–Ω traceback –≤ –≤—ã–≤–æ–¥–µ")
        return False

    print("  ‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
    return True


def test_indicator_sections_present() -> bool:
    print("üìã –¢–µ—Å—Ç: –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    lines = _combined_output().splitlines()

    macd_count = None
    rsi_found = False

    for idx, line in enumerate(lines):
        if "=== Testing MACD" in line:
            window = lines[idx + 1 : idx + 5]
            for candidate in window:
                tokens = candidate.strip().split()
                if tokens[:1] == ["Detected"] and any(token.isdigit() for token in tokens):
                    macd_count = next(int(token) for token in tokens if token.isdigit())
                    break
        if "=== Testing RSI" in line:
            rsi_found = True

    if not macd_count or macd_count == 0:
        print("  ‚ùå MACD —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–æ–Ω—ã")
        return False

    if not rsi_found:
        print("  ‚ùå RSI —Å–µ–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    print("  ‚úÖ –û–±–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_strategy_table_metrics() -> bool:
    print("üìã –¢–µ—Å—Ç: —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    lines = _combined_output().splitlines()

    header_index = next((i for i, line in enumerate(lines) if "Strategy        Swings" in line), None)
    if header_index is None:
        print("  ‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    rows = []
    for line in lines[header_index + 2 : header_index + 6]:
        if not line.strip():
            continue
        match = re.match(r"\s*(zigzag|find_peaks|pivot_points)\s+(\d+)", line)
        if match:
            rows.append((match.group(1), int(match.group(2))))

    if len(rows) != 3:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
        return False

    if any(value == 0 for _, value in rows):
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª–∏—Å—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–µ–Ω–æ: {rows}")
        return False

    print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏—è: {rows}")
    return True


def test_average_swings_summary() -> bool:
    print("üìã –¢–µ—Å—Ç: —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∏–Ω–≥–æ–≤ –ø–æ –∑–æ–Ω–∞–º")
    lines = _combined_output().splitlines()
    try:
        idx = next(i for i, line in enumerate(lines) if "Average swings per zone:" in line)
    except StopIteration:
        print("  ‚ùå –ë–ª–æ–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    summary_lines = []
    for line in lines[idx + 1 : idx + 5]:
        if not line.strip():
            break
        summary_lines.append(line.strip())

    if not summary_lines:
        print("  ‚ùå –°—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return False

    if not all("swings/zone" in entry for entry in summary_lines):
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–∏–Ω–≥–æ–≤")
        return False

    print("  ‚úÖ –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
    return True


def test_guidelines_block() -> bool:
    print("üìã –¢–µ—Å—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    output = _combined_output()

    if "Strategy Selection Guidelines:" not in output:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        return False

    checklist = ["ZigZag:", "FindPeaks:", "PivotPoints:"]
    missing = [item for item in checklist if item not in output]
    if missing:
        print("  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: " + ", ".join(missing))
        return False

    print("  ‚úÖ –ë–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    return True


def test_cross_reference_targets() -> bool:
    print("üìã –¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∞")
    output = _combined_output()

    resources_match = re.search(r"Further resources:(.*)", output, re.S)
    if not resources_match:
        print("  ‚ùå –ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    entries = [line.strip(" -") for line in resources_match.group(1).splitlines() if line.strip()]
    targets = [entry for entry in entries if entry.endswith((".md", ".py"))]

    missing = []
    for entry in targets:
        path = PROJECT_ROOT / entry
        if not path.exists():
            missing.append(entry)

    if missing:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join(missing))
        return False

    print("  ‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    return True


def main() -> None:
    tests = [
        test_script_execution,
        test_indicator_sections_present,
        test_strategy_table_metrics,
        test_average_swings_summary,
        test_guidelines_block,
        test_cross_reference_targets,
    ]

    results = []
    for test in tests:
        try:
            results.append(test())
        except Exception as exc:  # pragma: no cover
            print(f"  ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {test.__name__}: {exc}")
            results.append(False)

    passed = sum(1 for value in results if value)
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤")

    if not all(results):
        sys.exit(1)


if __name__ == "__main__":
    main()
