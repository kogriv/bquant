"""–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è examples/02_macd_zone_analysis.py."""

from __future__ import annotations

import os
import re
import subprocess
import sys
import tempfile
from functools import lru_cache
from pathlib import Path
from typing import Tuple


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
SCRIPT_PATH = PROJECT_ROOT / "examples" / "02_macd_zone_analysis.py"


@lru_cache(maxsize=1)
def _run_example() -> Tuple[int, str, str]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∏ –∫—ç—à–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥."""

    env = os.environ.copy()
    env.setdefault("NUMBA_DISABLE_JIT", "1")

    with tempfile.TemporaryDirectory() as tmpdir:
        proc = subprocess.run(
            [sys.executable, str(SCRIPT_PATH)],
            check=False,
            capture_output=True,
            text=True,
            cwd=tmpdir,
            env=env,
        )

    return proc.returncode, proc.stdout, proc.stderr


def test_script_execution() -> bool:
    print("üìã –¢–µ—Å—Ç: –∑–∞–ø—É—Å–∫ examples/02_macd_zone_analysis.py")

    code, stdout, stderr = _run_example()

    if code != 0:
        print(f"  ‚ùå –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ {code}")
        if stderr:
            print("  ‚ÑπÔ∏è STDERR:")
            print(stderr)
        return False

    if "Traceback" in stdout or "Traceback" in stderr:
        print("  ‚ùå –ù–∞–π–¥–µ–Ω traceback –≤ –≤—ã–≤–æ–¥–µ")
        return False

    print("  ‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
    return True


def test_sections_present() -> bool:
    print("üìã –¢–µ—Å—Ç: –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")
    _, stdout, _ = _run_example()

    required_markers = [
        "1. [!] Deprecated –ø–æ–¥—Ö–æ–¥ (MACDZoneAnalyzer)",
        "2. [OK] –ù–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
        "3. –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ MACD –∑–æ–Ω",
        "4. –ú–æ–¥—É–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
        "5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
    ]

    missing = [marker for marker in required_markers if marker not in stdout]
    if missing:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã:")
        for marker in missing:
            print(f"    - {marker}")
        return False

    print("  ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_zone_counts_consistency() -> bool:
    print("üìã –¢–µ—Å—Ç: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–æ–Ω —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤")
    _, stdout, _ = _run_example()

    old_match = re.search(r"Analysis complete \(old approach\):.*?- Zones found: (\d+)", stdout, re.S)
    new_match = re.search(r"Analysis complete \(new approach\):.*?- Zones found: (\d+)", stdout, re.S)

    if not old_match or not new_match:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—á–µ—Ç—á–∏–∫–∏ –∑–æ–Ω")
        return False

    old_count = int(old_match.group(1))
    new_count = int(new_match.group(1))

    if old_count == 0 or new_count == 0:
        print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: old={old_count}, new={new_count}")
        return False

    if old_count != new_count:
        print(f"  ‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è: old={old_count}, new={new_count}")
        return False

    print(f"  ‚úÖ –û–±–∞ –ø–æ–¥—Ö–æ–¥–∞ –Ω–∞—à–ª–∏ {old_count} –∑–æ–Ω")
    return True


def test_combined_strategy_non_empty() -> bool:
    print("üìã –¢–µ—Å—Ç: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    _, stdout, _ = _run_example()

    combined_match = re.search(r"–°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Combined.*?\n[^\n]*–ó–æ–Ω: (\d+)", stdout, re.S)
    if not combined_match:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        return False

    combined_count = int(combined_match.group(1))
    if combined_count <= 0:
        print(f"  ‚ùå –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä–Ω—É–ª–∞ {combined_count} –∑–æ–Ω")
        return False

    print(f"  ‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—à–ª–∞ {combined_count} –∑–æ–Ω")
    return True


def test_cross_references() -> bool:
    print("üìã –¢–µ—Å—Ç: cross-reference —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –±–ª–æ–∫–µ")

    targets = [
        PROJECT_ROOT / "examples" / "02a_universal_zones.py",
        PROJECT_ROOT / "examples" / "04_comprehensive_analysis.py",
        PROJECT_ROOT / "research" / "notebooks" / "03_zones_universal.py",
    ]

    missing = [str(path) for path in targets if not path.exists()]
    if missing:
        print("  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        for path in missing:
            print(f"    - {path}")
        return False

    print("  ‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
    return True


def main() -> None:
    tests = [
        test_script_execution,
        test_sections_present,
        test_zone_counts_consistency,
        test_combined_strategy_non_empty,
        test_cross_references,
    ]

    results = []
    for test in tests:
        try:
            results.append(test())
        except Exception as exc:  # pragma: no cover - —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            print(f"  ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {test.__name__}: {exc}")
            results.append(False)

    passed = sum(1 for value in results if value)
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤")

    if not all(results):
        sys.exit(1)


if __name__ == "__main__":
    main()
