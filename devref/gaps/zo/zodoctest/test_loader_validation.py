import os
import sys
import traceback
import warnings
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Callable, Iterable, List, Tuple

import numpy as np
import pandas as pd


PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

DOCUMENT_PATH = PROJECT_ROOT / "docs" / "api" / "data" / "loader.md"


def _print_result(title: str, success: bool) -> None:
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {title}")


def _build_demo_dataframe(rows: int = 120) -> pd.DataFrame:
    """–°–æ–∑–¥–∞—ë—Ç OHLCV DataFrame, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ loader."""

    index = pd.date_range("2024-01-01", periods=rows, freq="H", name="time")
    base = np.linspace(1900.0, 1950.0, rows)
    oscillation = np.sin(np.linspace(0, 8 * np.pi, rows))
    close = base + oscillation
    open_ = close - 0.4
    high = np.maximum(open_, close) + 0.7
    low = np.minimum(open_, close) - 0.7
    volume = np.linspace(800, 1800, rows)

    return pd.DataFrame(
        {
            "open": open_,
            "high": high,
            "low": low,
            "close": close,
            "volume": volume,
        },
        index=index,
    )


def test_code_examples() -> bool:
    print("\nüì• –¢–µ—Å—Ç: –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    try:
        from bquant.data.loader import (
            load_ohlcv_data,
            get_data_info,
            load_symbol_data,
            load_all_data_files,
        )
        from bquant.core.config import get_data_dir, set_data_dir
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ loader/config: {exc}")
        traceback.print_exc()
        return False

    demo_df = _build_demo_dataframe()

    with TemporaryDirectory() as tmp_dir:
        tmp_root = Path(tmp_dir)
        data_dir = tmp_root / "data"
        data_dir.mkdir()

        manual_csv = data_dir / "XAUUSD_1h.csv"
        tradingview_csv = data_dir / "OANDA_XAUUSD, 60.csv"

        demo_df.to_csv(manual_csv)
        demo_df.to_csv(tradingview_csv)

        original_dir = get_data_dir()
        original_cwd = os.getcwd()

        try:
            set_data_dir(data_dir)
            os.chdir(tmp_root)

            df = load_ohlcv_data('data/XAUUSD_1h.csv', symbol='XAUUSD', timeframe='1h')
            info = get_data_info(df)
            tv_df = load_symbol_data(
                'XAUUSD',
                '1h',
                data_source='tradingview',
                quote_provider='oanda',
            )
            datasets = load_all_data_files()
        except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {exc}")
            traceback.print_exc()
            return False
        finally:
            os.chdir(original_cwd)
            set_data_dir(original_dir)

    if df.empty or tv_df.empty:
        print("  ‚ùå –û–¥–∏–Ω –∏–∑ DataFrame –ø—É—Å—Ç")
        return False

    if info.get('rows', 0) != len(df):
        print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ get_data_info: {info}")
        return False

    if not set(['XAUUSD_1h', 'XAUUSD_60']).issubset(datasets.keys()):
        print(f"  ‚ùå –ù–µ –≤—Å–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {datasets.keys()}")
        return False

    if any(data.empty for data in datasets.values()):
        print("  ‚ùå –ù–∞–π–¥–µ–Ω –ø—É—Å—Ç–æ–π –¥–∞—Ç–∞—Å–µ—Ç –≤ load_all_data_files")
        return False

    print(
        "  ‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–±–æ—Ä–æ–≤:",
        f"{len(datasets)}, —Å—Ç—Ä–æ–∫–∏: {len(df)}, —Ç–∞–π–º—Ñ—Ä–µ–π–º: 1h",
    )
    return True


def test_logging_snippet() -> bool:
    print("\nü™µ –¢–µ—Å—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    import logging

    try:
        logging.getLogger('bquant.data.loader').setLevel(logging.WARNING)
        logging.getLogger('bquant.data').setLevel(logging.WARNING)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–≥–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False

    loader_level = logging.getLogger('bquant.data.loader').level
    data_level = logging.getLogger('bquant.data').level
    print(f"  ‚ÑπÔ∏è –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–≥–µ—Ä–∞: loader={loader_level}, data={data_level}")
    return loader_level == logging.WARNING and data_level == logging.WARNING


def test_cross_reference() -> bool:
    print("\nüîó –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫")

    targets: Iterable[Tuple[str, Path]] = [
        ("core logging", PROJECT_ROOT / 'docs' / 'api' / 'core' / 'logging.md'),
    ]

    missing: List[str] = []
    for name, path in targets:
        if not path.exists():
            missing.append(name)

    if missing:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing}")
        return False

    if not DOCUMENT_PATH.exists():
        print("  ‚ùå –°–∞–º –¥–æ–∫—É–º–µ–Ω—Ç loader.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    print("  ‚ÑπÔ∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    return True


def main() -> int:
    warnings.filterwarnings("ignore", category=FutureWarning)
    warnings.filterwarnings("ignore", category=pd.errors.PerformanceWarning)

    tests: Tuple[Tuple[str, Callable[[], bool]], ...] = (
        ("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞", test_code_examples),
        ("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_logging_snippet),
        ("–°—Å—ã–ª–∫–∏", test_cross_reference),
    )

    all_success = True
    for title, func in tests:
        success = func()
        _print_result(title, success)
        all_success &= success

    return 0 if all_success else 1


if __name__ == "__main__":
    sys.exit(main())
