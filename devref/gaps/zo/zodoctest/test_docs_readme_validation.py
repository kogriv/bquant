#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/README.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ docs/README.md
–°–æ–∑–¥–∞–Ω: 2025-10-24
"""

import sys
import os
import subprocess
import webbrowser
from pathlib import Path

def test_file_existence():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    files_to_check = [
        'SETUP_READTHEDOCS.md',
        '.readthedocs.yml',
        'docs/conf.py',
        'docs/Makefile',
        'docs/index.rst'
    ]
    
    results = []
    for file_path in files_to_check:
        exists = os.path.exists(file_path)
        status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        print(f"  {file_path}: {status}")
        results.append((file_path, exists))
    
    return all(exists for _, exists in results)

def test_sphinx_commands():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã Sphinx"""
    print("\nüìã –¢–µ—Å—Ç: –ö–æ–º–∞–Ω–¥—ã Sphinx")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å sphinx-build
    try:
        result = subprocess.run(['sphinx-build', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ sphinx-build –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –í–µ—Ä—Å–∏—è: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå sphinx-build –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sphinx-build: {e}")
        return False

def test_pip_install():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É pip install"""
    print("\nüìã –¢–µ—Å—Ç: pip install –∫–æ–º–∞–Ω–¥–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        cmd = ['pip', 'install', '-e', '.[docs]', '--dry-run']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ pip install -e .[docs] —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ pip install: {result.stderr}")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pip install: {e}")
        return False

def test_sphinx_build_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–±–æ—Ä–∫–∏ Sphinx"""
    print("\nüìã –¢–µ—Å—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏")
    
    required_dirs = ['docs', 'docs/_static', 'docs/_templates']
    required_files = ['docs/conf.py', 'docs/index.rst']
    
    all_exist = True
    
    for dir_path in required_dirs:
        exists = os.path.exists(dir_path) and os.path.isdir(dir_path)
        status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        print(f"  {dir_path}/: {status}")
        if not exists:
            all_exist = False
    
    for file_path in required_files:
        exists = os.path.exists(file_path)
        status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
        print(f"  {file_path}: {status}")
        if not exists:
            all_exist = False
    
    return all_exist

def test_language_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
    try:
        with open('docs/README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        russian_words = ['–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '—Å–±–æ—Ä–∫–∞', '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ']
        found_russian = sum(1 for word in russian_words if word in content.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –∫–æ–¥–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        code_blocks = content.count('```')
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤: {found_russian}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞: {code_blocks}")
        print("‚úÖ –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: —Ä—É—Å—Å–∫–∏–π (–∫–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        
        return found_russian > 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/README.md")
    print("=" * 50)
    
    tests = [
        ("–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", test_file_existence),
        ("–ö–æ–º–∞–Ω–¥—ã Sphinx", test_sphinx_commands),
        ("pip install –∫–æ–º–∞–Ω–¥–∞", test_pip_install),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏", test_sphinx_build_structure),
        ("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞", test_language_check),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
