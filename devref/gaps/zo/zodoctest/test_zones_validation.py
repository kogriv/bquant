#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ docs/api/analysis/zones.md
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, cross-references –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
"""

import sys
import os
import importlib
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

def test_imports_from_docs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üìã –¢–µ—Å—Ç: –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    imports_to_test = [
        # Universal Pipeline
        ('bquant.analysis.zones', 'analyze_zones'),
        ('bquant.data.samples', 'get_sample_data'),
    ]
    
    success_count = 0
    total_count = len(imports_to_test)
    
    for module_name, class_or_func_name in imports_to_test:
        try:
            module = importlib.import_module(module_name)
            obj = getattr(module, class_or_func_name)
            print(f"  ‚úÖ {module_name}.{class_or_func_name}")
            success_count += 1
        except Exception as e:
            print(f"  ‚ùå {module_name}.{class_or_func_name}: {e}")
    
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    return success_count == total_count

def test_indicator_context_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä indicator_context –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: indicator_context –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # –°–æ–∑–¥–∞–µ–º RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data['RSI_14'] = data['close'].rolling(14).mean()  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π RSI –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # Universal Pipeline —Å RSI
        result = (
            analyze_zones(data)
            .detect_zones('zero_crossing', indicator_col='RSI_14')
            .build()
        )
        
        print(f"  ‚úÖ Universal Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º indicator_context
        if result.zones:
            zone = result.zones[0]
            context = zone.indicator_context
            
            print(f"  ‚úÖ indicator_context –¥–æ—Å—Ç—É–ø–µ–Ω:")
            print(f"    detection_indicator: {context.get('detection_indicator', 'N/A')}")
            print(f"    detection_strategy: {context.get('detection_strategy', 'N/A')}")
            print(f"    signal_line: {context.get('signal_line', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º convenience methods
            primary_indicator = zone.get_primary_indicator_column()
            signal_line = zone.get_signal_line_column()
            
            print(f"  ‚úÖ Convenience methods:")
            print(f"    get_primary_indicator_column(): {primary_indicator}")
            print(f"    get_signal_line_column(): {signal_line}")
            
            return True
        else:
            print(f"  ‚ö†Ô∏è –ù–µ—Ç –∑–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ indicator_context")
            return True
        
    except Exception as e:
        print(f"  ‚ùå indicator_context example: {e}")
        traceback.print_exc()
        return False

def test_macd_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä MACD –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: MACD –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # MACD example –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        result = (
            analyze_zones(data)
            .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
            .detect_zones('zero_crossing', indicator_col='macd_hist')
            .analyze()
            .build()
        )
        
        print(f"  ‚úÖ MACD –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º context
        if result.zones:
            zone = result.zones[0]
            context = zone.indicator_context
            print(f"  ‚úÖ Context: {context.get('detection_indicator')} / {context.get('detection_strategy')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå MACD example: {e}")
        traceback.print_exc()
        return False

def test_rsi_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä RSI –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: RSI –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # RSI example –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        result = (
            analyze_zones(data)
            .with_indicator('pandas_ta', 'rsi', length=14)
            .detect_zones('threshold',
                         indicator_col='RSI_14',
                         upper_threshold=70,
                         lower_threshold=30)
            .analyze()
            .build()
        )
        
        print(f"  ‚úÖ RSI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º context
        if result.zones:
            zone = result.zones[0]
            context = zone.indicator_context
            print(f"  ‚úÖ Context: {context.get('detection_indicator')} / {context.get('detection_strategy')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå RSI example: {e}")
        traceback.print_exc()
        return False

def test_stochastic_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä Stochastic –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Stochastic –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # Stochastic example –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        result = (
            analyze_zones(data)
            .with_indicator('pandas_ta', 'stoch', k=14, d=3)
            .detect_zones('line_crossing',
                         line1_col='STOCHk_14_3_3',
                         line2_col='STOCHd_14_3_3')
            .analyze()
            .build()
        )
        
        print(f"  ‚úÖ Stochastic –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º context –¥–ª—è 2-line strategy
        if result.zones:
            zone = result.zones[0]
            context = zone.indicator_context
            print(f"  ‚úÖ Context: {context.get('detection_indicator')} / {context.get('signal_line')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Stochastic example: {e}")
        traceback.print_exc()
        return False

def test_custom_indicator_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä custom indicator –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Custom indicator –ø—Ä–∏–º–µ—Ä")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # Custom indicator example –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        data['MY_CUSTOM_OSC'] = data['close'].diff(5) / data['close'].rolling(20).std()
        
        result = (
            analyze_zones(data)
            .detect_zones('zero_crossing', indicator_col='MY_CUSTOM_OSC')
            .analyze()
            .build()
        )
        
        print(f"  ‚úÖ Custom indicator –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(result.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º context
        if result.zones:
            zone = result.zones[0]
            context = zone.indicator_context
            print(f"  ‚úÖ Context: {context.get('detection_indicator')} / {context.get('detection_strategy')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Custom indicator example: {e}")
        traceback.print_exc()
        return False

def test_strategies_examples():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Strategies –ø—Ä–∏–º–µ—Ä—ã")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # Simple swing analysis example
        result1 = (
            analyze_zones(data)
            .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
            .detect_zones('zero_crossing', indicator_col='macd_hist')
            .with_strategies(swing='find_peaks')
            .analyze(clustering=True)
            .build()
        )
        
        print(f"  ‚úÖ Simple swing analysis: {len(result1.zones)} –∑–æ–Ω")
        
        # Multiple strategies example
        result2 = (
            analyze_zones(data)
            .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
            .detect_zones('zero_crossing', indicator_col='macd_hist')
            .with_strategies(
                swing='find_peaks',
                shape='statistical',
                divergence='classic',
                volume='standard'
            )
            .analyze(clustering=True)
            .build()
        )
        
        print(f"  ‚úÖ Multiple strategies: {len(result2.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º features
        if result2.zones:
            zone = result2.zones[0]
            if zone.features:
                print(f"  ‚úÖ Features –¥–æ—Å—Ç—É–ø–Ω—ã:")
                print(f"    num_peaks: {zone.features.get('num_peaks', 'N/A')}")
                print(f"    skewness: {zone.features.get('skewness', 'N/A')}")
                print(f"    has_classic_divergence: {zone.features.get('has_classic_divergence', 'N/A')}")
                print(f"    volume_indicator_corr: {zone.features.get('volume_indicator_corr', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Strategies examples: {e}")
        traceback.print_exc()
        return False

def test_universal_pipeline_examples():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã Universal Pipeline –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç: Universal Pipeline –ø—Ä–∏–º–µ—Ä—ã")
    
    try:
        from bquant.analysis.zones import analyze_zones
        from bquant.data.samples import get_sample_data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_sample_data('tv_xauusd_1h')
        
        # MACD Analysis example
        result1 = (
            analyze_zones(data)
            .with_indicator('custom', 'macd', fast_period=12, slow_period=26, signal_period=9)
            .detect_zones('zero_crossing', indicator_col='macd_hist')
            .with_strategies(swing='find_peaks', divergence='classic')
            .analyze(clustering=True, n_clusters=3)
            .build()
        )
        
        print(f"  ‚úÖ MACD Analysis: {len(result1.zones)} –∑–æ–Ω")
        
        # RSI Analysis example
        result2 = (
            analyze_zones(data)
            .with_indicator('pandas_ta', 'rsi', length=14)
            .detect_zones('threshold', indicator_col='rsi', 
                          upper_threshold=70, lower_threshold=30)
            .with_strategies(swing='pivot_points', volatility='combined')
            .analyze(clustering=True)
            .build()
        )
        
        print(f"  ‚úÖ RSI Analysis: {len(result2.zones)} –∑–æ–Ω")
        
        # Custom Indicator example
        data['MY_OSC'] = data['close'].diff(5) / data['close'].rolling(20).std()
        
        result3 = (
            analyze_zones(data)
            .detect_zones('zero_crossing', indicator_col='MY_OSC')
            .with_strategies(swing='find_peaks', shape='statistical')
            .analyze(clustering=True)
            .build()
        )
        
        print(f"  ‚úÖ Custom Indicator: {len(result3.zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ZoneInfo —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if result1.zones:
            zone = result1.zones[0]
            print(f"  ‚úÖ ZoneInfo —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            print(f"    zone_id: {zone.zone_id}")
            print(f"    type: {zone.type}")
            print(f"    start_time: {zone.start_time}")
            print(f"    end_time: {zone.end_time}")
            print(f"    features: {'available' if zone.features else 'None'}")
            print(f"    indicator_context: {'available' if zone.indicator_context else 'None'}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Universal Pipeline examples: {e}")
        traceback.print_exc()
        return False

def test_legacy_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º legacy –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (deprecated)"""
    print("\nüìã –¢–µ—Å—Ç: Legacy –ø—Ä–∏–º–µ—Ä (deprecated)")
    
    try:
        from bquant.analysis.zones import find_support_resistance, ZoneFeaturesAnalyzer
        
        # Legacy example –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        from bquant.data.samples import get_sample_data
        data = get_sample_data('tv_xauusd_1h')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deprecated —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã
        zones = find_support_resistance(data, window=20, min_touches=2)
        print(f"  ‚úÖ find_support_resistance –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(zones)} –∑–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ZoneFeaturesAnalyzer
        zfa = ZoneFeaturesAnalyzer()
        print(f"  ‚úÖ ZoneFeaturesAnalyzer —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º extract_zone_features (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–æ–Ω—ã)
        if zones:
            zone_info = {'type': 'bull', 'data': data.iloc[:100]}  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
            try:
                zone_features = zfa.extract_zone_features(zone_info)
                print(f"  ‚úÖ extract_zone_features –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                print(f"  ‚ö†Ô∏è extract_zone_features: {e} (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è deprecated API)")
        
        print(f"  ‚úÖ Legacy API –¥–æ—Å—Ç—É–ø–µ–Ω (deprecated)")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Legacy example: {e}")
        traceback.print_exc()
        return False

def test_cross_references():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º cross-references"""
    print("\nüìã –¢–µ—Å—Ç: Cross-references")
    
    cross_refs = [
        'docs/api/analysis/pipeline.md',
        'docs/api/analysis/strategies.md',
        'docs/api/analysis/statistical.md',
        'docs/examples/README.md'
    ]
    
    success_count = 0
    for ref in cross_refs:
        if os.path.exists(ref):
            print(f"  ‚úÖ {ref}")
            success_count += 1
        else:
            print(f"  ‚ùå {ref} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
    
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(cross_refs)} —Å—Å—ã–ª–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    return success_count == len(cross_refs)

def test_language_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìã –¢–µ—Å—Ç: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞")
    
    try:
        with open('docs/api/analysis/zones.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        russian_words = ['–∞–Ω–∞–ª–∏–∑', '–∑–æ–Ω—ã', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–∫–æ–Ω—Ç–µ–∫—Å—Ç']
        found_russian = sum(1 for word in russian_words if word in content.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        code_blocks = content.count('```python')
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤: {found_russian}")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞: {code_blocks}")
        print(f"  ‚úÖ –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: —Ä—É—Å—Å–∫–∏–π (–∫–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Language check: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/analysis/zones.md")
    print("=" * 60)
    
    tests = [
        test_imports_from_docs,
        test_indicator_context_example,
        test_macd_example,
        test_rsi_example,
        test_stochastic_example,
        test_custom_indicator_example,
        test_strategies_examples,
        test_universal_pipeline_examples,
        test_legacy_example,
        test_cross_references,
        test_language_check
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"  ‚ùå –¢–µ—Å—Ç {test.__name__} —É–ø–∞–ª: {e}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(f"  –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  indicator_context –ø—Ä–∏–º–µ—Ä: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  MACD –ø—Ä–∏–º–µ—Ä: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 3 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  RSI –ø—Ä–∏–º–µ—Ä: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 4 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Stochastic –ø—Ä–∏–º–µ—Ä: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 5 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Custom indicator –ø—Ä–∏–º–µ—Ä: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 6 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Strategies –ø—Ä–∏–º–µ—Ä—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 7 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Universal Pipeline –ø—Ä–∏–º–µ—Ä—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 8 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Legacy –ø—Ä–∏–º–µ—Ä (deprecated): {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 9 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  Cross-references: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 10 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if passed >= 11 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
