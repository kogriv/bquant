"""–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–∑ docs/api/indicators/macd.md."""

import os
import sys
import traceback
import warnings
from functools import lru_cache
from pathlib import Path
from typing import Dict

import pandas as pd

os.environ.setdefault("NUMBA_DISABLE_JIT", "1")

PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ pandas-ta –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ README
from devref.gaps.zo.zodoctest import test_indicators_readme_validation as readme_helpers  # noqa: E402

DOC_PATH = PROJECT_ROOT / "docs" / "api" / "indicators" / "macd.md"


@lru_cache(maxsize=1)
def _load_dataframe() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç sample-–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç macd_hist."""
    frame = readme_helpers._load_sample_data().copy()
    return frame


@lru_cache(maxsize=1)
def _legacy_result():
    from bquant.indicators.macd import MACDZoneAnalyzer

    df = _load_dataframe()
    with warnings.catch_warnings(record=True) as captured:
        warnings.simplefilter("always", DeprecationWarning)
        analyzer = MACDZoneAnalyzer()
        result = analyzer.analyze_complete(df)
    assert any(
        "MACDZoneAnalyzer is deprecated" in str(item.message)
        for item in captured
    ), "–û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ–∫–∞—Ü–∏–∏"
    return result


@lru_cache(maxsize=1)
def _pipeline_result():
    from bquant.analysis.zones import analyze_zones

    df = _load_dataframe()
    return (
        analyze_zones(df)
        .with_indicator(
            "custom", "macd", fast_period=12, slow_period=26, signal_period=9
        )
        .detect_zones("zero_crossing", indicator_col="macd_hist")
        .with_strategies(swing="find_peaks", divergence="classic")
        .analyze(clustering=True, n_clusters=3)
        .build()
    )


@lru_cache(maxsize=1)
def _preset_result():
    from bquant.indicators.macd import analyze_macd_zones

    df = _load_dataframe()
    return analyze_macd_zones(
        df,
        macd_params={"fast": 12, "slow": 26, "signal": 9},
    )


def test_cross_references() -> bool:
    print("üìã –¢–µ—Å—Ç: Cross-references macd.md")

    targets = [
        PROJECT_ROOT / "docs" / "api" / "analysis" / "pipeline.md",
        PROJECT_ROOT / "docs" / "api" / "analysis" / "zones.md",
        PROJECT_ROOT / "docs" / "api" / "analysis" / "strategies.md",
        PROJECT_ROOT / "docs" / "api" / "indicators" / "base.md",
        PROJECT_ROOT / "docs" / "api" / "indicators" / "preloaded.md",
        PROJECT_ROOT / "docs" / "api" / "indicators" / "factory.md",
    ]

    missing = [str(path) for path in targets if not path.exists()]
    if missing:
        print("  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for path in missing:
            print(f"    - {path}")
        return False

    print("  ‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
    return True


def test_deprecation_decorator() -> bool:
    print("üìã –¢–µ—Å—Ç: Deprecation decorator")

    from bquant.indicators.macd import MACDZoneAnalyzer

    message = getattr(MACDZoneAnalyzer, "__deprecation_message__", "")
    if "MACDZoneAnalyzer is deprecated" not in message:
        print("  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        return False

    if not getattr(MACDZoneAnalyzer, "__deprecated__", False):
        print("  ‚ùå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @deprecated –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return False

    print("  ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    return True


def test_migration_examples() -> bool:
    print("üìã –¢–µ—Å—Ç: Migration guide")

    legacy_result = _legacy_result()
    if not legacy_result.zones:
        print("  ‚ùå Legacy –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–æ–Ω")
        return False

    zone_dict = legacy_result.zones[0].to_analyzer_format()
    expected_keys = {"zone_id", "type", "duration", "indicator_context"}
    if not expected_keys.issubset(zone_dict.keys()):
        print("  ‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–π")
        return False

    from bquant.analysis.zones import analyze_zones

    df = _load_dataframe()
    new_result = (
        analyze_zones(df)
        .with_indicator(
            "custom", "macd", fast_period=12, slow_period=26, signal_period=9
        )
        .detect_zones("zero_crossing", indicator_col="macd_hist")
        .analyze(clustering=True)
        .build()
    )

    if not new_result.zones:
        print("  ‚ùå Universal Pipeline –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–æ–Ω")
        return False

    feature_value = new_result.zones[0].features.get("zone_type")
    print(f"  ‚ÑπÔ∏è feature zone_type: {feature_value}")
    return True


def test_zone_iteration_example() -> bool:
    print("üìã –¢–µ—Å—Ç: –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∑–æ–Ω–∞–º")

    result = _pipeline_result()
    try:
        for zone in result.zones[:3]:
            line = f"–ó–æ–Ω–∞ {zone.type}: {zone.start_time} - {zone.end_time}"
            print(f"  ‚Üí {line}")
            if zone.features:
                swings = zone.features.get("num_swings", 0)
                divergence = zone.features.get("has_classic_divergence", False)
                print(f"     Swings: {swings}, Divergence: {divergence}")
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –∑–æ–Ω: {exc}")
        traceback.print_exc()
        return False

    return True


def test_preset_example() -> bool:
    print("üìã –¢–µ—Å—Ç: Preset analyze_macd_zones")

    preset = _preset_result()
    if not preset.zones:
        print("  ‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–æ–Ω")
        return False

    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(preset.zones)}")
    return True


def test_legacy_snippet() -> bool:
    print("üìã –¢–µ—Å—Ç: Legacy API")

    legacy_result = _legacy_result()
    print(f"  ‚úÖ Legacy –∑–æ–Ω: {len(legacy_result.zones)}")
    return True


def test_preloaded_indicator_example() -> bool:
    print("üìã –¢–µ—Å—Ç: PRELOADED MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")

    from bquant.indicators.preloaded import MACDPreloadedIndicator
    from bquant.data.samples import get_sample_data

    data = get_sample_data("tv_xauusd_1h")

    macd_indicator = MACDPreloadedIndicator()
    info = MACDPreloadedIndicator.get_info()
    if "macd" not in info.get("required_fields", {}):
        print("  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ required_fields")
        return False

    result = macd_indicator.calculate(data)
    if result.data.empty:
        print("  ‚ùå calculate() –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False

    trending_up = macd_indicator.is_trending_up(data, column="macd")
    trending_down = macd_indicator.is_trending_down(data, column="macd")
    crossovers: Dict[str, object] = macd_indicator.get_crossovers(data)

    print(f"  ‚ÑπÔ∏è Trending up: {trending_up}, trending down: {trending_down}")
    print(f"  ‚ÑπÔ∏è Keys: {sorted(crossovers.keys())}")
    return True


def test_preloaded_custom_columns_example() -> bool:
    print("üìã –¢–µ—Å—Ç: PRELOADED c –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏")

    from bquant.indicators.preloaded import MACDPreloadedIndicator
    from bquant.data.samples import get_sample_data

    data = get_sample_data("tv_xauusd_1h")

    macd_only = MACDPreloadedIndicator(required_columns=["macd"])
    if not macd_only.validate_data(data):
        print("  ‚ùå validate_data() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True –¥–ª—è ['macd']")
        return False

    macd_full = MACDPreloadedIndicator(
        required_columns=["macd", "signal", "histogram"]
    )
    try:
        is_valid = macd_full.validate_data(data)
    except ValueError as exc:
        print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
        return False

    print(f"  ‚ÑπÔ∏è validate_data(['macd','signal','histogram']) -> {is_valid}")
    return bool(is_valid)


def main() -> None:
    tests = [
        test_cross_references,
        test_deprecation_decorator,
        test_migration_examples,
        test_zone_iteration_example,
        test_preset_example,
        test_legacy_snippet,
        test_preloaded_indicator_example,
        test_preloaded_custom_columns_example,
    ]

    results = []
    for test in tests:
        try:
            results.append(test())
        except Exception as exc:  # pragma: no cover - —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            print(f"  ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {test.__name__}: {exc}")
            traceback.print_exc()
            results.append(False)

    total = sum(1 for value in results if value)
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ {total}/{len(results)} —Ç–µ—Å—Ç–æ–≤")

    if not all(results):
        sys.exit(1)


if __name__ == "__main__":
    main()
