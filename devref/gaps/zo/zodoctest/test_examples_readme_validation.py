"""–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ docs/examples/README.md (—ç—Ç–∞–ø 4.2)."""

from __future__ import annotations

import logging
import os
import re
import sys
from pathlib import Path
from typing import Iterable, List

PROJECT_ROOT = Path(__file__).resolve().parents[4]
EXAMPLES_README = PROJECT_ROOT / "docs/examples/README.md"

os.environ.setdefault("BQUANT_LOG_LEVEL", "ERROR")
logging.getLogger().setLevel(logging.WARNING)


def _extract_links(markdown_text: str) -> List[str]:
    pattern = re.compile(r"\[[^\]]+\]\(([^)]+)\)")
    return pattern.findall(markdown_text)


def _extract_code_blocks(markdown_text: str, language: str) -> List[str]:
    pattern = re.compile(rf"```{language}\n(.*?)```", re.DOTALL)
    return [block.strip() for block in pattern.findall(markdown_text)]


def test_relative_links() -> bool:
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ docs/examples/README.md")
    content = EXAMPLES_README.read_text(encoding="utf-8")
    links = _extract_links(content)
    relative_links = [
        link for link in links if not link.startswith(("http://", "https://", "mailto:"))
    ]

    all_exist = True
    for link in relative_links:
        target = link.split("#", 1)[0]
        if not target:
            continue
        target_path = (EXAMPLES_README.parent / target).resolve()
        exists = target_path.exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {link} ‚Üí {target_path}")
        if not exists:
            all_exist = False

    return all_exist


def test_python_code_blocks() -> bool:
    print("üêç –í—ã–ø–æ–ª–Ω—è–µ–º python-–±–ª–æ–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    content = EXAMPLES_README.read_text(encoding="utf-8")
    python_blocks = _extract_code_blocks(content, "python")

    if not python_blocks:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã python-–±–ª–æ–∫–∏")
        return False

    os.chdir(PROJECT_ROOT)
    if str(PROJECT_ROOT) not in sys.path:
        sys.path.insert(0, str(PROJECT_ROOT))
    namespace: dict[str, object] = {"__name__": "__main__"}
    success = True

    for idx, block in enumerate(python_blocks):
        print(f"  ‚ñ∂Ô∏è –ë–ª–æ–∫ {idx + 1}/{len(python_blocks)}")
        try:
            exec(compile(block, f"examples_readme_block_{idx}", "exec"), namespace)
        except Exception as exc:  # noqa: BLE001
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–∞ {idx}: {exc}")
            success = False
            continue

        if idx in (0, 1, 2):
            result = namespace.get("result")
            if not hasattr(result, "zones"):
                print("    ‚ùå –í –±–ª–æ–∫–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∑–æ–Ω–∞–º–∏")
                success = False
            else:
                zones = getattr(result, "zones", [])
                print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–æ–Ω: {len(zones)}")
                if len(zones) == 0:
                    print("    ‚ö†Ô∏è –ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è RSI 70/30).")

    return success


def test_bash_blocks() -> bool:
    print("üêö –ü—Ä–æ–≤–µ—Ä—è–µ–º bash-–±–ª–æ–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")
    content = EXAMPLES_README.read_text(encoding="utf-8")
    bash_blocks = _extract_code_blocks(content, "bash")

    if not bash_blocks:
        print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã bash-–±–ª–æ–∫–∏")
        return False

    commands = [line.strip() for block in bash_blocks for line in block.splitlines() if line.strip()]
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥")

    required_markers: Iterable[str] = (
        "git clone https://github.com/bquant-team/bquant.git",
        "cd bquant",
        "pip install -e .",
        "python examples/01_basic_indicators.py",
        "python examples/02a_universal_zones.py",
    )

    ok = True
    for marker in required_markers:
        if marker not in commands:
            print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {marker}")
            ok = False
        else:
            print(f"  ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {marker}")

    forbidden_fragments = ("docs/examples/",)
    for cmd in commands:
        if any(fragment in cmd for fragment in forbidden_fragments):
            print(f"  ‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            ok = False

    return ok


def test_language_markers() -> bool:
    print("üó£Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    content = EXAMPLES_README.read_text(encoding="utf-8").lower()
    markers: Iterable[str] = (
        "–ø—Ä–∏–º–µ—Ä",
        "–∞–Ω–∞–ª–∏–∑",
        "—Å—Ç—Ä–∞—Ç–µ–≥",
        "–∑–æ–Ω–∞",
        "–≤–∏–∑—É–∞–ª",
        "–º–∏–≥—Ä–∞—Ü",
    )
    found = sum(1 for marker in markers if marker in content)
    print(f"  –ù–∞–π–¥–µ–Ω–æ {found} —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤")
    return found >= 5


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/examples/README.md")
    print("=" * 50)

    tests = [
        ("–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏", test_relative_links),
        ("Python-–±–ª–æ–∫–∏", test_python_code_blocks),
        ("Bash-–∫–æ–º–∞–Ω–¥—ã", test_bash_blocks),
        ("–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", test_language_markers),
    ]

    passed = 0
    for name, func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {name}")
        try:
            if func():
                print("  ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
                passed += 1
            else:
                print("  ‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as exc:  # noqa: BLE001
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc}")

    total = len(tests)
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    success = passed == total
    print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã!" if success else "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
    return success


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
