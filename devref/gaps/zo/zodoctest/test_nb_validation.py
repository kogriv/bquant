#!/usr/bin/env python3
"""–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ docs/api/core/nb.md."""

from __future__ import annotations

import builtins
import contextlib
import io
import os
import sys
import tempfile
import traceback
from datetime import timedelta
from pathlib import Path
from typing import Iterable, List, Optional

project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))


@contextlib.contextmanager
def _patched_argv(temp_dir: Path, script_name: str, extra_args: Optional[Iterable[str]] = None):
    original_argv = sys.argv[:]
    script_path = temp_dir / script_name
    argv = [str(script_path)]
    if extra_args:
        argv.extend(list(extra_args))
    sys.argv = argv
    try:
        yield script_path
    finally:
        sys.argv = original_argv


@contextlib.contextmanager
def _patched_input(responses: Iterable[str]):
    iterator = iter(responses)
    original_input = builtins.input

    def _fake_input(prompt: str = "") -> str:  # pragma: no cover - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–æ–∫—Ç–µ—Å—Ç–∞—Ö
        try:
            return next(iterator)
        except StopIteration:
            return ""

    builtins.input = _fake_input
    try:
        yield
    finally:
        builtins.input = original_input


def _capture_exit(callable_obj, *args, **kwargs) -> int:
    try:
        callable_obj(*args, **kwargs)
    except SystemExit as exc:  # pragma: no cover - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        if isinstance(exc.code, int):
            return exc.code
        return 1
    return 0


def test_intro_snippet(temp_dir: Path) -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏."""

    print("üìã –ü—Ä–∏–º–µ—Ä: NotebookSimulator ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Å–Ω–∏–ø–ø–µ—Ç")

    try:
        from bquant.core.nb import NotebookSimulator
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç NotebookSimulator –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    with _patched_argv(temp_dir, "intro_snippet.py"), _patched_input(["", ""]):
        nb = NotebookSimulator("My Analysis Script")
        nb.step("Data Loading")
        nb.wait()
        nb.step("Analysis")
        nb.wait()
        exit_code = _capture_exit(nb.finish)

    log_file = temp_dir / "intro_snippet_log.txt"
    exists = log_file.exists() and log_file.stat().st_size > 0
    print(f"  ‚úÖ –õ–æ–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exists}")
    return exit_code == 0 and exists


def test_basic_script(temp_dir: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç¬ª."""

    print("üìã –ü—Ä–∏–º–µ—Ä: –ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")

    try:
        from bquant.core.nb import NotebookSimulator
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç NotebookSimulator –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    cleanup_codes: List[int] = []

    try:
        with _patched_argv(temp_dir, "basic_script.py"), _patched_input(["", ""]):
            nb = NotebookSimulator("Example Analysis Script")

            nb.step("Data Loading")
            try:
                nb.success("Data loaded successfully")
            except Exception as exc:  # pragma: no cover - –ø—É—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                nb.error(f"Failed to load data: {exc}")
                cleanup_codes.append(_capture_exit(nb.cleanup_and_exit, 1))

            nb.wait()

            nb.step("Data Processing")
            nb.success("Processing completed")
            nb.wait()

            exit_code = _capture_exit(nb.finish)
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False

    log_file = temp_dir / "basic_script_log.txt"
    exists = log_file.exists() and log_file.stat().st_size > 0
    print(f"  ‚úÖ –ë–∞–∑–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exists}")
    return exit_code == 0 and exists and not cleanup_codes


def test_advanced_example(temp_dir: Path) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö."""

    print("üìã –ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑")

    try:
        from bquant.core.nb import NotebookSimulator
        from bquant.data.samples import get_sample_data
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    data = None

    try:
        with _patched_argv(temp_dir, "advanced_script.py"), _patched_input(["", ""]):
            nb = NotebookSimulator("Advanced Data Analysis")

            def load_data():
                return get_sample_data("tv_xauusd_1h")

            nb.step("Data Loading and Validation")
            with nb.error_handling("Data loading", critical=True):
                data = load_data()
                nb.data_info("Rows loaded", len(data))
                nb.data_info("Memory usage", f"{data.memory_usage().sum() / 1024**2:.2f} MB")

            nb.wait()

            nb.step("Statistical Analysis")
            nb.substep("Descriptive Statistics")
            stats = data.describe()
            nb.success("Descriptive statistics calculated")

            nb.substep("Correlation Analysis")
            correlations = data.corr()
            nb.success("Correlation matrix generated")

            nb.wait()

            nb.step("Results Summary")
            nb.section_header("Analysis Results")
            nb.summary_item("Records processed", len(data), success=True)
            nb.summary_item("Variables analyzed", len(data.columns), success=True)
            missing = data.isnull().sum().sum()
            nb.summary_item("Missing values", missing, success=missing == 0)
            nb.next_steps([
                "Generate detailed report",
                "Create visualizations",
                "Export results to Excel",
            ])

            exit_code = _capture_exit(nb.finish)
    except Exception as exc:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {exc}")
        traceback.print_exc()
        return False

    log_file = temp_dir / "advanced_script_log.txt"
    exists = log_file.exists() and log_file.stat().st_size > 0
    stats_ok = data is not None and not stats.empty and not correlations.empty
    print(f"  ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª–æ–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exists}")
    return exit_code == 0 and exists and stats_ok


def test_minimal_usage(temp_dir: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è¬ª."""

    print("üìã –ü—Ä–∏–º–µ—Ä: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ç–æ—Ç–∞")

    try:
        from bquant.core.nb import NotebookSimulator
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç NotebookSimulator –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    with _patched_argv(temp_dir, "minimal_script.py"), _patched_input(["", ""]):
        nb = NotebookSimulator("My Analysis")
        nb.step("Loading Data")
        nb.wait()
        nb.step("Processing")
        nb.wait()
        exit_code = _capture_exit(nb.finish)

    log_file = temp_dir / "minimal_script_log.txt"
    exists = log_file.exists() and log_file.stat().st_size > 0
    print(f"  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exists}")
    return exit_code == 0 and exists


def test_utilities_section() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏ data_info/summary_item/next_steps –∏ —É—Ç–∏–ª–∏—Ç—ã."""

    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞: –ú–µ—Ç–æ–¥—ã –∏ —É—Ç–∏–ª–∏—Ç—ã")

    try:
        from bquant.core.nb import NotebookSimulator
    except Exception as exc:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç NotebookSimulator –Ω–µ —É–¥–∞–ª—Å—è: {exc}")
        traceback.print_exc()
        return False

    nb = NotebookSimulator("Utilities Example", auto_setup=False)
    nb.set_trap_mode(False)

    buffer = io.StringIO()
    original_stdout = sys.stdout
    try:
        sys.stdout = buffer
        nb.data_info("Rows", 1000)
        nb.data_info("Memory usage", "2.5 MB")
        nb.summary_item("Data loaded", "Successfully", success=True)
        nb.summary_item("Tests passed", "5/10", success=False)
        nb.next_steps([
            "Run validation tests",
            "Process missing data",
            "Generate reports",
        ])
    finally:
        sys.stdout = original_stdout

    output = buffer.getvalue()

    checks = [
        "  Rows: 1000" in output,
        "  Memory usage: 2.5 MB" in output,
        "[OK] Data loaded: Successfully" in output,
        "[FAIL] Tests passed: 5/10" in output,
        "[NEXT] Next Steps:" in output,
        "- Run validation tests" in output,
        "- Process missing data" in output,
        "- Generate reports" in output,
    ]

    size_kb = NotebookSimulator.format_file_size(1024)
    size_mb = NotebookSimulator.format_file_size(1048576)
    duration = nb.format_duration(nb.start_time, nb.start_time + timedelta(seconds=75))

    print(f"  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–∏–ª–∏—Ç: {checks.count(True)}/{len(checks)}")
    return all(checks) and size_kb == "1.00 KB" and size_mb == "1.00 MB" and duration == "1m 15s"


def test_cross_references() -> bool:
    """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""

    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞: Cross-references")

    targets = [
        project_root / "docs/api/core/README.md",
        project_root / "docs/api/core/logging.md",
        project_root / "docs/api/core/config.md",
        project_root / "docs/api/core/performance.md",
        project_root / "docs/api/core/utils.md",
    ]

    missing = [str(target) for target in targets if not target.exists()]
    if missing:
        print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {missing}")
        return False

    print("  ‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    return True


def test_language_requirements() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞."""

    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ø–∑—ã–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")

    doc_path = project_root / "docs/api/core/nb.md"
    try:
        content = doc_path.read_text(encoding="utf-8")
    except Exception as exc:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {exc}")
        traceback.print_exc()
        return False

    lower = content.lower()
    markers = ["–Ω–æ—É—Ç–±—É", "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω", "—à–∞–≥", "–ø–æ–¥—à–∞–≥", "—Ä–µ–∑—é–º–µ"]
    marker_hits = sum(1 for marker in markers if marker in lower)
    code_blocks = content.count("```python")

    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {marker_hits}/{len(markers)}")
    print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ python-–±–ª–æ–∫–æ–≤: {code_blocks}")

    return marker_hits == len(markers) and code_blocks >= 10


def main() -> bool:
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è docs/api/core/nb.md")
    print("=" * 60)

    with tempfile.TemporaryDirectory() as tmp_dir:
        temp_dir = Path(tmp_dir)
        original_cwd = Path.cwd()
        try:
            os.chdir(temp_dir)

            tests = [
                ("–û—Å–Ω–æ–≤–Ω–æ–π —Å–Ω–∏–ø–ø–µ—Ç", lambda: test_intro_snippet(temp_dir)),
                ("–ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç", lambda: test_basic_script(temp_dir)),
                ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä", lambda: test_advanced_example(temp_dir)),
                ("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ç–æ—Ç–∞", lambda: test_minimal_usage(temp_dir)),
                ("–ú–µ—Ç–æ–¥—ã –∏ —É—Ç–∏–ª–∏—Ç—ã", test_utilities_section),
                ("Cross-references", test_cross_references),
                ("–Ø–∑—ã–∫", test_language_requirements),
            ]

            results = []
            for name, func in tests:
                print(f"\n‚û°Ô∏è {name}")
                ok = func()
                results.append(ok)
                print(f"‚úîÔ∏è {name}: {'—É—Å–ø–µ—Ö' if ok else '–æ—à–∏–±–∫–∞'}")

            total = sum(results)
            print("=" * 60)
            print(f"–ò—Ç–æ–≥–æ: {total}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
            return all(results)
        finally:
            os.chdir(original_cwd)


if __name__ == "__main__":
    sys.exit(0 if main() else 1)
